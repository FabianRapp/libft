!<arch>
//                                              534       `
ft_lstnew_bonus.o/
ft_lstadd_front_bonus.o/
ft_lstsize_bonus.o/
ft_lstlast_bonus.o/
ft_lstadd_back_bonus.o/
ft_lstdelone_bonus.o/
ft_lstclear_bonus.o/
ft_lstiter_bonus.o/
ft_lstmap_bonus.o/
get_next_line_utils.o/
ft_printf_handle_c.o/
ft_printf_handle_di.o/
ft_printf_handle_u.o/
ft_printf_handle_p.o/
ft_printf_handle_percent.o/
ft_printf_handle_s.o/
ft_printf_handle_x.o/
ft_printf_handle_xx.o/
ft_realloc_copy_until_zeroed.o/
ft_strarr_size.o/
ft_strjoin_free_s1.o/
ft_strjoin_free_both.o/
ft_split_wildcards.o/
ft_iswhitespace.o/
ft_isalpha.o/   0           0     0     644     6991      `
	.file	"ft_isalpha.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_isalpha.c"
	.p2align 4
	.globl	ft_isalpha
	.type	ft_isalpha, @function
ft_isalpha:
.LVL0:
.LFB0:
	.file 1 "ft_isalpha.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_isalpha.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
# ft_isalpha.c:20: }
	.loc 1 20 1 is_stmt 0 view .LVU4
	xorl	%eax, %eax	#
# ft_isalpha.c:15: 	if (c >= 65 && c <= 90)
	.loc 1 15 5 view .LVU5
	andl	$-33, %edi	#, tmp89
.LVL1:
# ft_isalpha.c:20: }
	.loc 1 20 1 view .LVU6
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_isalpha.c:15: 	if (c >= 65 && c <= 90)
	.loc 1 15 5 view .LVU7
	subl	$65, %edi	#, tmp90
# ft_isalpha.c:20: }
	.loc 1 20 1 view .LVU8
	cmpl	$25, %edi	#, tmp90
	setbe	%al	#,
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_isalpha, .-ft_isalpha
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x67
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x1
	.long	.LASF2
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.long	0x63
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x63
	.uleb128 0x3
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x14
	.long	0x63
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF3:
	.string	"ft_isalpha"
.LASF2:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_isalpha.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_isdigit.o/   0           0     0     644     6839      `
	.file	"ft_isdigit.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_isdigit.c"
	.p2align 4
	.globl	ft_isdigit
	.type	ft_isdigit, @function
ft_isdigit:
.LVL0:
.LFB0:
	.file 1 "ft_isdigit.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_isdigit.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
# ft_isdigit.c:18: }
	.loc 1 18 1 is_stmt 0 view .LVU4
	xorl	%eax, %eax	#
# ft_isdigit.c:15: 	if (c >= 48 && c <= 57)
	.loc 1 15 14 view .LVU5
	subl	$48, %edi	#, tmp88
.LVL1:
# ft_isdigit.c:18: }
	.loc 1 18 1 view .LVU6
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	cmpl	$9, %edi	#, tmp88
	setbe	%al	#,
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_isdigit, .-ft_isdigit
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x67
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x1
	.long	.LASF2
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.long	0x63
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x63
	.uleb128 0x3
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x14
	.long	0x63
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 48
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF3:
	.string	"ft_isdigit"
.LASF2:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_isdigit.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_isalnum.o/   0           0     0     644     10653     `
	.file	"ft_isalnum.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_isalnum.c"
	.p2align 4
	.globl	ft_isalnum
	.type	ft_isalnum, @function
ft_isalnum:
.LVL0:
.LFB2:
	.file 1 "ft_isalnum.c"
	.loc 1 30 1 view -0
	.cfi_startproc
	.loc 1 30 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_isalnum.c:30: {
	.loc 1 30 1 view .LVU2
	.loc 1 31 2 is_stmt 1 view .LVU3
.LVL1:
.LBB6:
.LBI6:
	.loc 1 20 12 view .LVU4
.LBB7:
	.loc 1 22 2 view .LVU5
.LBE7:
.LBE6:
# ft_isalnum.c:32: 		return (1);
	.loc 1 32 10 is_stmt 0 view .LVU6
	movl	$1, %edx	#, <retval>
.LBB9:
.LBB8:
# ft_isalnum.c:22: 	if (c >= 65 && c <= 90)
	.loc 1 22 5 view .LVU7
	movl	%edi, %eax	# c, tmp90
	andl	$-33, %eax	#, tmp90
	subl	$65, %eax	#, tmp91
	cmpl	$25, %eax	#, tmp91
	jbe	.L1	#,
	.loc 1 24 2 is_stmt 1 view .LVU8
.LVL2:
	.loc 1 24 2 is_stmt 0 view .LVU9
.LBE8:
.LBE9:
.LBB10:
.LBI10:
	.loc 1 13 12 is_stmt 1 view .LVU10
.LBB11:
	.loc 1 15 2 view .LVU11
# ft_isalnum.c:15: 	if (c >= 48 && c <= 57)
	.loc 1 15 14 is_stmt 0 view .LVU12
	subl	$48, %edi	#, tmp92
.LVL3:
# ft_isalnum.c:15: 	if (c >= 48 && c <= 57)
	.loc 1 15 5 view .LVU13
	xorl	%edx, %edx	# <retval>
	cmpl	$9, %edi	#, tmp92
	setbe	%dl	#, <retval>
.LVL4:
.L1:
	.loc 1 15 5 view .LVU14
.LBE11:
.LBE10:
# ft_isalnum.c:34: }
	.loc 1 34 1 view .LVU15
	movl	%edx, %eax	# <retval>,
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2:
	.size	ft_isalnum, .-ft_isalnum
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xed
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x3
	.long	.LASF2
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x4
	.long	.LASF3
	.byte	0x1
	.byte	0x1d
	.byte	0x5
	.long	0xb9
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.long	0xb9
	.uleb128 0x5
	.string	"c"
	.byte	0x1
	.byte	0x1d
	.byte	0x14
	.long	0xb9
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x6
	.long	0xc0
	.quad	.LBI6
	.byte	.LVU4
	.long	.LLRL1
	.byte	0x1
	.byte	0x1f
	.byte	0x6
	.long	0x89
	.uleb128 0x1
	.long	0xd1
	.long	.LLST2
	.long	.LVUS2
	.byte	0
	.uleb128 0x7
	.long	0xda
	.quad	.LBI10
	.byte	.LVU10
	.quad	.LBB10
	.quad	.LBE10-.LBB10
	.byte	0x1
	.byte	0x1f
	.byte	0x17
	.uleb128 0x1
	.long	0xe7
	.long	.LLST3
	.long	.LVUS3
	.byte	0
	.byte	0
	.uleb128 0x8
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x9
	.long	.LASF4
	.byte	0x1
	.byte	0x14
	.byte	0xc
	.long	0xb9
	.byte	0x1
	.long	0xda
	.uleb128 0x2
	.string	"c"
	.byte	0x14
	.long	0xb9
	.byte	0
	.uleb128 0xa
	.long	.LASF5
	.byte	0x1
	.byte	0xd
	.byte	0xc
	.long	0xb9
	.byte	0x1
	.uleb128 0x2
	.string	"c"
	.byte	0xd
	.long	0xb9
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 27
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 48
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LFE2-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU4
	.uleb128 .LVU9
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS3:
	.uleb128 .LVU9
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU14
.LLST3:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 48
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL1:
	.byte	0x4
	.uleb128 .LBB6-.Ltext0
	.uleb128 .LBE6-.Ltext0
	.byte	0x4
	.uleb128 .LBB9-.Ltext0
	.uleb128 .LBE9-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF3:
	.string	"ft_isalnum"
.LASF5:
	.string	"ft_isdigit"
.LASF4:
	.string	"ft_isalpha"
.LASF2:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_isalnum.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_isascii.o/   0           0     0     644     6230      `
	.file	"ft_isascii.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_isascii.c"
	.p2align 4
	.globl	ft_isascii
	.type	ft_isascii, @function
ft_isascii:
.LVL0:
.LFB0:
	.file 1 "ft_isascii.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_isascii.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
# ft_isascii.c:18: }
	.loc 1 18 1 is_stmt 0 view .LVU4
	xorl	%eax, %eax	#
	cmpl	$127, %edi	#, tmp89
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	setbe	%al	#,
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_isascii, .-ft_isascii
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x61
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x1
	.long	.LASF2
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.long	0x5d
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x5d
	.uleb128 0x3
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x14
	.long	0x5d
	.uleb128 0x1
	.byte	0x55
	.byte	0
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF3:
	.string	"ft_isascii"
.LASF2:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_isascii.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_isprint.o/   0           0     0     644     6841      `
	.file	"ft_isprint.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_isprint.c"
	.p2align 4
	.globl	ft_isprint
	.type	ft_isprint, @function
ft_isprint:
.LVL0:
.LFB0:
	.file 1 "ft_isprint.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_isprint.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
# ft_isprint.c:18: }
	.loc 1 18 1 is_stmt 0 view .LVU4
	xorl	%eax, %eax	#
# ft_isprint.c:15: 	if (c >= 32 && c <= 126)
	.loc 1 15 14 view .LVU5
	subl	$32, %edi	#, tmp88
.LVL1:
# ft_isprint.c:18: }
	.loc 1 18 1 view .LVU6
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	cmpl	$94, %edi	#, tmp88
	setbe	%al	#,
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_isprint, .-ft_isprint
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x67
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x1
	.long	.LASF2
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.long	0x63
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x63
	.uleb128 0x3
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x14
	.long	0x63
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 32
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF3:
	.string	"ft_isprint"
.LASF2:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_isprint.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strlen.o/    0           0     0     644     16405     `
	.file	"ft_strlen.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strlen.c"
	.p2align 4
	.globl	ft_strlen
	.type	ft_strlen, @function
ft_strlen:
.LVL0:
.LFB51:
	.file 1 "ft_strlen.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strlen.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
# ft_strlen.c:19: 	if (!s)
	.loc 1 19 5 is_stmt 0 view .LVU5
	testq	%rdi, %rdi	# s
	je	.L4	#,
.LVL1:
	.loc 1 22 9 is_stmt 1 view .LVU6
	cmpb	$0, (%rdi)	#, *s_5(D)
	je	.L4	#,
# ft_strlen.c:22: 	while (s[i])
	.loc 1 22 10 is_stmt 0 view .LVU7
	incq	%rdi	# tmp88
.LVL2:
	.loc 1 22 10 view .LVU8
	call	strlen@PLT	#
.LVL3:
# ft_strlen.c:25: }
	.loc 1 25 1 view .LVU9
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	incq	%rax	# <retval>
.LVL4:
	.loc 1 25 1 view .LVU10
	ret	
.LVL5:
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
# ft_strlen.c:20: 		return (0);
	.loc 1 20 10 view .LVU11
	xorl	%eax, %eax	# <retval>
# ft_strlen.c:25: }
	.loc 1 25 1 view .LVU12
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_strlen, .-ft_strlen
	.p2align 4
	.globl	ft_strnlen
	.type	ft_strnlen, @function
ft_strnlen:
.LVL6:
.LFB52:
	.loc 1 28 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 28 1 is_stmt 0 view .LVU14
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strlen.c:28: {
	.loc 1 28 1 view .LVU15
	.loc 1 29 2 is_stmt 1 view .LVU16
	.loc 1 31 2 view .LVU17
# ft_strlen.c:32: 		return (0);
	.loc 1 32 10 is_stmt 0 view .LVU18
	xorl	%eax, %eax	# <retval>
# ft_strlen.c:31: 	if (!s)
	.loc 1 31 5 view .LVU19
	testq	%rdi, %rdi	# s
	je	.L6	#,
.LVL7:
	.loc 1 34 14 is_stmt 1 view .LVU20
# ft_strlen.c:34: 	while (s[i] && i < max)
	.loc 1 34 14 is_stmt 0 discriminator 1 view .LVU21
	cmpb	$0, (%rdi)	#, *s_5(D)
	je	.L6	#,
	testq	%rsi, %rsi	# max
	jne	.L8	#,
	jmp	.L6	#
.LVL8:
	.p2align 4,,10
	.p2align 3
.L22:
	.loc 1 34 14 discriminator 1 view .LVU22
	cmpq	%rsi, %rax	# max, <retval>
	jnb	.L6	#,
.LVL9:
.L8:
	.loc 1 35 3 is_stmt 1 view .LVU23
# ft_strlen.c:35: 		i++;
	.loc 1 35 4 is_stmt 0 view .LVU24
	incq	%rax	# <retval>
.LVL10:
	.loc 1 34 14 is_stmt 1 view .LVU25
# ft_strlen.c:34: 	while (s[i] && i < max)
	.loc 1 34 14 is_stmt 0 discriminator 1 view .LVU26
	cmpb	$0, (%rdi,%rax)	#, MEM[(const char *)s_5(D) + i_8 * 1]
	jne	.L22	#,
.LVL11:
.L6:
# ft_strlen.c:37: }
	.loc 1 37 1 view .LVU27
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE52:
	.size	ft_strnlen, .-ft_strnlen
	.p2align 4
	.globl	ft_strlen_char
	.type	ft_strlen_char, @function
ft_strlen_char:
.LVL12:
.LFB53:
	.loc 1 42 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 42 1 is_stmt 0 view .LVU29
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strlen.c:42: {
	.loc 1 42 1 view .LVU30
	.loc 1 43 2 is_stmt 1 view .LVU31
	.loc 1 45 2 view .LVU32
# ft_strlen.c:42: {
	.loc 1 42 1 is_stmt 0 view .LVU33
	movl	%esi, %ecx	# additional_terminator, additional_terminator
# ft_strlen.c:45: 	if (!s)
	.loc 1 45 5 view .LVU34
	testq	%rdi, %rdi	# s
	je	.L28	#,
.LVL13:
	.loc 1 48 14 is_stmt 1 view .LVU35
# ft_strlen.c:48: 	while (s[i] && s[i] != additional_terminator)
	.loc 1 48 10 is_stmt 0 view .LVU36
	movzbl	(%rdi), %eax	# *s_5(D), _14
# ft_strlen.c:48: 	while (s[i] && s[i] != additional_terminator)
	.loc 1 48 14 discriminator 1 view .LVU37
	cmpb	%sil, %al	# additional_terminator, _14
	je	.L28	#,
	testb	%al, %al	# _14
	je	.L28	#,
# ft_strlen.c:47: 	i = 0;
	.loc 1 47 4 view .LVU38
	xorl	%eax, %eax	# <retval>
	jmp	.L25	#
.LVL14:
	.p2align 4,,10
	.p2align 3
.L39:
# ft_strlen.c:48: 	while (s[i] && s[i] != additional_terminator)
	.loc 1 48 14 discriminator 1 view .LVU39
	testb	%dl, %dl	# _2
	je	.L23	#,
.LVL15:
.L25:
	.loc 1 49 3 is_stmt 1 view .LVU40
# ft_strlen.c:49: 		i++;
	.loc 1 49 4 is_stmt 0 view .LVU41
	incq	%rax	# <retval>
.LVL16:
	.loc 1 48 14 is_stmt 1 view .LVU42
# ft_strlen.c:48: 	while (s[i] && s[i] != additional_terminator)
	.loc 1 48 10 is_stmt 0 view .LVU43
	movzbl	(%rdi,%rax), %edx	# MEM[(const char *)s_5(D) + i_8 * 1], _2
# ft_strlen.c:48: 	while (s[i] && s[i] != additional_terminator)
	.loc 1 48 14 discriminator 1 view .LVU44
	cmpb	%cl, %dl	# additional_terminator, _2
	jne	.L39	#,
.L23:
# ft_strlen.c:51: }
	.loc 1 51 1 view .LVU45
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL17:
	.p2align 4,,10
	.p2align 3
.L28:
	.cfi_restore_state
# ft_strlen.c:46: 		return (0);
	.loc 1 46 10 view .LVU46
	xorl	%eax, %eax	# <retval>
# ft_strlen.c:51: }
	.loc 1 51 1 view .LVU47
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE53:
	.size	ft_strlen_char, .-ft_strlen_char
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "<built-in>"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x194
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x6
	.long	.LASF18
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x7
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x8
	.long	0x80
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x9
	.byte	0x8
	.long	0x87
	.uleb128 0x2
	.long	.LASF13
	.byte	0x29
	.long	0x35
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0xe9
	.uleb128 0x3
	.string	"s"
	.byte	0x29
	.byte	0x23
	.long	0x93
	.uleb128 0x1
	.byte	0x55
	.uleb128 0xa
	.long	.LASF16
	.byte	0x1
	.byte	0x29
	.byte	0x2b
	.long	0x80
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x4
	.string	"i"
	.byte	0x2b
	.long	0x35
	.long	.LLST4
	.long	.LVUS4
	.byte	0
	.uleb128 0x2
	.long	.LASF14
	.byte	0x1b
	.long	0x35
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x132
	.uleb128 0x3
	.string	"s"
	.byte	0x1b
	.byte	0x1f
	.long	0x93
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.string	"max"
	.byte	0x1b
	.byte	0x29
	.long	0x35
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x4
	.string	"i"
	.byte	0x1d
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.byte	0
	.uleb128 0x2
	.long	.LASF15
	.byte	0xf
	.long	0x35
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x18c
	.uleb128 0xb
	.string	"s"
	.byte	0x1
	.byte	0xf
	.byte	0x1e
	.long	0x93
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.string	"i"
	.byte	0x11
	.long	0x35
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xc
	.quad	.LVL3
	.long	0x18c
	.uleb128 0xd
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x5
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x23
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0xe
	.long	.LASF19
	.long	.LASF20
	.byte	0x3
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 9
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS3:
	.uleb128 0
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU35
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU46
.LLST4:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS2:
	.uleb128 .LVU20
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU27
.LLST2:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 .LVU6
	.uleb128 .LVU10
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF19:
	.string	"strlen"
.LASF20:
	.string	"__builtin_strlen"
.LASF18:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF13:
	.string	"ft_strlen_char"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF16:
	.string	"additional_terminator"
.LASF14:
	.string	"ft_strnlen"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF8:
	.string	"unsigned int"
.LASF15:
	.string	"ft_strlen"
.LASF9:
	.string	"signed char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strlen.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_memset.o/    0           0     0     644     11865     `
	.file	"ft_memset.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_memset.c"
	.p2align 4
	.globl	ft_memset
	.type	ft_memset, @function
ft_memset:
.LVL0:
.LFB51:
	.file 1 "ft_memset.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_memset.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
.LVL1:
	.loc 1 21 2 view .LVU6
	.loc 1 22 2 view .LVU7
	.loc 1 22 9 view .LVU8
	testq	%rdx, %rdx	# len
	je	.L2	#,
# ft_memset.c:23: 		bytes[len-- - 1] = val;
	.loc 1 23 20 is_stmt 0 view .LVU9
	movzbl	%sil, %esi	# c,
.LVL2:
	.loc 1 23 20 view .LVU10
	call	memset@PLT	#
.LVL3:
	.loc 1 23 20 view .LVU11
	movq	%rax, %rdi	#, b
.LVL4:
.L2:
	.loc 1 24 2 is_stmt 1 view .LVU12
# ft_memset.c:25: }
	.loc 1 25 1 is_stmt 0 view .LVU13
	movq	%rdi, %rax	# b,
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_memset, .-ft_memset
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "<built-in>"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x141
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF14
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x5
	.long	.LASF15
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x7
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x8
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x80
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x133
	.uleb128 0x2
	.string	"b"
	.byte	0x17
	.long	0x80
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x2
	.string	"c"
	.byte	0x1e
	.long	0x48
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x2
	.string	"len"
	.byte	0x28
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x9
	.long	.LASF13
	.byte	0x1
	.byte	0x11
	.byte	0x11
	.long	0x133
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xa
	.string	"val"
	.byte	0x1
	.byte	0x12
	.byte	0x10
	.long	0x5d
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xb
	.quad	.LVL3
	.long	0x139
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x6
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.byte	0
	.uleb128 0xc
	.byte	0x8
	.long	0x5d
	.uleb128 0xd
	.long	.LASF17
	.long	.LASF18
	.byte	0x3
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU12
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 .LVU6
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU7
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF8:
	.string	"unsigned int"
.LASF18:
	.string	"__builtin_memset"
.LASF15:
	.string	"size_t"
.LASF13:
	.string	"bytes"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF14:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF16:
	.string	"ft_memset"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF17:
	.string	"memset"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_memset.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_bzero.o/     0           0     0     644     11297     `
	.file	"ft_bzero.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_bzero.c"
	.p2align 4
	.globl	ft_bzero
	.type	ft_bzero, @function
ft_bzero:
.LVL0:
.LFB51:
	.file 1 "ft_bzero.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_bzero.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
.LVL1:
	.loc 1 20 2 view .LVU5
	.loc 1 20 9 view .LVU6
# ft_bzero.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rsi, %rdx	# tmp89, n
# ft_bzero.c:20: 	while (n)
	.loc 1 20 9 view .LVU8
	testq	%rsi, %rsi	# n
	je	.L3	#,
# ft_bzero.c:22: 		*(str++) = 0;
	.loc 1 22 12 view .LVU9
	xorl	%esi, %esi	#
.LVL2:
# ft_bzero.c:25: }
	.loc 1 25 1 view .LVU10
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_bzero.c:22: 		*(str++) = 0;
	.loc 1 22 12 view .LVU11
	jmp	memset@PLT	#
.LVL3:
	.p2align 4,,10
	.p2align 3
.L3:
	.cfi_restore_state
# ft_bzero.c:25: }
	.loc 1 25 1 view .LVU12
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_bzero, .-ft_bzero
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "<built-in>"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x112
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF13
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x5
	.long	.LASF14
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x7
	.byte	0x8
	.uleb128 0x8
	.byte	0x8
	.long	0x88
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x9
	.long	.LASF15
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x10a
	.uleb128 0x3
	.string	"s"
	.byte	0x15
	.long	0x80
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x3
	.string	"n"
	.byte	0x1f
	.long	0x35
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xa
	.string	"str"
	.byte	0x1
	.byte	0x11
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xb
	.quad	.LVL3
	.long	0x10a
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	.LASF16
	.long	.LASF17
	.byte	0x3
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x82
	.uleb128 0x19
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS2:
	.uleb128 .LVU5
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF17:
	.string	"__builtin_memset"
.LASF14:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF15:
	.string	"ft_bzero"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF16:
	.string	"memset"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_bzero.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_memcpy.o/    0           0     0     644     40215     `
	.file	"ft_memcpy.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_memcpy.c"
	.p2align 4
	.globl	ft_memcpy
	.type	ft_memcpy, @function
ft_memcpy:
.LVL0:
.LFB51:
	.file 1 "ft_memcpy.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	andq	$-32, %rsp	#,
1:	call	*mcount@GOTPCREL(%rip)
# ft_memcpy.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
# ft_memcpy.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movq	%rdi, %rcx	# tmp127, dst
# ft_memcpy.c:20: 	if (!dst)
	.loc 1 20 5 view .LVU7
	testq	%rdi, %rdi	# dst
	je	.L2	#,
	.loc 1 22 2 is_stmt 1 view .LVU8
# ft_memcpy.c:22: 	if (!src)
	.loc 1 22 5 is_stmt 0 view .LVU9
	testq	%rsi, %rsi	# src
	je	.L2	#,
.LVL1:
	.loc 1 28 9 is_stmt 1 view .LVU10
# ft_memcpy.c:28: 	while (n--)
	.loc 1 28 10 is_stmt 0 view .LVU11
	leaq	-1(%rdx), %rdi	#, tmp.24
.LVL2:
# ft_memcpy.c:28: 	while (n--)
	.loc 1 28 9 view .LVU12
	testq	%rdx, %rdx	# n
	je	.L2	#,
	cmpq	$14, %rdi	#, tmp.24
	jbe	.L14	#,
	leaq	1(%rsi), %rax	#, tmp119
	movq	%rcx, %r8	# dst, tmp120
	subq	%rax, %r8	# tmp119, tmp120
	xorl	%eax, %eax	# ivtmp.34
	cmpq	$30, %r8	#, tmp120
	ja	.L73	#,
.LVL3:
	.p2align 4,,10
	.p2align 3
.L12:
	.loc 1 29 3 is_stmt 1 view .LVU13
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU14
	movzbl	(%rsi,%rax), %edi	# MEM[(const char *)src_9(D) + ivtmp.34_18 * 1], _32
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU15
	movb	%dil, (%rcx,%rax)	# _32, MEM[(char *)dst_8(D) + ivtmp.34_18 * 1]
	.loc 1 28 9 is_stmt 1 view .LVU16
.LVL4:
	.loc 1 28 9 is_stmt 0 view .LVU17
	incq	%rax	# ivtmp.34
.LVL5:
	.loc 1 28 9 view .LVU18
	cmpq	%rax, %rdx	# ivtmp.34, n
	jne	.L12	#,
.LVL6:
.L2:
# ft_memcpy.c:31: }
	.loc 1 31 1 view .LVU19
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	movq	%rcx, %rax	# dst,
	ret	
.LVL7:
	.p2align 4,,10
	.p2align 3
.L73:
	.cfi_restore_state
	.loc 1 31 1 view .LVU20
	cmpq	$30, %rdi	#, tmp.24
	jbe	.L16	#,
	movq	%rdx, %r8	# n, _65
	andq	$-32, %r8	#, _65
.LVL8:
	.p2align 4,,10
	.p2align 3
.L7:
	.loc 1 29 3 is_stmt 1 view .LVU21
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 is_stmt 0 view .LVU22
	vmovdqu	(%rsi,%rax), %ymm0	# MEM <const vector(32) char> [(const char *)src_9(D) + ivtmp.47_97 * 1], tmp133
	vmovdqu	%ymm0, (%rcx,%rax)	# tmp133, MEM <vector(32) char> [(char *)dst_8(D) + ivtmp.47_97 * 1]
	.loc 1 28 9 is_stmt 1 view .LVU23
	addq	$32, %rax	#, ivtmp.47
	cmpq	%rax, %r8	# ivtmp.47, _65
	jne	.L7	#,
	leaq	(%rcx,%r8), %rax	#, tmp.22
	leaq	(%rsi,%r8), %r9	#, tmp.23
	subq	%r8, %rdi	# _65, tmp.24
	cmpq	%r8, %rdx	# _65, n
	je	.L70	#,
	subq	%r8, %rdx	# _65, n
	leaq	-1(%rdx), %r10	#, tmp123
	cmpq	$14, %r10	#, tmp123
	jbe	.L74	#,
	vzeroupper
.LVL9:
.L6:
	.loc 1 29 3 view .LVU24
	.loc 1 28 9 view .LVU25
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU26
	vmovdqu	(%rsi,%r8), %xmm1	# MEM <const vector(16) char> [(const char *)vectp_src.26_91], tmp134
	movq	%rdx, %rsi	# n, niters_vector_mult_vf.21
.LVL10:
	.loc 1 29 10 view .LVU27
	andq	$-16, %rsi	#, niters_vector_mult_vf.21
	addq	%rsi, %rax	# niters_vector_mult_vf.21, tmp.22
	addq	%rsi, %r9	# niters_vector_mult_vf.21, tmp.23
	subq	%rsi, %rdi	# niters_vector_mult_vf.21, tmp.24
	andl	$15, %edx	#, n
	vmovdqu	%xmm1, (%rcx,%r8)	# tmp134, MEM <vector(16) char> [(char *)vectp_dst.29_95]
	je	.L2	#,
.LVL11:
.L10:
	.loc 1 29 3 is_stmt 1 view .LVU28
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU29
	movzbl	(%r9), %edx	# *s_82, _13
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU30
	movb	%dl, (%rax)	# _13, *d_81
	.loc 1 28 9 is_stmt 1 view .LVU31
.LVL12:
	.loc 1 28 9 is_stmt 0 view .LVU32
	testq	%rdi, %rdi	# tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU33
.LVL13:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU34
	movzbl	1(%r9), %edx	# MEM[(const char *)s_82 + 1B], _35
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU35
	movb	%dl, 1(%rax)	# _35, MEM[(char *)d_81 + 1B]
	.loc 1 28 9 is_stmt 1 view .LVU36
.LVL14:
	.loc 1 28 9 is_stmt 0 view .LVU37
	cmpq	$1, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU38
.LVL15:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU39
	movzbl	2(%r9), %edx	# MEM[(const char *)s_82 + 2B], _107
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU40
	movb	%dl, 2(%rax)	# _107, MEM[(char *)d_81 + 2B]
	.loc 1 28 9 is_stmt 1 view .LVU41
.LVL16:
	.loc 1 28 9 is_stmt 0 view .LVU42
	cmpq	$2, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU43
.LVL17:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU44
	movzbl	3(%r9), %edx	# MEM[(const char *)s_82 + 3B], _116
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU45
	movb	%dl, 3(%rax)	# _116, MEM[(char *)d_81 + 3B]
	.loc 1 28 9 is_stmt 1 view .LVU46
.LVL18:
	.loc 1 28 9 is_stmt 0 view .LVU47
	cmpq	$3, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU48
.LVL19:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU49
	movzbl	4(%r9), %edx	# MEM[(const char *)s_82 + 4B], _125
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU50
	movb	%dl, 4(%rax)	# _125, MEM[(char *)d_81 + 4B]
	.loc 1 28 9 is_stmt 1 view .LVU51
.LVL20:
	.loc 1 28 9 is_stmt 0 view .LVU52
	cmpq	$4, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU53
.LVL21:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU54
	movzbl	5(%r9), %edx	# MEM[(const char *)s_82 + 5B], _134
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU55
	movb	%dl, 5(%rax)	# _134, MEM[(char *)d_81 + 5B]
	.loc 1 28 9 is_stmt 1 view .LVU56
.LVL22:
	.loc 1 28 9 is_stmt 0 view .LVU57
	cmpq	$5, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU58
.LVL23:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU59
	movzbl	6(%r9), %edx	# MEM[(const char *)s_82 + 6B], _143
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU60
	movb	%dl, 6(%rax)	# _143, MEM[(char *)d_81 + 6B]
	.loc 1 28 9 is_stmt 1 view .LVU61
.LVL24:
	.loc 1 28 9 is_stmt 0 view .LVU62
	cmpq	$6, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU63
.LVL25:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU64
	movzbl	7(%r9), %edx	# MEM[(const char *)s_82 + 7B], _152
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU65
	movb	%dl, 7(%rax)	# _152, MEM[(char *)d_81 + 7B]
	.loc 1 28 9 is_stmt 1 view .LVU66
.LVL26:
	.loc 1 28 9 is_stmt 0 view .LVU67
	cmpq	$7, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU68
.LVL27:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU69
	movzbl	8(%r9), %edx	# MEM[(const char *)s_82 + 8B], _161
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU70
	movb	%dl, 8(%rax)	# _161, MEM[(char *)d_81 + 8B]
	.loc 1 28 9 is_stmt 1 view .LVU71
.LVL28:
	.loc 1 28 9 is_stmt 0 view .LVU72
	cmpq	$8, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU73
.LVL29:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU74
	movzbl	9(%r9), %edx	# MEM[(const char *)s_82 + 9B], _170
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU75
	movb	%dl, 9(%rax)	# _170, MEM[(char *)d_81 + 9B]
	.loc 1 28 9 is_stmt 1 view .LVU76
.LVL30:
	.loc 1 28 9 is_stmt 0 view .LVU77
	cmpq	$9, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU78
.LVL31:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU79
	movzbl	10(%r9), %edx	# MEM[(const char *)s_82 + 10B], _179
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU80
	movb	%dl, 10(%rax)	# _179, MEM[(char *)d_81 + 10B]
	.loc 1 28 9 is_stmt 1 view .LVU81
.LVL32:
	.loc 1 28 9 is_stmt 0 view .LVU82
	cmpq	$10, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU83
.LVL33:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU84
	movzbl	11(%r9), %edx	# MEM[(const char *)s_82 + 11B], _188
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU85
	movb	%dl, 11(%rax)	# _188, MEM[(char *)d_81 + 11B]
	.loc 1 28 9 is_stmt 1 view .LVU86
.LVL34:
	.loc 1 28 9 is_stmt 0 view .LVU87
	cmpq	$11, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU88
.LVL35:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU89
	movzbl	12(%r9), %edx	# MEM[(const char *)s_82 + 12B], _197
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU90
	movb	%dl, 12(%rax)	# _197, MEM[(char *)d_81 + 12B]
	.loc 1 28 9 is_stmt 1 view .LVU91
.LVL36:
	.loc 1 28 9 is_stmt 0 view .LVU92
	cmpq	$12, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU93
.LVL37:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU94
	movzbl	13(%r9), %edx	# MEM[(const char *)s_82 + 13B], _206
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU95
	movb	%dl, 13(%rax)	# _206, MEM[(char *)d_81 + 13B]
	.loc 1 28 9 is_stmt 1 view .LVU96
.LVL38:
	.loc 1 28 9 is_stmt 0 view .LVU97
	cmpq	$13, %rdi	#, tmp.24
	je	.L2	#,
	.loc 1 29 3 is_stmt 1 view .LVU98
.LVL39:
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU99
	movzbl	14(%r9), %edx	# MEM[(const char *)s_82 + 14B], _75
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU100
	movb	%dl, 14(%rax)	# _75, MEM[(char *)d_81 + 14B]
	.loc 1 28 9 is_stmt 1 view .LVU101
.LVL40:
	.loc 1 28 9 is_stmt 0 view .LVU102
	jmp	.L2	#
.LVL41:
	.p2align 4,,10
	.p2align 3
.L14:
	.loc 1 28 9 view .LVU103
	xorl	%eax, %eax	# ivtmp.34
.LVL42:
	.loc 1 29 3 is_stmt 1 view .LVU104
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 10 is_stmt 0 view .LVU105
	movzbl	(%rsi,%rax), %edi	# MEM[(const char *)src_9(D) + ivtmp.34_18 * 1], _32
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU106
	movb	%dil, (%rcx,%rax)	# _32, MEM[(char *)dst_8(D) + ivtmp.34_18 * 1]
	.loc 1 28 9 is_stmt 1 view .LVU107
.LVL43:
	.loc 1 28 9 is_stmt 0 view .LVU108
	incq	%rax	# ivtmp.34
.LVL44:
	.loc 1 28 9 view .LVU109
	cmpq	%rax, %rdx	# ivtmp.34, n
	jne	.L12	#,
	jmp	.L2	#
.LVL45:
.L16:
	.loc 1 28 9 view .LVU110
	movq	%rsi, %r9	# src, tmp.23
	movq	%rcx, %rax	# dst, tmp.22
	xorl	%r8d, %r8d	# _65
	jmp	.L6	#
.LVL46:
.L74:
	.loc 1 28 9 view .LVU111
	vzeroupper
.LVL47:
	jmp	.L10	#
.L70:
	vzeroupper
.LVL48:
	jmp	.L2	#
	.cfi_endproc
.LFE51:
	.size	ft_memcpy, .-ft_memcpy
	.p2align 4
	.globl	ft_memdup
	.type	ft_memdup, @function
ft_memdup:
.LVL49:
.LFB52:
	.loc 1 34 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 34 1 is_stmt 0 view .LVU113
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# ft_memcpy.c:34: {
	.loc 1 34 1 view .LVU114
	.loc 1 35 2 is_stmt 1 view .LVU115
	.loc 1 37 2 view .LVU116
# ft_memcpy.c:34: {
	.loc 1 34 1 is_stmt 0 view .LVU117
	movq	%rdi, %r12	# tmp99, src
# ft_memcpy.c:37: 	new = malloc(size);
	.loc 1 37 8 view .LVU118
	movq	%rsi, %rdi	# size,
.LVL50:
# ft_memcpy.c:34: {
	.loc 1 34 1 view .LVU119
	movq	%rsi, %rbx	# tmp100, size
# ft_memcpy.c:37: 	new = malloc(size);
	.loc 1 37 8 view .LVU120
	call	malloc@PLT	#
.LVL51:
	.loc 1 37 8 view .LVU121
	movq	%rax, %rcx	# tmp101, <retval>
.LVL52:
	.loc 1 38 2 is_stmt 1 view .LVU122
.LBB4:
.LBI4:
	.loc 1 15 7 view .LVU123
.LBB5:
	.loc 1 17 2 view .LVU124
	.loc 1 18 2 view .LVU125
	.loc 1 20 2 view .LVU126
	.loc 1 22 2 view .LVU127
# ft_memcpy.c:22: 	if (!src)
	.loc 1 22 5 is_stmt 0 view .LVU128
	testq	%r12, %r12	# src
	je	.L75	#,
	testq	%rax, %rax	# <retval>
	je	.L75	#,
.LVL53:
	.loc 1 28 9 is_stmt 1 view .LVU129
	.loc 1 28 9 is_stmt 0 view .LVU130
	testq	%rbx, %rbx	# size
	je	.L75	#,
# ft_memcpy.c:29: 		*d++ = *s++;
	.loc 1 29 8 view .LVU131
	movq	%rbx, %rdx	# size,
	movq	%r12, %rsi	# src,
	movq	%rax, %rdi	# <retval>,
	call	memcpy@PLT	#
.LVL54:
	.loc 1 29 8 view .LVU132
	movq	%rax, %rcx	#, <retval>
.LVL55:
	.loc 1 29 8 view .LVU133
.LBE5:
.LBE4:
	.loc 1 39 2 is_stmt 1 view .LVU134
.L75:
# ft_memcpy.c:40: }
	.loc 1 40 1 is_stmt 0 view .LVU135
	popq	%rbx	#
.LVL56:
	.loc 1 40 1 view .LVU136
	movq	%rcx, %rax	# <retval>,
	popq	%r12	#
.LVL57:
	.loc 1 40 1 view .LVU137
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE52:
	.size	ft_memdup, .-ft_memdup
.Letext0:
	.file 2 "/usr/include/stdlib.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 4 "<built-in>"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x280
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xb
	.long	.LASF16
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xc
	.long	.LASF17
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xe
	.byte	0x8
	.uleb128 0x4
	.long	0x8c
	.uleb128 0x8
	.long	0x82
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xf
	.long	0x8c
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x4
	.long	0xa4
	.uleb128 0x10
	.uleb128 0x4
	.long	0x93
	.uleb128 0x8
	.long	0xa5
	.uleb128 0x11
	.long	.LASF14
	.byte	0x2
	.value	0x2a0
	.byte	0xe
	.long	0x80
	.long	0xc6
	.uleb128 0x12
	.long	0x35
	.byte	0
	.uleb128 0x13
	.long	.LASF18
	.byte	0x1
	.byte	0x21
	.byte	0x7
	.long	0x80
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x1ba
	.uleb128 0x14
	.string	"src"
	.byte	0x1
	.byte	0x21
	.byte	0x1d
	.long	0x9f
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x15
	.long	.LASF13
	.byte	0x1
	.byte	0x21
	.byte	0x29
	.long	0x35
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x16
	.string	"new"
	.byte	0x1
	.byte	0x23
	.byte	0x8
	.long	0x82
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x17
	.long	0x1ba
	.quad	.LBI4
	.byte	.LVU123
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.byte	0x1
	.byte	0x26
	.byte	0x2
	.long	0x1a5
	.uleb128 0x2
	.long	0x1df
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x2
	.long	0x1d5
	.long	.LLST9
	.long	.LVUS9
	.uleb128 0x2
	.long	0x1cb
	.long	.LLST10
	.long	.LVUS10
	.uleb128 0x3
	.long	0x1e7
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0x3
	.long	0x1f0
	.long	.LLST12
	.long	.LVUS12
	.uleb128 0x9
	.quad	.LVL54
	.long	0x278
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.byte	0
	.uleb128 0x9
	.quad	.LVL51
	.long	0xaf
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.byte	0
	.uleb128 0x18
	.long	.LASF15
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x80
	.byte	0x1
	.long	0x1fa
	.uleb128 0x6
	.string	"dst"
	.byte	0x17
	.long	0x80
	.uleb128 0x6
	.string	"src"
	.byte	0x28
	.long	0x9f
	.uleb128 0x6
	.string	"n"
	.byte	0x34
	.long	0x35
	.uleb128 0xa
	.string	"d"
	.byte	0x11
	.byte	0x12
	.long	0x87
	.uleb128 0xa
	.string	"s"
	.byte	0x12
	.byte	0x17
	.long	0xaa
	.byte	0
	.uleb128 0x19
	.long	0x1ba
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x278
	.uleb128 0x2
	.long	0x1cb
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x2
	.long	0x1d5
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x2
	.long	0x1df
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x3
	.long	0x1e7
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x3
	.long	0x1f0
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x7
	.quad	.LVL9
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x7
	.quad	.LVL47
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x7
	.quad	.LVL48
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1a
	.long	.LASF19
	.long	.LASF20
	.byte	0x4
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x83
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x37
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS5:
	.uleb128 0
	.uleb128 .LVU119
	.uleb128 .LVU119
	.uleb128 .LVU137
	.uleb128 .LVU137
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL57-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL57-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 0
	.uleb128 .LVU121
	.uleb128 .LVU121
	.uleb128 .LVU136
	.uleb128 .LVU136
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL51-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL51-1-.Ltext0
	.uleb128 .LVL56-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS7:
	.uleb128 .LVU122
	.uleb128 .LVU132
.LLST7:
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL54-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS8:
	.uleb128 .LVU123
	.uleb128 .LVU130
	.uleb128 .LVU130
	.uleb128 .LVU133
.LLST8:
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 -1
	.byte	0x9f
	.byte	0
.LVUS9:
	.uleb128 .LVU123
	.uleb128 .LVU133
.LLST9:
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS10:
	.uleb128 .LVU123
	.uleb128 .LVU132
.LLST10:
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL54-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS11:
	.uleb128 .LVU129
	.uleb128 .LVU132
.LLST11:
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL54-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS12:
	.uleb128 .LVU129
	.uleb128 .LVU133
.LLST12:
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU21
	.uleb128 .LVU28
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU62
	.uleb128 .LVU62
	.uleb128 .LVU67
	.uleb128 .LVU67
	.uleb128 .LVU72
	.uleb128 .LVU72
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU82
	.uleb128 .LVU82
	.uleb128 .LVU87
	.uleb128 .LVU87
	.uleb128 .LVU92
	.uleb128 .LVU92
	.uleb128 .LVU97
	.uleb128 .LVU97
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 .LVU104
	.uleb128 .LVU104
	.uleb128 .LVU108
	.uleb128 .LVU108
	.uleb128 .LVU109
	.uleb128 .LVU109
	.uleb128 .LVU110
	.uleb128 .LVU110
	.uleb128 .LVU111
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x8
	.byte	0x71
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x32
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -15
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x8
	.byte	0x71
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x32
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS3:
	.uleb128 .LVU10
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU21
	.uleb128 .LVU28
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 .LVU59
	.uleb128 .LVU59
	.uleb128 .LVU64
	.uleb128 .LVU64
	.uleb128 .LVU69
	.uleb128 .LVU69
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU79
	.uleb128 .LVU79
	.uleb128 .LVU84
	.uleb128 .LVU84
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 .LVU94
	.uleb128 .LVU94
	.uleb128 .LVU99
	.uleb128 .LVU99
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 .LVU104
	.uleb128 .LVU104
	.uleb128 .LVU105
	.uleb128 .LVU105
	.uleb128 .LVU109
	.uleb128 .LVU109
	.uleb128 .LVU110
	.uleb128 .LVU110
	.uleb128 .LVU111
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x8
	.byte	0x72
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 15
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x8
	.byte	0x72
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU10
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU21
	.uleb128 .LVU28
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 .LVU59
	.uleb128 .LVU59
	.uleb128 .LVU64
	.uleb128 .LVU64
	.uleb128 .LVU69
	.uleb128 .LVU69
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU79
	.uleb128 .LVU79
	.uleb128 .LVU84
	.uleb128 .LVU84
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 .LVU94
	.uleb128 .LVU94
	.uleb128 .LVU99
	.uleb128 .LVU99
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 .LVU104
	.uleb128 .LVU104
	.uleb128 .LVU105
	.uleb128 .LVU105
	.uleb128 .LVU109
	.uleb128 .LVU109
	.uleb128 .LVU110
	.uleb128 .LVU110
	.uleb128 .LVU111
.LLST4:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x6
	.byte	0x74
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x8
	.byte	0x70
	.sleb128 0
	.byte	0x74
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x74
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x59
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 15
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x6
	.byte	0x74
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x8
	.byte	0x70
	.sleb128 0
	.byte	0x74
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x3
	.byte	0x74
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF17:
	.string	"size_t"
.LASF9:
	.string	"signed char"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF18:
	.string	"ft_memdup"
.LASF16:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF20:
	.string	"__builtin_memcpy"
.LASF15:
	.string	"ft_memcpy"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF19:
	.string	"memcpy"
.LASF7:
	.string	"short unsigned int"
.LASF13:
	.string	"size"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_memcpy.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_memmove.o/   0           0     0     644     44111     `
	.file	"ft_memmove.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_memmove.c"
	.p2align 4
	.globl	ft_memmove
	.type	ft_memmove, @function
ft_memmove:
.LVL0:
.LFB51:
	.file 1 "ft_memmove.c"
	.loc 1 18 1 view -0
	.cfi_startproc
	.loc 1 18 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	andq	$-32, %rsp	#,
1:	call	*mcount@GOTPCREL(%rip)
# ft_memmove.c:18: {
	.loc 1 18 1 view .LVU2
	.loc 1 19 2 is_stmt 1 view .LVU3
	.loc 1 20 2 view .LVU4
	.loc 1 22 2 view .LVU5
# ft_memmove.c:18: {
	.loc 1 18 1 is_stmt 0 view .LVU6
	movq	%rdi, %rcx	# tmp224, dst
# ft_memmove.c:22: 	if (!dst)
	.loc 1 22 5 view .LVU7
	testq	%rdi, %rdi	# dst
	je	.L2	#,
	.loc 1 24 2 is_stmt 1 view .LVU8
	.loc 1 26 2 view .LVU9
# ft_memmove.c:26: 	if (!len)
	.loc 1 26 5 is_stmt 0 view .LVU10
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 28 2 is_stmt 1 view .LVU11
.LVL1:
	.loc 1 29 2 view .LVU12
	.loc 1 30 2 view .LVU13
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU14
	leaq	-1(%rdx), %rax	#, tmp.45
# ft_memmove.c:30: 	if (d < s)
	.loc 1 30 5 view .LVU15
	cmpq	%rsi, %rdi	# src, dst
	jb	.L133	#,
	cmpq	$14, %rax	#, tmp.45
	jbe	.L22	#,
	leaq	(%rdi,%rax), %rdi	#, tmp208
.LVL2:
	.loc 1 30 5 view .LVU16
	leaq	-2(%rsi,%rdx), %r8	#, tmp210
	subq	%r8, %rdi	# tmp210, tmp211
	addq	$30, %rdi	#, tmp212
	cmpq	$30, %rdi	#, tmp212
	ja	.L134	#,
.LVL3:
	.p2align 4,,10
	.p2align 3
.L22:
	.loc 1 37 3 is_stmt 1 view .LVU17
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU18
	movzbl	(%rsi,%rax), %edx	# MEM[(const char *)src_15(D) + len_121 * 1], _124
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU19
	movb	%dl, (%rcx,%rax)	# _124, MEM[(char *)dst_14(D) + len_121 * 1]
	.loc 1 36 9 is_stmt 1 view .LVU20
.LVL4:
	.loc 1 36 9 is_stmt 0 view .LVU21
	subq	$1, %rax	#, tmp.45
.LVL5:
	.loc 1 36 9 view .LVU22
	jnb	.L22	#,
.LVL6:
.L2:
# ft_memmove.c:39: }
	.loc 1 39 1 view .LVU23
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	movq	%rcx, %rax	# dst,
	ret	
.LVL7:
	.p2align 4,,10
	.p2align 3
.L133:
	.cfi_restore_state
	.loc 1 39 1 view .LVU24
	cmpq	$14, %rax	#, tmp.45
	jbe	.L24	#,
	leaq	1(%rsi), %rdi	#, tmp201
	movq	%rcx, %r8	# dst, tmp202
	subq	%rdi, %r8	# tmp201, tmp202
# ft_memmove.c:30: 	if (d < s)
	.loc 1 30 5 view .LVU25
	xorl	%edi, %edi	# ivtmp.59
	cmpq	$30, %r8	#, tmp202
	ja	.L135	#,
.LVL8:
	.p2align 4,,10
	.p2align 3
.L13:
	.loc 1 33 4 is_stmt 1 view .LVU26
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU27
	movzbl	(%rsi,%rdi), %eax	# MEM[(const char *)src_15(D) + ivtmp.59_118 * 1], _40
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU28
	movb	%al, (%rcx,%rdi)	# _40, MEM[(char *)dst_14(D) + ivtmp.59_118 * 1]
	.loc 1 32 10 is_stmt 1 view .LVU29
.LVL9:
	.loc 1 32 10 is_stmt 0 view .LVU30
	incq	%rdi	# ivtmp.59
.LVL10:
	.loc 1 32 10 view .LVU31
	cmpq	%rdi, %rdx	# ivtmp.59, len
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU32
.LVL11:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU33
	movzbl	(%rsi,%rdi), %eax	# MEM[(const char *)src_15(D) + ivtmp.59_118 * 1], _40
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU34
	movb	%al, (%rcx,%rdi)	# _40, MEM[(char *)dst_14(D) + ivtmp.59_118 * 1]
	.loc 1 32 10 is_stmt 1 view .LVU35
.LVL12:
	.loc 1 32 10 is_stmt 0 view .LVU36
	incq	%rdi	# ivtmp.59
.LVL13:
	.loc 1 32 10 view .LVU37
	cmpq	%rdi, %rdx	# ivtmp.59, len
	jne	.L13	#,
	jmp	.L2	#
.LVL14:
	.p2align 4,,10
	.p2align 3
.L135:
	.loc 1 32 10 view .LVU38
	cmpq	$30, %rax	#, tmp.45
	jbe	.L26	#,
	movq	%rdx, %r8	# len, _9
	andq	$-32, %r8	#, _9
.LVL15:
	.p2align 4,,10
	.p2align 3
.L7:
	.loc 1 33 4 is_stmt 1 view .LVU39
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 is_stmt 0 view .LVU40
	vmovdqu	(%rsi,%rdi), %ymm1	# MEM <const vector(32) char> [(const char *)src_15(D) + ivtmp.72_188 * 1], tmp230
	vmovdqu	%ymm1, (%rcx,%rdi)	# tmp230, MEM <vector(32) char> [(char *)dst_14(D) + ivtmp.72_188 * 1]
	.loc 1 32 10 is_stmt 1 view .LVU41
	addq	$32, %rdi	#, ivtmp.72
	cmpq	%rdi, %r8	# ivtmp.72, _9
	jne	.L7	#,
	leaq	(%rcx,%r8), %rdi	#, tmp.23
	leaq	(%rsi,%r8), %r9	#, tmp.24
	subq	%r8, %rax	# _9, tmp.45
	cmpq	%rdx, %r8	# len, _9
	je	.L129	#,
	subq	%r8, %rdx	# _9, len
	leaq	-1(%rdx), %r10	#, tmp205
	cmpq	$14, %r10	#, tmp205
	jbe	.L136	#,
	vzeroupper
.LVL16:
.L6:
	.loc 1 33 4 view .LVU42
	.loc 1 32 10 view .LVU43
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU44
	vmovdqu	(%rsi,%r8), %xmm3	# MEM <const vector(16) char> [(const char *)vectp_src.27_99], tmp231
	movq	%rdx, %rsi	# len, niters_vector_mult_vf.22
.LVL17:
	.loc 1 33 13 view .LVU45
	andq	$-16, %rsi	#, niters_vector_mult_vf.22
	addq	%rsi, %rdi	# niters_vector_mult_vf.22, tmp.23
	addq	%rsi, %r9	# niters_vector_mult_vf.22, tmp.24
	subq	%rsi, %rax	# niters_vector_mult_vf.22, tmp.45
	andl	$15, %edx	#, len
	vmovdqu	%xmm3, (%rcx,%r8)	# tmp231, MEM <vector(16) char> [(char *)vectp_dst.30_103]
	je	.L2	#,
.LVL18:
.L11:
	.loc 1 33 4 is_stmt 1 view .LVU46
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU47
	movzbl	(%r9), %edx	# *s_90, _36
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU48
	movb	%dl, (%rdi)	# _36, *d_89
	.loc 1 32 10 is_stmt 1 view .LVU49
.LVL19:
	.loc 1 32 10 is_stmt 0 view .LVU50
	testq	%rax, %rax	# tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU51
.LVL20:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU52
	movzbl	1(%r9), %edx	# MEM[(const char *)s_90 + 1B], _131
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU53
	movb	%dl, 1(%rdi)	# _131, MEM[(char *)d_89 + 1B]
	.loc 1 32 10 is_stmt 1 view .LVU54
.LVL21:
	.loc 1 32 10 is_stmt 0 view .LVU55
	cmpq	$1, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU56
.LVL22:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU57
	movzbl	2(%r9), %edx	# MEM[(const char *)s_90 + 2B], _50
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU58
	movb	%dl, 2(%rdi)	# _50, MEM[(char *)d_89 + 2B]
	.loc 1 32 10 is_stmt 1 view .LVU59
.LVL23:
	.loc 1 32 10 is_stmt 0 view .LVU60
	cmpq	$2, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU61
.LVL24:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU62
	movzbl	3(%r9), %edx	# MEM[(const char *)s_90 + 3B], _152
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU63
	movb	%dl, 3(%rdi)	# _152, MEM[(char *)d_89 + 3B]
	.loc 1 32 10 is_stmt 1 view .LVU64
.LVL25:
	.loc 1 32 10 is_stmt 0 view .LVU65
	cmpq	$3, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU66
.LVL26:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU67
	movzbl	4(%r9), %edx	# MEM[(const char *)s_90 + 4B], _196
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU68
	movb	%dl, 4(%rdi)	# _196, MEM[(char *)d_89 + 4B]
	.loc 1 32 10 is_stmt 1 view .LVU69
.LVL27:
	.loc 1 32 10 is_stmt 0 view .LVU70
	cmpq	$4, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU71
.LVL28:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU72
	movzbl	5(%r9), %edx	# MEM[(const char *)s_90 + 5B], _205
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU73
	movb	%dl, 5(%rdi)	# _205, MEM[(char *)d_89 + 5B]
	.loc 1 32 10 is_stmt 1 view .LVU74
.LVL29:
	.loc 1 32 10 is_stmt 0 view .LVU75
	cmpq	$5, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU76
.LVL30:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU77
	movzbl	6(%r9), %edx	# MEM[(const char *)s_90 + 6B], _214
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU78
	movb	%dl, 6(%rdi)	# _214, MEM[(char *)d_89 + 6B]
	.loc 1 32 10 is_stmt 1 view .LVU79
.LVL31:
	.loc 1 32 10 is_stmt 0 view .LVU80
	cmpq	$6, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU81
.LVL32:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU82
	movzbl	7(%r9), %edx	# MEM[(const char *)s_90 + 7B], _223
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU83
	movb	%dl, 7(%rdi)	# _223, MEM[(char *)d_89 + 7B]
	.loc 1 32 10 is_stmt 1 view .LVU84
.LVL33:
	.loc 1 32 10 is_stmt 0 view .LVU85
	cmpq	$7, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU86
.LVL34:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU87
	movzbl	8(%r9), %edx	# MEM[(const char *)s_90 + 8B], _232
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU88
	movb	%dl, 8(%rdi)	# _232, MEM[(char *)d_89 + 8B]
	.loc 1 32 10 is_stmt 1 view .LVU89
.LVL35:
	.loc 1 32 10 is_stmt 0 view .LVU90
	cmpq	$8, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU91
.LVL36:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU92
	movzbl	9(%r9), %edx	# MEM[(const char *)s_90 + 9B], _241
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU93
	movb	%dl, 9(%rdi)	# _241, MEM[(char *)d_89 + 9B]
	.loc 1 32 10 is_stmt 1 view .LVU94
.LVL37:
	.loc 1 32 10 is_stmt 0 view .LVU95
	cmpq	$9, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU96
.LVL38:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU97
	movzbl	10(%r9), %edx	# MEM[(const char *)s_90 + 10B], _250
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU98
	movb	%dl, 10(%rdi)	# _250, MEM[(char *)d_89 + 10B]
	.loc 1 32 10 is_stmt 1 view .LVU99
.LVL39:
	.loc 1 32 10 is_stmt 0 view .LVU100
	cmpq	$10, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU101
.LVL40:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU102
	movzbl	11(%r9), %edx	# MEM[(const char *)s_90 + 11B], _259
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU103
	movb	%dl, 11(%rdi)	# _259, MEM[(char *)d_89 + 11B]
	.loc 1 32 10 is_stmt 1 view .LVU104
.LVL41:
	.loc 1 32 10 is_stmt 0 view .LVU105
	cmpq	$11, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU106
.LVL42:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU107
	movzbl	12(%r9), %edx	# MEM[(const char *)s_90 + 12B], _268
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU108
	movb	%dl, 12(%rdi)	# _268, MEM[(char *)d_89 + 12B]
	.loc 1 32 10 is_stmt 1 view .LVU109
.LVL43:
	.loc 1 32 10 is_stmt 0 view .LVU110
	cmpq	$12, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU111
.LVL44:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU112
	movzbl	13(%r9), %edx	# MEM[(const char *)s_90 + 13B], _277
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU113
	movb	%dl, 13(%rdi)	# _277, MEM[(char *)d_89 + 13B]
	.loc 1 32 10 is_stmt 1 view .LVU114
.LVL45:
	.loc 1 32 10 is_stmt 0 view .LVU115
	cmpq	$13, %rax	#, tmp.45
	je	.L2	#,
	.loc 1 33 4 is_stmt 1 view .LVU116
.LVL46:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 13 is_stmt 0 view .LVU117
	movzbl	14(%r9), %eax	# MEM[(const char *)s_90 + 14B], _83
.LVL47:
# ft_memmove.c:33: 			*(d++) = *(s++);
	.loc 1 33 11 view .LVU118
	movb	%al, 14(%rdi)	# _83, MEM[(char *)d_89 + 14B]
	.loc 1 32 10 is_stmt 1 view .LVU119
	.loc 1 32 10 is_stmt 0 view .LVU120
	jmp	.L2	#
.LVL48:
	.p2align 4,,10
	.p2align 3
.L24:
# ft_memmove.c:30: 	if (d < s)
	.loc 1 30 5 view .LVU121
	xorl	%edi, %edi	# ivtmp.59
	jmp	.L13	#
	.p2align 4,,10
	.p2align 3
.L134:
	cmpq	$30, %rax	#, tmp.45
	jbe	.L16	#,
	movq	%rdx, %r9	# len, tmp215
	leaq	-32(%rdx), %r8	#, _146
	xorl	%edi, %edi	# ivtmp.90
	andq	$-32, %r9	#, tmp215
	leaq	(%rsi,%r8), %r10	#, vectp.36
	addq	%rcx, %r8	# dst, vectp.40
	negq	%r9	# tmp216
.LVL49:
	.p2align 4,,10
	.p2align 3
.L17:
	.loc 1 37 3 is_stmt 1 view .LVU122
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 is_stmt 0 view .LVU123
	vmovdqu	(%r10,%rdi), %ymm0	# MEM <const vector(32) char> [(const char *)vectp.36_145 + ivtmp.90_101 * 1], tmp234
	vmovdqu	%ymm0, (%r8,%rdi)	# tmp234, MEM <vector(32) char> [(char *)vectp.40_151 + ivtmp.90_101 * 1]
	.loc 1 36 9 is_stmt 1 view .LVU124
	subq	$32, %rdi	#, ivtmp.90
	cmpq	%r9, %rdi	# tmp216, ivtmp.90
	jne	.L17	#,
	movq	%rdx, %rdi	# len, niters_vector_mult_vf.33
	andq	$-32, %rdi	#, niters_vector_mult_vf.33
	subq	%rdi, %rax	# niters_vector_mult_vf.33, tmp.45
	testb	$31, %dl	#, len
	je	.L129	#,
	subq	%rdi, %rdx	# niters_vector_mult_vf.33, len
	leaq	-1(%rdx), %rdi	#, tmp219
	cmpq	$14, %rdi	#, tmp219
	jbe	.L130	#,
	vzeroupper
.LVL50:
.L16:
	.loc 1 37 3 view .LVU125
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 is_stmt 0 view .LVU126
	vmovdqu	-16(%rsi,%rdx), %xmm2	# MEM <const vector(16) char> [(const char *)vectp.47_177], tmp236
	movq	%rdx, %rdi	# len, niters_vector_mult_vf.44
	andq	$-16, %rdi	#, niters_vector_mult_vf.44
	vmovdqu	%xmm2, -16(%rcx,%rdx)	# tmp236, MEM <vector(16) char> [(char *)vectp.51_184]
	.loc 1 36 9 is_stmt 1 view .LVU127
	subq	%rdi, %rax	# niters_vector_mult_vf.44, tmp.45
	andl	$15, %edx	#, len
	je	.L2	#,
.L20:
.LVL51:
	.loc 1 37 3 view .LVU128
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU129
	movzbl	(%rsi,%rax), %edx	# *_282, _284
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU130
	movb	%dl, (%rcx,%rax)	# _284, *_283
	.loc 1 36 9 is_stmt 1 view .LVU131
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU132
	leaq	-1(%rax), %rdx	#, len
.LVL52:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU133
	testq	%rax, %rax	# tmp.45
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU134
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU135
	movzbl	-1(%rsi,%rax), %edi	# *_289, _291
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU136
	movb	%dil, -1(%rcx,%rax)	# _291, *_290
	.loc 1 36 9 is_stmt 1 view .LVU137
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU138
	leaq	-2(%rax), %rdi	#, len
.LVL53:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU139
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU140
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU141
	movzbl	-2(%rsi,%rax), %edx	# *_296, _298
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU142
	movb	%dl, -2(%rcx,%rax)	# _298, *_297
	.loc 1 36 9 is_stmt 1 view .LVU143
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU144
	leaq	-3(%rax), %rdx	#, len
.LVL54:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU145
	testq	%rdi, %rdi	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU146
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU147
	movzbl	-3(%rsi,%rax), %edi	# *_303, _305
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU148
	movb	%dil, -3(%rcx,%rax)	# _305, *_304
	.loc 1 36 9 is_stmt 1 view .LVU149
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU150
	leaq	-4(%rax), %rdi	#, len
.LVL55:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU151
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU152
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU153
	movzbl	-4(%rsi,%rax), %edx	# *_310, _312
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU154
	movb	%dl, -4(%rcx,%rax)	# _312, *_311
	.loc 1 36 9 is_stmt 1 view .LVU155
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU156
	leaq	-5(%rax), %rdx	#, len
.LVL56:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU157
	testq	%rdi, %rdi	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU158
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU159
	movzbl	-5(%rsi,%rax), %edi	# *_317, _319
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU160
	movb	%dil, -5(%rcx,%rax)	# _319, *_318
	.loc 1 36 9 is_stmt 1 view .LVU161
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU162
	leaq	-6(%rax), %rdi	#, len
.LVL57:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU163
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU164
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU165
	movzbl	-6(%rsi,%rax), %edx	# *_324, _326
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU166
	movb	%dl, -6(%rcx,%rax)	# _326, *_325
	.loc 1 36 9 is_stmt 1 view .LVU167
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU168
	leaq	-7(%rax), %rdx	#, len
.LVL58:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU169
	testq	%rdi, %rdi	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU170
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU171
	movzbl	-7(%rsi,%rax), %edi	# *_331, _333
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU172
	movb	%dil, -7(%rcx,%rax)	# _333, *_332
	.loc 1 36 9 is_stmt 1 view .LVU173
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU174
	leaq	-8(%rax), %rdi	#, len
.LVL59:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU175
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU176
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU177
	movzbl	-8(%rsi,%rax), %edx	# *_338, _340
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU178
	movb	%dl, -8(%rcx,%rax)	# _340, *_339
	.loc 1 36 9 is_stmt 1 view .LVU179
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU180
	leaq	-9(%rax), %rdx	#, len
.LVL60:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU181
	testq	%rdi, %rdi	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU182
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU183
	movzbl	-9(%rsi,%rax), %edi	# *_345, _347
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU184
	movb	%dil, -9(%rcx,%rax)	# _347, *_346
	.loc 1 36 9 is_stmt 1 view .LVU185
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU186
	leaq	-10(%rax), %rdi	#, len
.LVL61:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU187
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU188
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU189
	movzbl	-10(%rsi,%rax), %edx	# *_352, _354
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU190
	movb	%dl, -10(%rcx,%rax)	# _354, *_353
	.loc 1 36 9 is_stmt 1 view .LVU191
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU192
	leaq	-11(%rax), %rdx	#, len
.LVL62:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU193
	testq	%rdi, %rdi	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU194
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU195
	movzbl	-11(%rsi,%rax), %edi	# *_359, _361
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU196
	movb	%dil, -11(%rcx,%rax)	# _361, *_360
	.loc 1 36 9 is_stmt 1 view .LVU197
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU198
	leaq	-12(%rax), %rdi	#, len
.LVL63:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU199
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU200
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU201
	movzbl	-12(%rsi,%rax), %edx	# *_366, _368
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU202
	movb	%dl, -12(%rcx,%rax)	# _368, *_367
	.loc 1 36 9 is_stmt 1 view .LVU203
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 12 is_stmt 0 view .LVU204
	leaq	-13(%rax), %rdx	#, len
.LVL64:
# ft_memmove.c:36: 	while (len--)
	.loc 1 36 9 view .LVU205
	testq	%rdi, %rdi	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU206
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU207
	movzbl	-13(%rsi,%rax), %edi	# *_373, _375
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU208
	movb	%dil, -13(%rcx,%rax)	# _375, *_374
	.loc 1 36 9 is_stmt 1 view .LVU209
.LVL65:
	.loc 1 36 9 is_stmt 0 view .LVU210
	testq	%rdx, %rdx	# len
	je	.L2	#,
	.loc 1 37 3 is_stmt 1 view .LVU211
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 16 is_stmt 0 view .LVU212
	movzbl	-14(%rsi,%rax), %edx	# *_163, _165
# ft_memmove.c:37: 		*(d + len) = *(s + len);
	.loc 1 37 14 view .LVU213
	movb	%dl, -14(%rcx,%rax)	# _165, *_164
	.loc 1 36 9 is_stmt 1 view .LVU214
.LVL66:
	.loc 1 36 9 is_stmt 0 view .LVU215
	jmp	.L2	#
.LVL67:
.L130:
	.loc 1 36 9 view .LVU216
	vzeroupper
.LVL68:
	jmp	.L20	#
.LVL69:
.L26:
# ft_memmove.c:28: 	s = (const char *)src;
	.loc 1 28 4 view .LVU217
	movq	%rsi, %r9	# src, tmp.24
# ft_memmove.c:29: 	d = (char *) dst;
	.loc 1 29 4 view .LVU218
	movq	%rcx, %rdi	# dst, tmp.23
# ft_memmove.c:30: 	if (d < s)
	.loc 1 30 5 view .LVU219
	xorl	%r8d, %r8d	# _9
	jmp	.L6	#
.LVL70:
.L136:
	.loc 1 30 5 view .LVU220
	vzeroupper
.LVL71:
	jmp	.L11	#
.LVL72:
.L129:
	.loc 1 30 5 view .LVU221
	vzeroupper
.LVL73:
	jmp	.L2	#
	.cfi_endproc
.LFE51:
	.size	ft_memmove, .-ft_memmove
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x150
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF13
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x7
	.long	.LASF14
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x8
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x9
	.byte	0x8
	.uleb128 0x3
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xa
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x3
	.long	0x9f
	.uleb128 0xb
	.uleb128 0x3
	.long	0x8e
	.uleb128 0xc
	.long	.LASF15
	.byte	0x1
	.byte	0x11
	.byte	0x7
	.long	0x80
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x4
	.string	"dst"
	.byte	0x18
	.long	0x80
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.string	"src"
	.byte	0x29
	.long	0x9a
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x4
	.string	"len"
	.byte	0x35
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x5
	.string	"d"
	.byte	0x13
	.byte	0x9
	.long	0x82
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x5
	.string	"s"
	.byte	0x14
	.byte	0xe
	.long	0xa0
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x2
	.quad	.LVL16
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL50
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL68
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL71
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL73
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x83
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 17
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU23
	.uleb128 .LVU23
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU121
	.uleb128 .LVU121
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU17
	.uleb128 .LVU21
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU23
	.uleb128 .LVU24
	.uleb128 .LVU26
	.uleb128 .LVU26
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU39
	.uleb128 .LVU46
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU60
	.uleb128 .LVU60
	.uleb128 .LVU65
	.uleb128 .LVU65
	.uleb128 .LVU70
	.uleb128 .LVU70
	.uleb128 .LVU75
	.uleb128 .LVU75
	.uleb128 .LVU80
	.uleb128 .LVU80
	.uleb128 .LVU85
	.uleb128 .LVU85
	.uleb128 .LVU90
	.uleb128 .LVU90
	.uleb128 .LVU95
	.uleb128 .LVU95
	.uleb128 .LVU100
	.uleb128 .LVU100
	.uleb128 .LVU105
	.uleb128 .LVU105
	.uleb128 .LVU110
	.uleb128 .LVU110
	.uleb128 .LVU115
	.uleb128 .LVU115
	.uleb128 .LVU118
	.uleb128 .LVU121
	.uleb128 .LVU122
	.uleb128 .LVU128
	.uleb128 .LVU133
	.uleb128 .LVU133
	.uleb128 .LVU139
	.uleb128 .LVU139
	.uleb128 .LVU145
	.uleb128 .LVU145
	.uleb128 .LVU151
	.uleb128 .LVU151
	.uleb128 .LVU157
	.uleb128 .LVU157
	.uleb128 .LVU163
	.uleb128 .LVU163
	.uleb128 .LVU169
	.uleb128 .LVU169
	.uleb128 .LVU175
	.uleb128 .LVU175
	.uleb128 .LVU181
	.uleb128 .LVU181
	.uleb128 .LVU187
	.uleb128 .LVU187
	.uleb128 .LVU193
	.uleb128 .LVU193
	.uleb128 .LVU199
	.uleb128 .LVU199
	.uleb128 .LVU205
	.uleb128 .LVU205
	.uleb128 .LVU210
	.uleb128 .LVU210
	.uleb128 .LVU215
	.uleb128 .LVU215
	.uleb128 .LVU216
	.uleb128 .LVU217
	.uleb128 .LVU220
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x7
	.byte	0x75
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x8
	.byte	0x71
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x1c
	.byte	0x32
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x7
	.byte	0x75
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x8
	.byte	0x71
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x1c
	.byte	0x32
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x7
	.byte	0x75
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL51-.Ltext0
	.uleb128 .LVL52-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL53-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL54-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL55-.Ltext0
	.uleb128 .LVL56-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LVL57-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL57-.Ltext0
	.uleb128 .LVL58-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL58-.Ltext0
	.uleb128 .LVL59-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL59-.Ltext0
	.uleb128 .LVL60-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL60-.Ltext0
	.uleb128 .LVL61-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL61-.Ltext0
	.uleb128 .LVL62-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL62-.Ltext0
	.uleb128 .LVL63-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL63-.Ltext0
	.uleb128 .LVL64-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL64-.Ltext0
	.uleb128 .LVL65-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL65-.Ltext0
	.uleb128 .LVL66-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL66-.Ltext0
	.uleb128 .LVL67-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -15
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL69-.Ltext0
	.uleb128 .LVL70-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS3:
	.uleb128 .LVU13
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU23
	.uleb128 .LVU24
	.uleb128 .LVU26
	.uleb128 .LVU26
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU39
	.uleb128 .LVU46
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU62
	.uleb128 .LVU62
	.uleb128 .LVU67
	.uleb128 .LVU67
	.uleb128 .LVU72
	.uleb128 .LVU72
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU82
	.uleb128 .LVU82
	.uleb128 .LVU87
	.uleb128 .LVU87
	.uleb128 .LVU92
	.uleb128 .LVU92
	.uleb128 .LVU97
	.uleb128 .LVU97
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU107
	.uleb128 .LVU107
	.uleb128 .LVU112
	.uleb128 .LVU112
	.uleb128 .LVU117
	.uleb128 .LVU117
	.uleb128 .LVU121
	.uleb128 .LVU121
	.uleb128 .LVU220
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x8
	.byte	0x72
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x8
	.byte	0x72
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 15
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL70-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU12
	.uleb128 .LVU23
	.uleb128 .LVU24
	.uleb128 .LVU26
	.uleb128 .LVU26
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU39
	.uleb128 .LVU46
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU62
	.uleb128 .LVU62
	.uleb128 .LVU67
	.uleb128 .LVU67
	.uleb128 .LVU72
	.uleb128 .LVU72
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU82
	.uleb128 .LVU82
	.uleb128 .LVU87
	.uleb128 .LVU87
	.uleb128 .LVU92
	.uleb128 .LVU92
	.uleb128 .LVU97
	.uleb128 .LVU97
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU107
	.uleb128 .LVU107
	.uleb128 .LVU112
	.uleb128 .LVU112
	.uleb128 .LVU117
	.uleb128 .LVU117
	.uleb128 .LVU121
	.uleb128 .LVU121
	.uleb128 .LVU220
.LLST4:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x6
	.byte	0x74
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x8
	.byte	0x74
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x6
	.byte	0x74
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x8
	.byte	0x74
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x6
	.byte	0x74
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x59
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x3
	.byte	0x79
	.sleb128 15
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL70-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF14:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF15:
	.string	"ft_memmove"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF9:
	.string	"signed char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_memmove.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strlcpy.o/   0           0     0     644     14077     `
	.file	"ft_strlcpy.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strlcpy.c"
	.p2align 4
	.globl	ft_strlcpy
	.type	ft_strlcpy, @function
ft_strlcpy:
.LVL0:
.LFB51:
	.file 1 "ft_strlcpy.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_strlcpy.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
# ft_strlcpy.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movq	%rdi, %rbx	# tmp92, dst
	movq	%rdx, %r13	# tmp94, dstsize
# ft_strlcpy.c:20: 	src_len = ft_strlen(src);
	.loc 1 20 12 view .LVU7
	movq	%rsi, %rdi	# src,
.LVL1:
# ft_strlcpy.c:16: {
	.loc 1 16 1 view .LVU8
	movq	%rsi, %r12	# tmp93, src
# ft_strlcpy.c:20: 	src_len = ft_strlen(src);
	.loc 1 20 12 view .LVU9
	call	ft_strlen@PLT	#
.LVL2:
	.loc 1 21 2 is_stmt 1 view .LVU10
# ft_strlcpy.c:21: 	if (!dstsize)
	.loc 1 21 5 is_stmt 0 view .LVU11
	testq	%r13, %r13	# dstsize
	je	.L1	#,
.LVL3:
	.loc 1 24 25 is_stmt 1 view .LVU12
# ft_strlcpy.c:24: 	while (i < dstsize - 1 && src[i])
	.loc 1 24 21 is_stmt 0 view .LVU13
	leaq	-1(%r13), %rsi	#, _20
# ft_strlcpy.c:23: 	i = 0;
	.loc 1 23 4 view .LVU14
	xorl	%ecx, %ecx	# i
# ft_strlcpy.c:24: 	while (i < dstsize - 1 && src[i])
	.loc 1 24 25 view .LVU15
	cmpq	$1, %r13	#, dstsize
	jne	.L3	#,
	jmp	.L4	#
.LVL4:
	.p2align 4,,10
	.p2align 3
.L5:
	.loc 1 26 3 is_stmt 1 view .LVU16
# ft_strlcpy.c:26: 		dst[i] = src[i];
	.loc 1 26 10 is_stmt 0 view .LVU17
	movb	%dl, (%rbx,%rcx)	# _5, MEM[(char *)dst_15(D) + i_21 * 1]
	.loc 1 27 3 is_stmt 1 view .LVU18
# ft_strlcpy.c:27: 		i++;
	.loc 1 27 4 is_stmt 0 view .LVU19
	incq	%rcx	# i
.LVL5:
	.loc 1 24 25 is_stmt 1 view .LVU20
	cmpq	%rsi, %rcx	# _20, i
	je	.L12	#,
.LVL6:
.L3:
# ft_strlcpy.c:24: 	while (i < dstsize - 1 && src[i])
	.loc 1 24 31 is_stmt 0 discriminator 1 view .LVU21
	movzbl	(%r12,%rcx), %edx	# MEM[(const char *)src_11(D) + i_21 * 1], _5
# ft_strlcpy.c:24: 	while (i < dstsize - 1 && src[i])
	.loc 1 24 25 discriminator 1 view .LVU22
	testb	%dl, %dl	# _5
	jne	.L5	#,
.L12:
# ft_strlcpy.c:26: 		dst[i] = src[i];
	.loc 1 26 6 view .LVU23
	addq	%rcx, %rbx	# i, dst
.LVL7:
.L4:
	.loc 1 29 2 is_stmt 1 view .LVU24
# ft_strlcpy.c:29: 	dst[i] = 0;
	.loc 1 29 9 is_stmt 0 view .LVU25
	movb	$0, (%rbx)	#, *prephitmp_1
	.loc 1 30 2 is_stmt 1 view .LVU26
.L1:
# ft_strlcpy.c:31: }
	.loc 1 31 1 is_stmt 0 view .LVU27
	addq	$8, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
.LVL8:
	.loc 1 31 1 view .LVU28
	popq	%r13	#
.LVL9:
	.loc 1 31 1 view .LVU29
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_strlcpy, .-ft_strlcpy
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x141
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x5
	.long	.LASF16
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x2
	.long	0x85
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x7
	.long	0x85
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x8c
	.uleb128 0x8
	.long	.LASF17
	.byte	0x3
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xb3
	.uleb128 0x9
	.long	0x98
	.byte	0
	.uleb128 0xa
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0x8
	.long	0x35
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.string	"dst"
	.byte	0x19
	.long	0x80
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x3
	.string	"src"
	.byte	0x2a
	.long	0x98
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xb
	.long	.LASF13
	.byte	0x1
	.byte	0xf
	.byte	0x36
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xc
	.string	"i"
	.byte	0x1
	.byte	0x11
	.byte	0x9
	.long	0x35
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xd
	.long	.LASF14
	.byte	0x1
	.byte	0x12
	.byte	0x9
	.long	0x35
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xe
	.quad	.LVL2
	.long	0x9d
	.uleb128 0xf
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 .LVU12
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU24
.LLST3:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU10
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF16:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF14:
	.string	"src_len"
.LASF13:
	.string	"dstsize"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF18:
	.string	"ft_strlcpy"
.LASF17:
	.string	"ft_strlen"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strlcpy.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strlcat.o/   0           0     0     644     16632     `
	.file	"ft_strlcat.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strlcat.c"
	.p2align 4
	.globl	ft_strlcat
	.type	ft_strlcat, @function
ft_strlcat:
.LVL0:
.LFB51:
	.file 1 "ft_strlcat.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# ft_strlcat.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 21 2 view .LVU6
# ft_strlcat.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rdi, %r13	# tmp96, dst
# ft_strlcat.c:21: 	src_len = ft_strlen(src);
	.loc 1 21 12 view .LVU8
	movq	%rsi, %rdi	# src,
.LVL1:
# ft_strlcat.c:16: {
	.loc 1 16 1 view .LVU9
	movq	%rdx, %r12	# tmp98, dstsize
	movq	%rsi, %rbx	# tmp97, src
# ft_strlcat.c:21: 	src_len = ft_strlen(src);
	.loc 1 21 12 view .LVU10
	call	ft_strlen@PLT	#
.LVL2:
# ft_strlcat.c:22: 	dst_len = ft_strlen(dst);
	.loc 1 22 12 view .LVU11
	movq	%r13, %rdi	# dst,
# ft_strlcat.c:21: 	src_len = ft_strlen(src);
	.loc 1 21 12 view .LVU12
	movq	%rax, %r14	# tmp99, src_len
.LVL3:
	.loc 1 22 2 is_stmt 1 view .LVU13
# ft_strlcat.c:22: 	dst_len = ft_strlen(dst);
	.loc 1 22 12 is_stmt 0 view .LVU14
	call	ft_strlen@PLT	#
.LVL4:
	.loc 1 23 2 is_stmt 1 view .LVU15
# ft_strlcat.c:24: 		return (src_len + dstsize);
	.loc 1 24 19 is_stmt 0 view .LVU16
	leaq	(%r14,%r12), %rdx	#, <retval>
# ft_strlcat.c:23: 	if (dstsize <= dst_len)
	.loc 1 23 5 view .LVU17
	cmpq	%r12, %rax	# dstsize, dst_len
	jnb	.L1	#,
	.loc 1 26 14 is_stmt 1 view .LVU18
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 9 is_stmt 0 view .LVU19
	movzbl	(%rbx), %edi	# *src_11(D), _2
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 14 view .LVU20
	testb	%dil, %dil	# _2
	je	.L6	#,
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 9 view .LVU21
	subq	%rax, %rbx	# dst_len, src
.LVL5:
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 26 discriminator 1 view .LVU22
	leaq	1(%rax), %rcx	#, ivtmp.9
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 9 view .LVU23
	movq	%rbx, %rsi	# src, tmp94
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 14 discriminator 1 view .LVU24
	cmpq	%r12, %rcx	# dstsize, ivtmp.9
	jb	.L4	#,
	jmp	.L6	#
.LVL6:
	.p2align 4,,10
	.p2align 3
.L13:
	.loc 1 26 14 discriminator 1 view .LVU25
	leaq	1(%rcx), %r8	#, ivtmp.9
	cmpq	%r12, %r8	# dstsize, ivtmp.9
	jnb	.L3	#,
	.loc 1 26 14 discriminator 1 view .LVU26
	movq	%r8, %rcx	# ivtmp.9, ivtmp.9
.LVL7:
.L4:
	.loc 1 28 3 is_stmt 1 view .LVU27
# ft_strlcat.c:28: 		dst[dst_len++] = *src;
	.loc 1 28 18 is_stmt 0 view .LVU28
	movb	%dil, -1(%r13,%rcx)	# _2, MEM[(char *)dst_14(D) + -1B + ivtmp.9_18 * 1]
	.loc 1 29 3 is_stmt 1 view .LVU29
	.loc 1 26 14 view .LVU30
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 9 is_stmt 0 view .LVU31
	movzbl	(%rsi,%rcx), %edi	# MEM[(const char *)_38 + ivtmp.9_18 * 1], _2
# ft_strlcat.c:26: 	while (*src && (dst_len + 1 < dstsize))
	.loc 1 26 14 view .LVU32
	testb	%dil, %dil	# _2
	jne	.L13	#,
.L3:
	.loc 1 31 2 is_stmt 1 view .LVU33
# ft_strlcat.c:31: 	dst[dst_len] = '\0';
	.loc 1 31 15 is_stmt 0 view .LVU34
	movb	$0, 0(%r13,%rcx)	#, *_4
	.loc 1 32 2 is_stmt 1 view .LVU35
# ft_strlcat.c:32: 	return (dst_len_base + src_len);
	.loc 1 32 23 is_stmt 0 view .LVU36
	leaq	(%r14,%rax), %rdx	#, <retval>
.LVL8:
.L1:
# ft_strlcat.c:33: }
	.loc 1 33 1 view .LVU37
	popq	%rbx	#
	movq	%rdx, %rax	# <retval>,
	popq	%r12	#
.LVL9:
	.loc 1 33 1 view .LVU38
	popq	%r13	#
.LVL10:
	.loc 1 33 1 view .LVU39
	popq	%r14	#
.LVL11:
	.loc 1 33 1 view .LVU40
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL12:
	.p2align 4,,10
	.p2align 3
.L6:
	.cfi_restore_state
# ft_strlcat.c:22: 	dst_len = ft_strlen(dst);
	.loc 1 22 12 view .LVU41
	movq	%rax, %rcx	# dst_len, ivtmp.9
	jmp	.L3	#
	.cfi_endproc
.LFE51:
	.size	ft_strlcat, .-ft_strlcat
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x163
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF16
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x7
	.long	.LASF17
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x8
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x2
	.long	0x85
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x9
	.long	0x85
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x8c
	.uleb128 0xa
	.long	.LASF18
	.byte	0x3
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xb3
	.uleb128 0xb
	.long	0x98
	.byte	0
	.uleb128 0xc
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x8
	.long	0x35
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.string	"dst"
	.byte	0x19
	.long	0x80
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x3
	.string	"src"
	.byte	0x2a
	.long	0x98
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xd
	.long	.LASF13
	.byte	0x1
	.byte	0xf
	.byte	0x36
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xe
	.long	.LASF20
	.byte	0x1
	.byte	0x11
	.byte	0x9
	.long	0x35
	.uleb128 0x4
	.long	.LASF14
	.byte	0x12
	.long	0x35
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x4
	.long	.LASF15
	.byte	0x13
	.long	0x35
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xf
	.quad	.LVL2
	.long	0x9d
	.long	0x151
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x10
	.quad	.LVL4
	.long	0x9d
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 9
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU41
	.uleb128 .LVU41
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU25
	.uleb128 .LVU41
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU41
	.uleb128 .LVU41
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU15
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU27
	.uleb128 .LVU28
	.uleb128 .LVU37
	.uleb128 .LVU41
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS4:
	.uleb128 .LVU13
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU40
	.uleb128 .LVU41
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF17:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF16:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF19:
	.string	"ft_strlcat"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF15:
	.string	"src_len"
.LASF13:
	.string	"dstsize"
.LASF7:
	.string	"short unsigned int"
.LASF14:
	.string	"dst_len"
.LASF18:
	.string	"ft_strlen"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF20:
	.string	"dst_len_base"
.LASF9:
	.string	"signed char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strlcat.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_toupper.o/   0           0     0     644     7076      `
	.file	"ft_toupper.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_toupper.c"
	.p2align 4
	.globl	ft_toupper
	.type	ft_toupper, @function
ft_toupper:
.LVL0:
.LFB0:
	.file 1 "ft_toupper.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_toupper.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
# ft_toupper.c:15: 	if (c <= 122 && c >= 97)
	.loc 1 15 15 is_stmt 0 view .LVU4
	leal	-97(%rdi), %ecx	#, tmp86
# ft_toupper.c:14: {
	.loc 1 14 1 view .LVU5
	movl	%edi, %eax	# tmp90, c
# ft_toupper.c:16: 		c -= 32;
	.loc 1 16 5 view .LVU6
	leal	-32(%rdi), %edx	#, tmp88
# ft_toupper.c:18: }
	.loc 1 18 1 view .LVU7
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_toupper.c:16: 		c -= 32;
	.loc 1 16 5 view .LVU8
	cmpl	$26, %ecx	#, tmp86
	cmovb	%edx, %eax	# tmp88,, c
.LVL1:
	.loc 1 17 2 is_stmt 1 view .LVU9
# ft_toupper.c:18: }
	.loc 1 18 1 is_stmt 0 view .LVU10
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_toupper, .-ft_toupper
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x67
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x1
	.long	.LASF2
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.long	0x63
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x63
	.uleb128 0x3
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x14
	.long	0x63
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF3:
	.string	"ft_toupper"
.LASF2:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_toupper.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_tolower.o/   0           0     0     644     11857     `
	.file	"ft_tolower.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_tolower.c"
	.p2align 4
	.globl	ft_tolower
	.type	ft_tolower, @function
ft_tolower:
.LVL0:
.LFB0:
	.file 1 "ft_tolower.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_tolower.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
# ft_tolower.c:15: 	if (c <= 90 && c >= 65)
	.loc 1 15 14 is_stmt 0 view .LVU4
	leal	-65(%rdi), %ecx	#, tmp86
# ft_tolower.c:14: {
	.loc 1 14 1 view .LVU5
	movl	%edi, %eax	# tmp90, c
# ft_tolower.c:16: 		c += 32;
	.loc 1 16 5 view .LVU6
	leal	32(%rdi), %edx	#, tmp88
# ft_tolower.c:18: }
	.loc 1 18 1 view .LVU7
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_tolower.c:16: 		c += 32;
	.loc 1 16 5 view .LVU8
	cmpl	$26, %ecx	#, tmp86
	cmovb	%edx, %eax	# tmp88,, c
.LVL1:
	.loc 1 17 2 is_stmt 1 view .LVU9
# ft_tolower.c:18: }
	.loc 1 18 1 is_stmt 0 view .LVU10
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_tolower, .-ft_tolower
	.p2align 4
	.globl	ft_strtolower
	.type	ft_strtolower, @function
ft_strtolower:
.LVL2:
.LFB1:
	.loc 1 21 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 21 1 is_stmt 0 view .LVU12
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_tolower.c:21: {
	.loc 1 21 1 view .LVU13
	.loc 1 22 2 is_stmt 1 view .LVU14
# ft_tolower.c:22: 	if (!str)
	.loc 1 22 5 is_stmt 0 view .LVU15
	testq	%rdi, %rdi	# str
	jne	.L17	#,
	jmp	.L16	#
	.p2align 4,,10
	.p2align 3
.L9:
	.loc 1 26 3 is_stmt 1 view .LVU16
.LVL3:
.LBB4:
.LBI4:
	.loc 1 13 5 view .LVU17
.LBB5:
	.loc 1 15 2 view .LVU18
# ft_tolower.c:15: 	if (c <= 90 && c >= 65)
	.loc 1 15 14 is_stmt 0 view .LVU19
	movsbl	%al, %edx	# _5, _5
.LVL4:
	.loc 1 15 14 view .LVU20
	subl	$65, %edx	#, tmp90
.LVL5:
# ft_tolower.c:15: 	if (c <= 90 && c >= 65)
	.loc 1 15 5 view .LVU21
	cmpl	$25, %edx	#, tmp90
	ja	.L7	#,
	.loc 1 16 3 is_stmt 1 view .LVU22
.LVL6:
	.loc 1 17 2 view .LVU23
.LBE5:
.LBE4:
# ft_tolower.c:26: 		*str = ft_tolower(*str);
	.loc 1 26 8 is_stmt 0 discriminator 1 view .LVU24
	addl	$32, %eax	#, tmp91
.L7:
.LBB7:
.LBB6:
	.loc 1 17 2 is_stmt 1 view .LVU25
.LBE6:
.LBE7:
# ft_tolower.c:26: 		*str = ft_tolower(*str);
	.loc 1 26 8 is_stmt 0 discriminator 1 view .LVU26
	movb	%al, (%rdi)	# _5, MEM[(char *)str_4]
	.loc 1 27 3 is_stmt 1 view .LVU27
# ft_tolower.c:27: 		str++;
	.loc 1 27 6 is_stmt 0 view .LVU28
	incq	%rdi	# str
.LVL7:
.L17:
	.loc 1 24 9 is_stmt 1 view .LVU29
	movzbl	(%rdi), %eax	#* str, _5
	testb	%al, %al	# _5
	jne	.L9	#,
.L16:
# ft_tolower.c:29: }
	.loc 1 29 1 is_stmt 0 view .LVU30
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1:
	.size	ft_strtolower, .-ft_strtolower
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xd6
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x3
	.long	.LASF4
	.byte	0x1
	.byte	0x14
	.byte	0x6
	.quad	.LFB1
	.quad	.LFE1-.LFB1
	.uleb128 0x1
	.byte	0x9c
	.long	0x84
	.uleb128 0x4
	.string	"str"
	.byte	0x1
	.byte	0x14
	.byte	0x1a
	.long	0x84
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x5
	.long	0x91
	.quad	.LBI4
	.byte	.LVU17
	.long	.LLRL2
	.byte	0x1
	.byte	0x1a
	.byte	0xa
	.uleb128 0x1
	.long	0xa2
	.long	.LLST3
	.long	.LVUS3
	.byte	0
	.byte	0
	.uleb128 0x6
	.byte	0x8
	.long	0x8a
	.uleb128 0x7
	.byte	0x1
	.byte	0x6
	.long	.LASF2
	.uleb128 0x8
	.long	.LASF5
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.long	0xad
	.byte	0x1
	.long	0xad
	.uleb128 0x9
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x14
	.long	0xad
	.byte	0
	.uleb128 0xa
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0xb
	.long	0x91
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x1
	.long	0xa2
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS1:
	.uleb128 0
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LFE1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS3:
	.uleb128 .LVU17
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU23
.LLST3:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x9
	.byte	0x70
	.sleb128 0
	.byte	0x8
	.byte	0x38
	.byte	0x24
	.byte	0x8
	.byte	0x38
	.byte	0x26
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0x71
	.sleb128 65
	.byte	0x9f
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL2:
	.byte	0x4
	.uleb128 .LBB4-.Ltext0
	.uleb128 .LBE4-.Ltext0
	.byte	0x4
	.uleb128 .LBB7-.Ltext0
	.uleb128 .LBE7-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"ft_strtolower"
.LASF5:
	.string	"ft_tolower"
.LASF3:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF2:
	.string	"char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_tolower.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strchr.o/    0           0     0     644     14902     `
	.file	"ft_strchr.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strchr.c"
	.p2align 4
	.globl	ft_strchr
	.type	ft_strchr, @function
ft_strchr:
.LVL0:
.LFB51:
	.file 1 "ft_strchr.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strchr.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_strchr.c:17: 	if (!s)
	.loc 1 17 5 is_stmt 0 view .LVU4
	testq	%rdi, %rdi	# s
	je	.L5	#,
	.loc 1 19 23 is_stmt 1 view .LVU5
# ft_strchr.c:19: 	while (*s != (char)c && *s)
	.loc 1 19 9 is_stmt 0 view .LVU6
	movzbl	(%rdi), %eax	# *s_8(D), _1
# ft_strchr.c:19: 	while (*s != (char)c && *s)
	.loc 1 19 12 view .LVU7
	movl	%esi, %edx	# c, _12
# ft_strchr.c:19: 	while (*s != (char)c && *s)
	.loc 1 19 23 view .LVU8
	cmpb	%sil, %al	# c, _1
	jne	.L3	#,
	jmp	.L6	#
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 20 3 is_stmt 1 view .LVU9
# ft_strchr.c:19: 	while (*s != (char)c && *s)
	.loc 1 19 9 is_stmt 0 view .LVU10
	movzbl	1(%rdi), %eax	# MEM[(const char *)s_11], _1
# ft_strchr.c:20: 		s++;
	.loc 1 20 4 view .LVU11
	incq	%rdi	# s
.LVL1:
	.loc 1 19 23 is_stmt 1 view .LVU12
	cmpb	%dl, %al	# _12, _1
	je	.L6	#,
.L3:
# ft_strchr.c:19: 	while (*s != (char)c && *s)
	.loc 1 19 23 is_stmt 0 discriminator 1 view .LVU13
	testb	%al, %al	# _1
	jne	.L4	#,
	.loc 1 21 2 is_stmt 1 view .LVU14
# ft_strchr.c:18: 		return (NULL);
	.loc 1 18 10 is_stmt 0 view .LVU15
	xorl	%eax, %eax	# tmp94
	testb	%sil, %sil	# c
# ft_strchr.c:24: }
	.loc 1 24 1 view .LVU16
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_strchr.c:18: 		return (NULL);
	.loc 1 18 10 view .LVU17
	cmove	%rdi, %rax	# s,, <retval>
# ft_strchr.c:24: }
	.loc 1 24 1 view .LVU18
	ret	
	.p2align 4,,10
	.p2align 3
.L6:
	.cfi_restore_state
# ft_strchr.c:22: 		return ((char *)s);
	.loc 1 22 11 view .LVU19
	movq	%rdi, %rax	# s, <retval>
# ft_strchr.c:24: }
	.loc 1 24 1 view .LVU20
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.L5:
	.cfi_restore_state
# ft_strchr.c:18: 		return (NULL);
	.loc 1 18 10 view .LVU21
	xorl	%eax, %eax	# <retval>
# ft_strchr.c:24: }
	.loc 1 24 1 view .LVU22
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_strchr, .-ft_strchr
	.p2align 4
	.globl	ft_strchr_fn
	.type	ft_strchr_fn, @function
ft_strchr_fn:
.LVL2:
.LFB52:
	.loc 1 27 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 27 1 is_stmt 0 view .LVU24
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# ft_strchr.c:27: {
	.loc 1 27 1 view .LVU25
	.loc 1 28 2 is_stmt 1 view .LVU26
# ft_strchr.c:27: {
	.loc 1 27 1 is_stmt 0 view .LVU27
	movq	%rdi, %rbx	# tmp93, s
	movq	%rsi, %r12	# tmp94, fn
# ft_strchr.c:28: 	if (!s)
	.loc 1 28 5 view .LVU28
	testq	%rdi, %rdi	# s
	jne	.L22	#,
	jmp	.L16	#
.LVL3:
	.p2align 4,,10
	.p2align 3
.L24:
# ft_strchr.c:30: 	while (*s && !fn(*s))
	.loc 1 30 16 discriminator 1 view .LVU29
	call	*%r12	# fn
.LVL4:
# ft_strchr.c:30: 	while (*s && !fn(*s))
	.loc 1 30 12 discriminator 1 view .LVU30
	testb	%al, %al	# tmp95
	jne	.L23	#,
	.loc 1 31 3 is_stmt 1 view .LVU31
# ft_strchr.c:31: 		s++;
	.loc 1 31 4 is_stmt 0 view .LVU32
	incq	%rbx	# s
.LVL5:
.L22:
	.loc 1 30 12 is_stmt 1 view .LVU33
# ft_strchr.c:30: 	while (*s && !fn(*s))
	.loc 1 30 9 is_stmt 0 view .LVU34
	movsbl	(%rbx), %edi	#* s,
# ft_strchr.c:30: 	while (*s && !fn(*s))
	.loc 1 30 12 view .LVU35
	testb	%dil, %dil	# _1
	jne	.L24	#,
.L14:
	.loc 1 32 2 is_stmt 1 view .LVU36
# ft_strchr.c:32: 	if (fn(*s))
	.loc 1 32 6 is_stmt 0 view .LVU37
	call	*%r12	# fn
.LVL6:
# ft_strchr.c:32: 	if (fn(*s))
	.loc 1 32 5 discriminator 1 view .LVU38
	testb	%al, %al	# tmp96
	je	.L16	#,
# ft_strchr.c:35: }
	.loc 1 35 1 view .LVU39
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
.LVL7:
	.loc 1 35 1 view .LVU40
	popq	%r12	#
.LVL8:
	.loc 1 35 1 view .LVU41
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL9:
	.p2align 4,,10
	.p2align 3
.L16:
	.cfi_restore_state
# ft_strchr.c:29: 		return (NULL);
	.loc 1 29 10 view .LVU42
	xorl	%ebx, %ebx	# <retval>
.LVL10:
# ft_strchr.c:35: }
	.loc 1 35 1 view .LVU43
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
.LVL11:
	.loc 1 35 1 view .LVU44
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL12:
	.p2align 4,,10
	.p2align 3
.L23:
	.cfi_restore_state
# ft_strchr.c:32: 	if (fn(*s))
	.loc 1 32 9 view .LVU45
	movsbl	(%rbx), %edi	# *s_22,
	jmp	.L14	#
	.cfi_endproc
.LFE52:
	.size	ft_strchr_fn, .-ft_strchr_fn
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x12b
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF14
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x5
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x2
	.long	0x79
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x6
	.long	0x79
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x80
	.uleb128 0x7
	.long	.LASF15
	.byte	0x1
	.byte	0x1a
	.byte	0x7
	.long	0x74
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0xd7
	.uleb128 0x3
	.string	"s"
	.byte	0x1a
	.byte	0x20
	.long	0x8c
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x3
	.string	"fn"
	.byte	0x1a
	.byte	0x28
	.long	0xed
	.long	.LLST2
	.long	.LVUS2
	.byte	0
	.uleb128 0x8
	.long	0xe6
	.long	0xe6
	.uleb128 0x9
	.long	0x79
	.byte	0
	.uleb128 0x1
	.byte	0x1
	.byte	0x2
	.long	.LASF13
	.uleb128 0x2
	.long	0xd7
	.uleb128 0xa
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x74
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.string	"s"
	.byte	0xf
	.byte	0x1d
	.long	0x8c
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xb
	.string	"c"
	.byte	0x1
	.byte	0xf
	.byte	0x24
	.long	0x3c
	.uleb128 0x1
	.byte	0x54
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS1:
	.uleb128 0
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU43
	.uleb128 .LVU45
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU41
	.uleb128 .LVU41
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF8:
	.string	"unsigned int"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF14:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF15:
	.string	"ft_strchr_fn"
.LASF2:
	.string	"long int"
.LASF13:
	.string	"_Bool"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF16:
	.string	"ft_strchr"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strchr.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_strrchr.o/   0           0     0     644     9755      `
	.file	"ft_strrchr.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strrchr.c"
	.p2align 4
	.globl	ft_strrchr
	.type	ft_strrchr, @function
ft_strrchr:
.LVL0:
.LFB0:
	.file 1 "ft_strrchr.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strrchr.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
	.loc 1 17 2 view .LVU4
.LVL1:
	.loc 1 18 2 view .LVU5
	.loc 1 18 9 view .LVU6
	movzbl	(%rdi), %edx	# *s_8(D), _2
# ft_strrchr.c:20: 	while (*s != (char)c && s != start)
	.loc 1 20 12 is_stmt 0 view .LVU7
	movl	%esi, %ecx	# c, _46
# ft_strrchr.c:18: 	while (*s)
	.loc 1 18 9 view .LVU8
	movq	%rdi, %rax	# s, <retval>
	testb	%dl, %dl	# _2
	je	.L2	#,
.LVL2:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 19 3 is_stmt 1 view .LVU9
# ft_strrchr.c:18: 	while (*s)
	.loc 1 18 9 is_stmt 0 view .LVU10
	movzbl	1(%rax), %edx	# MEM[(const char *)s_14], _2
# ft_strrchr.c:19: 		s++;
	.loc 1 19 4 view .LVU11
	incq	%rax	# <retval>
.LVL3:
	.loc 1 18 9 is_stmt 1 view .LVU12
	testb	%dl, %dl	# _2
	jne	.L3	#,
	.loc 1 20 23 view .LVU13
# ft_strrchr.c:20: 	while (*s != (char)c && s != start)
	.loc 1 20 23 is_stmt 0 discriminator 1 view .LVU14
	cmpq	%rax, %rdi	# <retval>, s
	je	.L2	#,
	testb	%sil, %sil	# c
	jne	.L4	#,
	jmp	.L2	#
	.p2align 4,,10
	.p2align 3
.L20:
	.loc 1 20 23 discriminator 1 view .LVU15
	cmpq	%rax, %rdi	# <retval>, s
	je	.L2	#,
.L4:
	.loc 1 21 3 is_stmt 1 view .LVU16
# ft_strrchr.c:20: 	while (*s != (char)c && s != start)
	.loc 1 20 9 is_stmt 0 view .LVU17
	movzbl	-1(%rax), %edx	# MEM[(const char *)s_12], _2
# ft_strrchr.c:21: 		s--;
	.loc 1 21 4 view .LVU18
	decq	%rax	# <retval>
.LVL4:
	.loc 1 20 23 is_stmt 1 view .LVU19
# ft_strrchr.c:20: 	while (*s != (char)c && s != start)
	.loc 1 20 23 is_stmt 0 discriminator 1 view .LVU20
	cmpb	%cl, %dl	# _46, _2
	jne	.L20	#,
.L2:
.LVL5:
	.loc 1 22 2 is_stmt 1 view .LVU21
# ft_strrchr.c:24: 	return (0);
	.loc 1 24 9 is_stmt 0 view .LVU22
	cmpb	%sil, %dl	# c, _2
	movl	$0, %edx	#, tmp102
# ft_strrchr.c:25: }
	.loc 1 25 1 view .LVU23
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_strrchr.c:24: 	return (0);
	.loc 1 24 9 view .LVU24
	cmovne	%rdx, %rax	# <retval>,, tmp102, <retval>
# ft_strrchr.c:25: }
	.loc 1 25 1 view .LVU25
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_strrchr, .-ft_strrchr
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x9d
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x2
	.long	.LASF3
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x3
	.long	.LASF4
	.byte	0x1
	.byte	0xd
	.byte	0x7
	.long	0x83
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x83
	.uleb128 0x4
	.string	"s"
	.byte	0x1
	.byte	0xd
	.byte	0x1e
	.long	0x94
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.string	"c"
	.byte	0x1
	.byte	0xd
	.byte	0x25
	.long	0x99
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x6
	.long	.LASF5
	.byte	0x1
	.byte	0xf
	.byte	0xe
	.long	0x94
	.long	.LLST1
	.long	.LVUS1
	.byte	0
	.uleb128 0x1
	.long	0x88
	.uleb128 0x7
	.byte	0x1
	.byte	0x6
	.long	.LASF2
	.uleb128 0x8
	.long	0x88
	.uleb128 0x1
	.long	0x8f
	.uleb128 0x9
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU21
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS1:
	.uleb128 .LVU5
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"ft_strrchr"
.LASF5:
	.string	"start"
.LASF3:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF2:
	.string	"char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strrchr.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strncmp.o/   0           0     0     644     14928     `
	.file	"ft_strncmp.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strncmp.c"
	.p2align 4
	.globl	ft_strncmp
	.type	ft_strncmp, @function
ft_strncmp:
.LVL0:
.LFB51:
	.file 1 "ft_strncmp.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strncmp.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
.LVL1:
	.loc 1 21 2 view .LVU6
	.loc 1 22 2 view .LVU7
	.loc 1 22 29 view .LVU8
	testq	%rdx, %rdx	# n
	jne	.L2	#,
	jmp	.L7	#
.LVL2:
	.p2align 4,,10
	.p2align 3
.L16:
# ft_strncmp.c:22: 	while (n && *str1 && *str2 && !(*str1 - *str2))
	.loc 1 22 23 is_stmt 0 discriminator 2 view .LVU9
	movzbl	(%rsi), %ecx	# MEM[(const unsigned char *)str2_29], _2
# ft_strncmp.c:22: 	while (n && *str1 && *str2 && !(*str1 - *str2))
	.loc 1 22 29 discriminator 3 view .LVU10
	cmpb	%cl, %al	# _2, _1
	jne	.L4	#,
	.loc 1 22 29 discriminator 3 view .LVU11
	testb	%cl, %cl	# _2
	je	.L4	#,
	.loc 1 24 3 is_stmt 1 view .LVU12
# ft_strncmp.c:24: 		str1++;
	.loc 1 24 7 is_stmt 0 view .LVU13
	incq	%rdi	# s1
.LVL3:
	.loc 1 25 3 is_stmt 1 view .LVU14
# ft_strncmp.c:25: 		str2++;
	.loc 1 25 7 is_stmt 0 view .LVU15
	incq	%rsi	# s2
.LVL4:
	.loc 1 26 3 is_stmt 1 view .LVU16
	.loc 1 22 29 view .LVU17
	decq	%rdx	# n
.LVL5:
	.loc 1 22 29 is_stmt 0 view .LVU18
	je	.L7	#,
.L2:
# ft_strncmp.c:22: 	while (n && *str1 && *str2 && !(*str1 - *str2))
	.loc 1 22 14 discriminator 1 view .LVU19
	movzbl	(%rdi), %eax	# MEM[(const unsigned char *)str1_27], _1
# ft_strncmp.c:22: 	while (n && *str1 && *str2 && !(*str1 - *str2))
	.loc 1 22 11 discriminator 1 view .LVU20
	testb	%al, %al	# _1
	jne	.L16	#,
.L4:
	.loc 1 28 2 is_stmt 1 view .LVU21
	.loc 1 29 3 view .LVU22
# ft_strncmp.c:29: 		return (*str1 - *str2);
	.loc 1 29 11 is_stmt 0 view .LVU23
	movzbl	(%rdi), %eax	# *str1_27, *str1_27
# ft_strncmp.c:29: 		return (*str1 - *str2);
	.loc 1 29 19 view .LVU24
	movzbl	(%rsi), %edx	# *str2_29, *str2_29
.LVL6:
# ft_strncmp.c:31: }
	.loc 1 31 1 view .LVU25
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_strncmp.c:29: 		return (*str1 - *str2);
	.loc 1 29 17 view .LVU26
	subl	%edx, %eax	# *str2_29, <retval>
# ft_strncmp.c:31: }
	.loc 1 31 1 view .LVU27
	ret	
.LVL7:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
# ft_strncmp.c:30: 	return (0);
	.loc 1 30 9 view .LVU28
	xorl	%eax, %eax	# <retval>
# ft_strncmp.c:31: }
	.loc 1 31 1 view .LVU29
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_strncmp, .-ft_strncmp
	.p2align 4
	.globl	ft_strcmp
	.type	ft_strcmp, @function
ft_strcmp:
.LVL8:
.LFB52:
	.loc 1 34 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 34 1 is_stmt 0 view .LVU31
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strncmp.c:34: {
	.loc 1 34 1 view .LVU32
	.loc 1 35 2 is_stmt 1 view .LVU33
	.loc 1 35 9 view .LVU34
	movsbl	(%rdi), %eax	#* s1,
	testb	%al, %al	# _6
	jne	.L21	#,
	jmp	.L18	#
	.p2align 4,,10
	.p2align 3
.L19:
	.loc 1 39 3 view .LVU35
# ft_strncmp.c:35: 	while (*s1)
	.loc 1 35 9 is_stmt 0 view .LVU36
	movsbl	1(%rdi), %eax	#,
# ft_strncmp.c:39: 		s1++;
	.loc 1 39 5 view .LVU37
	incq	%rdi	# s1
.LVL9:
	.loc 1 40 3 is_stmt 1 view .LVU38
# ft_strncmp.c:40: 		s2++;
	.loc 1 40 5 is_stmt 0 view .LVU39
	incq	%rsi	# s2
.LVL10:
	.loc 1 35 9 is_stmt 1 view .LVU40
	testb	%al, %al	# _6
	je	.L18	#,
.L21:
	.loc 1 37 3 view .LVU41
# ft_strncmp.c:37: 		if (*s1 != *s2)
	.loc 1 37 14 is_stmt 0 view .LVU42
	movsbl	(%rsi), %edx	# MEM[(const char *)s2_22],
# ft_strncmp.c:37: 		if (*s1 != *s2)
	.loc 1 37 6 view .LVU43
	cmpb	%al, %dl	# _6, _2
	je	.L19	#,
	.loc 1 38 4 is_stmt 1 view .LVU44
# ft_strncmp.c:38: 			return (*s1 - *s2);
	.loc 1 38 16 is_stmt 0 view .LVU45
	subl	%edx, %eax	# _2, <retval>
# ft_strncmp.c:43: }
	.loc 1 43 1 view .LVU46
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
	.p2align 4,,10
	.p2align 3
.L18:
	.cfi_restore_state
	.loc 1 42 2 is_stmt 1 view .LVU47
# ft_strncmp.c:42: 	return (*s1 - *s2);
	.loc 1 42 16 is_stmt 0 view .LVU48
	movsbl	(%rsi), %eax	# *s2_23, *s2_23
# ft_strncmp.c:43: }
	.loc 1 43 1 view .LVU49
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_strncmp.c:42: 	return (*s1 - *s2);
	.loc 1 42 14 view .LVU50
	negl	%eax	# <retval>
# ft_strncmp.c:43: }
	.loc 1 43 1 view .LVU51
	ret	
	.cfi_endproc
.LFE52:
	.size	ft_strcmp, .-ft_strcmp
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x15e
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x7
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x8
	.long	.LASF18
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x9
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x3
	.long	0x5d
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x3
	.long	0x85
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x4
	.long	0x8c
	.uleb128 0x5
	.long	.LASF13
	.byte	0x21
	.long	0x48
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0xe2
	.uleb128 0x2
	.string	"s1"
	.byte	0x21
	.byte	0x1b
	.long	0x98
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x2
	.string	"s2"
	.byte	0x21
	.byte	0x2b
	.long	0x98
	.long	.LLST6
	.long	.LVUS6
	.byte	0
	.uleb128 0x5
	.long	.LASF14
	.byte	0xf
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x15c
	.uleb128 0x2
	.string	"s1"
	.byte	0xf
	.byte	0x1c
	.long	0x98
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x2
	.string	"s2"
	.byte	0xf
	.byte	0x2c
	.long	0x98
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x2
	.string	"n"
	.byte	0xf
	.byte	0x37
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x6
	.long	.LASF15
	.byte	0x11
	.long	0x15c
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x6
	.long	.LASF16
	.byte	0x12
	.long	0x15c
	.long	.LLST4
	.long	.LVUS4
	.byte	0
	.uleb128 0x4
	.long	0x64
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 23
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS5:
	.uleb128 0
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS6:
	.uleb128 0
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU25
	.uleb128 .LVU28
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS3:
	.uleb128 .LVU6
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS4:
	.uleb128 .LVU7
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF18:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.string	"ft_strcmp"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF14:
	.string	"ft_strncmp"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF15:
	.string	"str1"
.LASF16:
	.string	"str2"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_strncmp.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_memchr.o/    0           0     0     644     11767     `
	.file	"ft_memchr.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_memchr.c"
	.p2align 4
	.globl	ft_memchr
	.type	ft_memchr, @function
ft_memchr:
.LVL0:
.LFB51:
	.file 1 "ft_memchr.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_memchr.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
.LVL1:
	.loc 1 21 2 view .LVU6
	.loc 1 22 2 view .LVU7
	.loc 1 22 9 view .LVU8
# ft_memchr.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU9
	movq	%rdi, %rax	# tmp90, s
# ft_memchr.c:22: 	while (n--)
	.loc 1 22 9 view .LVU10
	testq	%rdx, %rdx	# n
	je	.L4	#,
	addq	%rdi, %rdx	# s, _3
.LVL2:
	.loc 1 22 9 view .LVU11
	jmp	.L3	#
.LVL3:
	.p2align 4,,10
	.p2align 3
.L7:
	.loc 1 26 3 is_stmt 1 view .LVU12
# ft_memchr.c:26: 		str++;
	.loc 1 26 6 is_stmt 0 view .LVU13
	incq	%rax	# <retval>
.LVL4:
	.loc 1 22 9 is_stmt 1 view .LVU14
	.loc 1 22 9 is_stmt 0 view .LVU15
	cmpq	%rax, %rdx	# <retval>, _3
	je	.L4	#,
.LVL5:
.L3:
	.loc 1 24 3 is_stmt 1 view .LVU16
# ft_memchr.c:24: 		if (*str == ch)
	.loc 1 24 6 is_stmt 0 view .LVU17
	cmpb	%sil, (%rax)	# ch, MEM[(const unsigned char *)str_15]
	jne	.L7	#,
# ft_memchr.c:29: }
	.loc 1 29 1 view .LVU18
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL6:
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
# ft_memchr.c:28: 	return (0);
	.loc 1 28 9 view .LVU19
	xorl	%eax, %eax	# <retval>
# ft_memchr.c:29: }
	.loc 1 29 1 view .LVU20
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_memchr, .-ft_memchr
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x10b
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF13
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x6
	.long	.LASF14
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x7
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x8
	.long	0x5d
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x9
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x9a
	.uleb128 0xa
	.uleb128 0xb
	.long	.LASF15
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x85
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x109
	.uleb128 0x3
	.string	"s"
	.byte	0x1d
	.long	0x95
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.string	"c"
	.byte	0x24
	.long	0x48
	.uleb128 0x1
	.byte	0x54
	.uleb128 0xc
	.string	"n"
	.byte	0x1
	.byte	0xf
	.byte	0x2e
	.long	0x35
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.string	"str"
	.byte	0x11
	.byte	0x17
	.long	0x109
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x4
	.string	"ch"
	.byte	0x12
	.byte	0x11
	.long	0x5d
	.long	.LLST2
	.long	.LVUS2
	.byte	0
	.uleb128 0x2
	.long	0x64
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU19
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x6
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x31
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0xb
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x22
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0xa
	.byte	0x75
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0xb
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x22
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 .LVU7
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU19
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS2:
	.uleb128 .LVU6
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF8:
	.string	"unsigned int"
.LASF14:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF15:
	.string	"ft_memchr"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_memchr.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_memcmp.o/    0           0     0     644     12963     `
	.file	"ft_memcmp.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_memcmp.c"
	.p2align 4
	.globl	ft_memcmp
	.type	ft_memcmp, @function
ft_memcmp:
.LVL0:
.LFB51:
	.file 1 "ft_memcmp.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_memcmp.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
.LVL1:
	.loc 1 21 2 view .LVU6
	.loc 1 22 2 view .LVU7
# ft_memcmp.c:22: 	while (n--)
	.loc 1 22 8 is_stmt 0 view .LVU8
	xorl	%eax, %eax	# ivtmp.7
	jmp	.L2	#
.LVL2:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 24 3 is_stmt 1 view .LVU9
# ft_memcmp.c:24: 		if (*(str1++) - *(str2++))
	.loc 1 24 7 is_stmt 0 view .LVU10
	movzbl	(%rdi,%rax), %ecx	# MEM[(const unsigned char *)s1_11(D) + ivtmp.7_19 * 1], _1
.LVL3:
# ft_memcmp.c:24: 		if (*(str1++) - *(str2++))
	.loc 1 24 6 view .LVU11
	incq	%rax	# ivtmp.7
.LVL4:
# ft_memcmp.c:24: 		if (*(str1++) - *(str2++))
	.loc 1 24 19 view .LVU12
	movzbl	-1(%rsi,%rax), %r8d	# MEM[(const unsigned char *)s2_12(D) + -1B + ivtmp.7_5 * 1], _2
# ft_memcmp.c:24: 		if (*(str1++) - *(str2++))
	.loc 1 24 6 view .LVU13
	cmpb	%r8b, %cl	# _2, _1
	jne	.L7	#,
.LVL5:
.L2:
	.loc 1 22 9 is_stmt 1 view .LVU14
	.loc 1 22 9 is_stmt 0 view .LVU15
	cmpq	%rax, %rdx	# ivtmp.7, n
	jne	.L4	#,
# ft_memcmp.c:27: 	return (0);
	.loc 1 27 9 view .LVU16
	xorl	%eax, %eax	# <retval>
.LVL6:
# ft_memcmp.c:28: }
	.loc 1 28 1 view .LVU17
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL7:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
	.loc 1 25 4 is_stmt 1 view .LVU18
# ft_memcmp.c:25: 			return (*(--str1) - *(--str2));
	.loc 1 25 12 is_stmt 0 view .LVU19
	movzbl	%cl, %eax	# _1, _1
.LVL8:
# ft_memcmp.c:25: 			return (*(--str1) - *(--str2));
	.loc 1 25 24 view .LVU20
	movzbl	%r8b, %r8d	# _2, _2
# ft_memcmp.c:28: }
	.loc 1 28 1 view .LVU21
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_memcmp.c:25: 			return (*(--str1) - *(--str2));
	.loc 1 25 22 view .LVU22
	subl	%r8d, %eax	# _2, <retval>
# ft_memcmp.c:28: }
	.loc 1 28 1 view .LVU23
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_memcmp, .-ft_memcmp
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x10a
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x6
	.long	.LASF16
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x7
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x8
	.long	0x5d
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x98
	.uleb128 0x9
	.uleb128 0xa
	.long	.LASF17
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x108
	.uleb128 0x3
	.string	"s1"
	.byte	0x1b
	.long	0x93
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.string	"s2"
	.byte	0x2b
	.long	0x93
	.uleb128 0x1
	.byte	0x54
	.uleb128 0xb
	.string	"n"
	.byte	0x1
	.byte	0xf
	.byte	0x36
	.long	0x35
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.long	.LASF13
	.byte	0x11
	.long	0x108
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x4
	.long	.LASF14
	.byte	0x12
	.long	0x108
	.long	.LLST2
	.long	.LVUS2
	.byte	0
	.uleb128 0x2
	.long	0x64
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 24
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU17
	.uleb128 .LVU18
	.uleb128 .LVU20
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x6
	.byte	0x71
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x71
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x6
	.byte	0x71
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 .LVU6
	.uleb128 .LVU9
	.uleb128 .LVU10
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU14
	.uleb128 .LVU18
	.uleb128 .LVU19
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x8
	.byte	0x70
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x75
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU7
	.uleb128 .LVU9
	.uleb128 .LVU11
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU14
	.uleb128 .LVU18
	.uleb128 .LVU19
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x8
	.byte	0x70
	.sleb128 0
	.byte	0x74
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x74
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x74
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF16:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF13:
	.string	"str1"
.LASF14:
	.string	"str2"
.LASF17:
	.string	"ft_memcmp"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_memcmp.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strnstr.o/   0           0     0     644     15717     `
	.file	"ft_strnstr.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strnstr.c"
	.p2align 4
	.globl	ft_strnstr
	.type	ft_strnstr, @function
ft_strnstr:
.LVL0:
.LFB51:
	.file 1 "ft_strnstr.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_strnstr.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
# ft_strnstr.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movq	%rsi, %r13	# tmp99, needle
	movq	%rdi, %rbx	# tmp98, haystack
	movq	%rdx, %r15	# tmp100, len
# ft_strnstr.c:20: 	haystack_len = ft_strlen(haystack);
	.loc 1 20 17 view .LVU7
	call	ft_strlen@PLT	#
.LVL1:
# ft_strnstr.c:21: 	needle_len = ft_strlen(needle);
	.loc 1 21 15 view .LVU8
	movq	%r13, %rdi	# needle,
# ft_strnstr.c:20: 	haystack_len = ft_strlen(haystack);
	.loc 1 20 17 view .LVU9
	movq	%rax, %r14	# tmp101, haystack_len
.LVL2:
	.loc 1 21 2 is_stmt 1 view .LVU10
# ft_strnstr.c:21: 	needle_len = ft_strlen(needle);
	.loc 1 21 15 is_stmt 0 view .LVU11
	call	ft_strlen@PLT	#
.LVL3:
	.loc 1 21 15 view .LVU12
	movq	%rax, %r12	# tmp102, needle_len
.LVL4:
	.loc 1 22 2 is_stmt 1 view .LVU13
	.loc 1 24 2 view .LVU14
# ft_strnstr.c:24: 	if (!needle_len)
	.loc 1 24 5 is_stmt 0 view .LVU15
	testq	%rax, %rax	# needle_len
	je	.L1	#,
# ft_strnstr.c:22: 	if (haystack_len < len)
	.loc 1 22 5 view .LVU16
	cmpq	%r15, %r14	# len, haystack_len
	cmova	%r15, %r14	# haystack_len,, len, _18
.LVL5:
	.loc 1 26 15 is_stmt 1 view .LVU17
	.loc 1 26 15 is_stmt 0 view .LVU18
	leaq	(%rbx,%r14), %r15	#, tmp97
	cmpq	%rax, %r14	# needle_len, _18
	jnb	.L3	#,
	jmp	.L4	#
.LVL6:
	.p2align 4,,10
	.p2align 3
.L14:
	.loc 1 29 4 is_stmt 1 view .LVU19
# ft_strnstr.c:29: 			haystack++;
	.loc 1 29 12 is_stmt 0 view .LVU20
	incq	%rbx	# <retval>
.LVL7:
	.loc 1 26 15 is_stmt 1 view .LVU21
	.loc 1 26 15 is_stmt 0 view .LVU22
	movq	%r15, %rax	# tmp97, len
	subq	%rbx, %rax	# <retval>, len
	cmpq	%r12, %rax	# needle_len, len
	jb	.L4	#,
.L3:
.LVL8:
	.loc 1 28 3 is_stmt 1 view .LVU23
# ft_strnstr.c:28: 		if (ft_strncmp(haystack, needle, needle_len))
	.loc 1 28 7 is_stmt 0 view .LVU24
	movq	%r12, %rdx	# needle_len,
	movq	%r13, %rsi	# needle,
	movq	%rbx, %rdi	# <retval>,
	call	ft_strncmp@PLT	#
.LVL9:
# ft_strnstr.c:28: 		if (ft_strncmp(haystack, needle, needle_len))
	.loc 1 28 6 discriminator 1 view .LVU25
	testl	%eax, %eax	# tmp103
	jne	.L14	#,
.LVL10:
.L1:
# ft_strnstr.c:34: }
	.loc 1 34 1 view .LVU26
	addq	$8, %rsp	#,
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
.LVL11:
	.loc 1 34 1 view .LVU27
	popq	%r13	#
.LVL12:
	.loc 1 34 1 view .LVU28
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL13:
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
# ft_strnstr.c:33: 	return (0);
	.loc 1 33 9 view .LVU29
	xorl	%ebx, %ebx	# <retval>
.LVL14:
	.loc 1 33 9 view .LVU30
	jmp	.L1	#
	.cfi_endproc
.LFE51:
	.size	ft_strnstr, .-ft_strnstr
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x199
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x9
	.long	.LASF19
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xa
	.long	.LASF20
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xb
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x4
	.long	0x85
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xc
	.long	0x85
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x4
	.long	0x8c
	.uleb128 0x5
	.long	.LASF13
	.byte	0x2e
	.byte	0x6
	.long	0x48
	.long	0xbc
	.uleb128 0x3
	.long	0x98
	.uleb128 0x3
	.long	0x98
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x5
	.long	.LASF14
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xd1
	.uleb128 0x3
	.long	0x98
	.byte	0
	.uleb128 0xd
	.long	.LASF21
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x80
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x6
	.long	.LASF15
	.byte	0x1e
	.long	0x98
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x6
	.long	.LASF16
	.byte	0x34
	.long	0x98
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xe
	.string	"len"
	.byte	0x1
	.byte	0xf
	.byte	0x43
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x7
	.long	.LASF17
	.byte	0x11
	.long	0x35
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x7
	.long	.LASF18
	.byte	0x12
	.long	0x35
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x8
	.quad	.LVL1
	.long	0xbc
	.long	0x163
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x8
	.quad	.LVL3
	.long	0xbc
	.long	0x17b
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0xf
	.quad	.LVL9
	.long	0x9d
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 9
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU26
	.uleb128 .LVU29
	.uleb128 .LVU30
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU17
	.uleb128 .LVU18
	.uleb128 .LVU19
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x24
	.byte	0x7e
	.sleb128 0
	.byte	0x12
	.byte	0x23
	.uleb128 0x8000000000000000
	.byte	0x7f
	.sleb128 0
	.byte	0x16
	.byte	0x14
	.byte	0x23
	.uleb128 0x8000000000000000
	.byte	0x2d
	.byte	0x28
	.value	0x1
	.byte	0x16
	.byte	0x13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x3
	.byte	0x7e
	.sleb128 -1
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 .LVU10
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU17
.LLST3:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS4:
	.uleb128 .LVU13
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU27
	.uleb128 .LVU29
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF18:
	.string	"needle_len"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF19:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF15:
	.string	"haystack"
.LASF16:
	.string	"needle"
.LASF13:
	.string	"ft_strncmp"
.LASF21:
	.string	"ft_strnstr"
.LASF9:
	.string	"signed char"
.LASF14:
	.string	"ft_strlen"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF17:
	.string	"haystack_len"
.LASF7:
	.string	"short unsigned int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strnstr.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_atoi.o/      0           0     0     644     18422     `
	.file	"ft_atoi.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_atoi.c"
	.p2align 4
	.globl	ft_atoi
	.type	ft_atoi, @function
ft_atoi:
.LVL0:
.LFB52:
	.file 1 "ft_atoi.c"
	.loc 1 23 1 view -0
	.cfi_startproc
	.loc 1 23 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# ft_atoi.c:23: {
	.loc 1 23 1 view .LVU2
	.loc 1 24 2 is_stmt 1 view .LVU3
	.loc 1 25 2 view .LVU4
	.loc 1 26 2 view .LVU5
	.loc 1 28 2 view .LVU6
.LVL1:
	.loc 1 29 2 view .LVU7
	.loc 1 30 2 view .LVU8
	.loc 1 30 13 view .LVU9
# ft_atoi.c:23: {
	.loc 1 23 1 is_stmt 0 view .LVU10
	movq	%rdi, %rbx	# tmp124, str
# ft_atoi.c:30: 	while (str && white_space(*str))
	.loc 1 30 13 view .LVU11
	testq	%rdi, %rdi	# str
	je	.L11	#,
.LVL2:
.L18:
	.loc 1 30 13 is_stmt 1 view .LVU12
# ft_atoi.c:30: 	while (str && white_space(*str))
	.loc 1 30 28 is_stmt 0 discriminator 1 view .LVU13
	movzbl	(%rbx), %eax	#* str, _45
.LVL3:
.LBB4:
.LBI4:
	.loc 1 15 12 is_stmt 1 view .LVU14
.LBB5:
	.loc 1 17 2 view .LVU15
# ft_atoi.c:17: 	if ((c >= 9 && c <= 13) || c == ' ')
	.loc 1 17 14 is_stmt 0 view .LVU16
	leal	-9(%rax), %edx	#, tmp109
# ft_atoi.c:17: 	if ((c >= 9 && c <= 13) || c == ' ')
	.loc 1 17 5 view .LVU17
	cmpb	$4, %dl	#, tmp109
	jbe	.L15	#,
	cmpb	$32, %al	#, _45
	je	.L15	#,
.LVL4:
	.loc 1 17 5 view .LVU18
.LBE5:
.LBE4:
	.loc 1 32 2 is_stmt 1 view .LVU19
# ft_atoi.c:32: 	if (str && *str == '-')
	.loc 1 32 10 is_stmt 0 discriminator 1 view .LVU20
	cmpb	$45, %al	#, _45
	je	.L20	#,
	.loc 1 37 7 is_stmt 1 view .LVU21
# ft_atoi.c:37: 	else if (str && *str == '+')
	.loc 1 37 15 is_stmt 0 discriminator 1 view .LVU22
	cmpb	$43, %al	#, _45
# ft_atoi.c:29: 	sign = 1;
	.loc 1 29 7 view .LVU23
	movl	$1, %r13d	#, sign
# ft_atoi.c:38: 		str++;
	.loc 1 38 6 view .LVU24
	sete	%al	#, tmp127
	movzbl	%al, %eax	# tmp127, tmp126
	addq	%rax, %rbx	# tmp126, str
.LVL5:
.L7:
# ft_atoi.c:35: 		sign = -1;
	.loc 1 35 8 view .LVU25
	xorl	%r14d, %r14d	# num
# ft_atoi.c:44: 			digit = -digit;
	.loc 1 44 10 view .LVU26
	movl	$48, %r12d	#, tmp123
	jmp	.L9	#
.LVL6:
	.p2align 4,,10
	.p2align 3
.L10:
	.loc 1 41 3 is_stmt 1 view .LVU27
# ft_atoi.c:42: 		digit = (int)(*str - '0');
	.loc 1 42 17 is_stmt 0 view .LVU28
	movsbl	(%rbx), %eax	# MEM[(const char *)str_41], _5
# ft_atoi.c:44: 			digit = -digit;
	.loc 1 44 10 view .LVU29
	movl	%r12d, %ecx	# tmp123, tmp122
# ft_atoi.c:41: 		num *= 10;
	.loc 1 41 7 view .LVU30
	leal	(%r14,%r14,4), %edx	#, tmp116
.LVL7:
	.loc 1 42 3 is_stmt 1 view .LVU31
	.loc 1 43 3 view .LVU32
# ft_atoi.c:44: 			digit = -digit;
	.loc 1 44 10 is_stmt 0 view .LVU33
	subl	%eax, %ecx	# _5, tmp122
	subl	$48, %eax	#, digit
.LVL8:
	.loc 1 44 10 view .LVU34
	cmovs	%ecx, %eax	# tmp122,, digit
.LVL9:
	.loc 1 45 3 is_stmt 1 view .LVU35
# ft_atoi.c:46: 		str++;
	.loc 1 46 6 is_stmt 0 view .LVU36
	incq	%rbx	# str
.LVL10:
# ft_atoi.c:45: 		num += digit;
	.loc 1 45 7 view .LVU37
	leal	(%rax,%rdx,2), %r14d	#, num
.LVL11:
	.loc 1 46 3 is_stmt 1 view .LVU38
	.loc 1 39 13 view .LVU39
.L9:
# ft_atoi.c:39: 	while (str && ft_isdigit(*str))
	.loc 1 39 16 is_stmt 0 discriminator 1 view .LVU40
	movsbl	(%rbx), %edi	# MEM[(const char *)str_41], MEM[(const char *)str_41]
	call	ft_isdigit@PLT	#
.LVL12:
# ft_atoi.c:39: 	while (str && ft_isdigit(*str))
	.loc 1 39 13 discriminator 1 view .LVU41
	testl	%eax, %eax	# tmp125
	jne	.L10	#,
# ft_atoi.c:48: 	return (num * sign);
	.loc 1 48 14 view .LVU42
	movl	%r14d, %eax	# num, num
	imull	%r13d, %eax	# sign, num
.LVL13:
.L1:
# ft_atoi.c:49: }
	.loc 1 49 1 view .LVU43
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL14:
	.p2align 4,,10
	.p2align 3
.L15:
	.cfi_restore_state
.LBB7:
.LBB6:
	.loc 1 18 3 is_stmt 1 view .LVU44
	.loc 1 18 3 is_stmt 0 view .LVU45
.LBE6:
.LBE7:
	.loc 1 31 3 is_stmt 1 view .LVU46
# ft_atoi.c:31: 		str++;
	.loc 1 31 6 is_stmt 0 view .LVU47
	incq	%rbx	# str
.LVL15:
	.loc 1 31 6 view .LVU48
	jmp	.L18	#
.LVL16:
	.p2align 4,,10
	.p2align 3
.L20:
	.loc 1 34 3 is_stmt 1 view .LVU49
# ft_atoi.c:34: 		str++;
	.loc 1 34 6 is_stmt 0 view .LVU50
	incq	%rbx	# str
.LVL17:
	.loc 1 35 3 is_stmt 1 view .LVU51
	.loc 1 39 13 view .LVU52
# ft_atoi.c:35: 		sign = -1;
	.loc 1 35 8 is_stmt 0 view .LVU53
	movl	$-1, %r13d	#, sign
	jmp	.L7	#
.LVL18:
.L11:
# ft_atoi.c:30: 	while (str && white_space(*str))
	.loc 1 30 13 view .LVU54
	xorl	%eax, %eax	# <retval>
.LVL19:
	.loc 1 48 2 is_stmt 1 view .LVU55
# ft_atoi.c:48: 	return (num * sign);
	.loc 1 48 14 is_stmt 0 view .LVU56
	jmp	.L1	#
	.cfi_endproc
.LFE52:
	.size	ft_atoi, .-ft_atoi
.Letext0:
	.file 2 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x15b
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x3
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x5
	.long	0x74
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x6
	.byte	0x8
	.long	0x7b
	.uleb128 0x7
	.long	.LASF16
	.byte	0x2
	.byte	0x19
	.byte	0x6
	.long	0x3c
	.long	0xa3
	.uleb128 0x8
	.long	0x3c
	.byte	0
	.uleb128 0x9
	.long	.LASF17
	.byte	0x1
	.byte	0x16
	.byte	0x5
	.long	0x3c
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x146
	.uleb128 0xa
	.string	"str"
	.byte	0x1
	.byte	0x16
	.byte	0x19
	.long	0x87
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xb
	.string	"num"
	.byte	0x1
	.byte	0x18
	.byte	0x6
	.long	0x3c
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x2
	.long	.LASF13
	.byte	0x19
	.long	0x3c
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x2
	.long	.LASF14
	.byte	0x1a
	.long	0x3c
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xc
	.long	0x146
	.quad	.LBI4
	.byte	.LVU14
	.long	.LLRL4
	.byte	0x1
	.byte	0x1e
	.byte	0x10
	.long	0x138
	.uleb128 0xd
	.long	0x153
	.long	.LLST5
	.long	.LVUS5
	.byte	0
	.uleb128 0xe
	.quad	.LVL12
	.long	0x8d
	.byte	0
	.uleb128 0xf
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0xc
	.long	0x3c
	.byte	0x1
	.uleb128 0x10
	.string	"c"
	.byte	0x1
	.byte	0xf
	.byte	0x1d
	.long	0x74
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU25
	.uleb128 .LVU27
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU43
	.uleb128 .LVU44
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU55
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 .LVU7
	.uleb128 .LVU25
	.uleb128 .LVU27
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU43
	.uleb128 .LVU44
	.uleb128 .LVU55
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x5
	.byte	0x71
	.sleb128 0
	.byte	0x31
	.byte	0x24
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU8
	.uleb128 .LVU25
	.uleb128 .LVU44
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 .LVU55
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 .LVU32
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU40
.LLST3:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -48
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0xe
	.byte	0x73
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0x38
	.byte	0x24
	.byte	0x8
	.byte	0x38
	.byte	0x26
	.byte	0x8
	.byte	0x30
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0xe
	.byte	0x73
	.sleb128 -1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0x38
	.byte	0x24
	.byte	0x8
	.byte	0x38
	.byte	0x26
	.byte	0x8
	.byte	0x30
	.byte	0x1c
	.byte	0x9f
	.byte	0
.LVUS5:
	.uleb128 .LVU14
	.uleb128 .LVU18
	.uleb128 .LVU44
	.uleb128 .LVU45
.LLST5:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL4:
	.byte	0x4
	.uleb128 .LBB4-.Ltext0
	.uleb128 .LBE4-.Ltext0
	.byte	0x4
	.uleb128 .LBB7-.Ltext0
	.uleb128 .LBE7-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF8:
	.string	"unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF17:
	.string	"ft_atoi"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.string	"sign"
.LASF18:
	.string	"white_space"
.LASF2:
	.string	"long int"
.LASF16:
	.string	"ft_isdigit"
.LASF9:
	.string	"signed char"
.LASF14:
	.string	"digit"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF11:
	.string	"char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_atoi.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_calloc.o/    0           0     0     644     13956     `
	.file	"ft_calloc.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_calloc.c"
	.p2align 4
	.globl	ft_calloc
	.type	ft_calloc, @function
ft_calloc:
.LVL0:
.LFB51:
	.file 1 "ft_calloc.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# ft_calloc.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 21 2 view .LVU6
# ft_calloc.c:21: 	bytes = count * size;
	.loc 1 21 8 is_stmt 0 view .LVU7
	movl	%edi, %ebx	# tmp99, _3
	imull	%esi, %ebx	# tmp100, _3
.LVL1:
	.loc 1 22 2 is_stmt 1 view .LVU8
# ft_calloc.c:22: 	if (!bytes)
	.loc 1 22 5 is_stmt 0 view .LVU9
	testl	%ebx, %ebx	# _3
	je	.L2	#,
	.loc 1 24 2 is_stmt 1 view .LVU10
# ft_calloc.c:24: 	buffer = (char *)malloc(bytes);
	.loc 1 24 19 is_stmt 0 view .LVU11
	movslq	%ebx, %rdi	# _3, bytes
.LVL2:
	.loc 1 24 19 view .LVU12
	call	malloc@PLT	#
.LVL3:
	.loc 1 24 19 view .LVU13
	movq	%rax, %rcx	# tmp101, <retval>
.LVL4:
	.loc 1 25 2 is_stmt 1 view .LVU14
# ft_calloc.c:25: 	if (!buffer)
	.loc 1 25 5 is_stmt 0 view .LVU15
	testq	%rax, %rax	# <retval>
	je	.L2	#,
.LVL5:
	.loc 1 30 11 is_stmt 1 view .LVU16
	testl	%ebx, %ebx	# _3
	jle	.L1	#,
# ft_calloc.c:31: 		buffer[i++] = 0;
	.loc 1 31 15 is_stmt 0 view .LVU17
	movl	%ebx, %edx	# _3, _3
	xorl	%esi, %esi	#
	movq	%rax, %rdi	# <retval>,
	call	memset@PLT	#
.LVL6:
	.loc 1 31 15 view .LVU18
	movq	%rax, %rcx	#, <retval>
.LVL7:
.L1:
# ft_calloc.c:33: }
	.loc 1 33 1 view .LVU19
	movq	-8(%rbp), %rbx	#,
.LVL8:
	.loc 1 33 1 view .LVU20
	movq	%rcx, %rax	# <retval>,
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL9:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_calloc.c:23: 		return (NULL);
	.loc 1 23 10 view .LVU21
	xorl	%ecx, %ecx	# <retval>
# ft_calloc.c:33: }
	.loc 1 33 1 view .LVU22
	movq	-8(%rbp), %rbx	#,
.LVL10:
	.loc 1 33 1 view .LVU23
	leave	
	.cfi_def_cfa 7, 8
	movq	%rcx, %rax	# <retval>,
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_calloc, .-ft_calloc
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/stdlib.h"
	.file 4 "<built-in>"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x171
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x6
	.long	.LASF18
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x7
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x8
	.byte	0x8
	.uleb128 0x9
	.byte	0x8
	.long	0x88
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0xa
	.long	.LASF19
	.byte	0x3
	.value	0x2a0
	.byte	0xe
	.long	0x80
	.long	0xad
	.uleb128 0xb
	.long	0x35
	.byte	0
	.uleb128 0xc
	.long	.LASF20
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x80
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x169
	.uleb128 0x3
	.long	.LASF13
	.byte	0x18
	.long	0x35
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x26
	.long	0x35
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x4
	.long	.LASF15
	.byte	0x11
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xd
	.string	"i"
	.byte	0x1
	.byte	0x12
	.byte	0x7
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x4
	.long	.LASF16
	.byte	0x13
	.byte	0x7
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xe
	.quad	.LVL3
	.long	0x96
	.long	0x149
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x73
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0xf
	.quad	.LVL6
	.long	0x169
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x8
	.byte	0x73
	.sleb128 0
	.byte	0xc
	.long	0xffffffff
	.byte	0x1a
	.byte	0
	.byte	0
	.uleb128 0x10
	.long	.LASF21
	.long	.LASF22
	.byte	0x4
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU14
	.uleb128 .LVU18
.LLST2:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS3:
	.uleb128 .LVU16
	.uleb128 .LVU19
.LLST3:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU8
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU23
	.uleb128 .LVU23
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x8
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x1e
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x8
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x1e
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF22:
	.string	"__builtin_memset"
.LASF18:
	.string	"size_t"
.LASF16:
	.string	"bytes"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF13:
	.string	"count"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF14:
	.string	"size"
.LASF20:
	.string	"ft_calloc"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF21:
	.string	"memset"
.LASF15:
	.string	"buffer"
.LASF19:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_calloc.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_strdup.o/    0           0     0     644     49472     `
	.file	"ft_strdup.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strdup.c"
	.p2align 4
	.globl	ft_strdup
	.type	ft_strdup, @function
ft_strdup:
.LVL0:
.LFB51:
	.file 1 "ft_strdup.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	andq	$-32, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# ft_strdup.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 21 2 view .LVU6
# ft_strdup.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rdi, %rbx	# tmp172, s1
# ft_strdup.c:21: 	if (!s1)
	.loc 1 21 5 view .LVU8
	testq	%rdi, %rdi	# s1
	je	.L4	#,
	.loc 1 23 2 is_stmt 1 view .LVU9
# ft_strdup.c:23: 	len = ft_strlen(s1);
	.loc 1 23 8 is_stmt 0 view .LVU10
	call	ft_strlen@PLT	#
.LVL1:
# ft_strdup.c:24: 	cpy = ft_calloc(len + 1, sizeof(char));
	.loc 1 24 8 view .LVU11
	movl	$1, %esi	#,
	leaq	1(%rax), %rdi	#, tmp163
# ft_strdup.c:23: 	len = ft_strlen(s1);
	.loc 1 23 8 view .LVU12
	movq	%rax, %r12	# tmp173, len
.LVL2:
	.loc 1 24 2 is_stmt 1 view .LVU13
# ft_strdup.c:24: 	cpy = ft_calloc(len + 1, sizeof(char));
	.loc 1 24 8 is_stmt 0 view .LVU14
	call	ft_calloc@PLT	#
.LVL3:
	.loc 1 24 8 view .LVU15
	movq	%rax, %rdx	# tmp174, <retval>
.LVL4:
	.loc 1 25 2 is_stmt 1 view .LVU16
# ft_strdup.c:25: 	if (!cpy)
	.loc 1 25 5 is_stmt 0 view .LVU17
	testq	%rax, %rax	# <retval>
	je	.L4	#,
.LVL5:
	.loc 1 28 9 is_stmt 1 view .LVU18
# ft_strdup.c:28: 	while (len--)
	.loc 1 28 12 is_stmt 0 view .LVU19
	leaq	-1(%r12), %rdi	#, tmp.21
.LVL6:
# ft_strdup.c:28: 	while (len--)
	.loc 1 28 9 view .LVU20
	testq	%r12, %r12	# len
	je	.L5	#,
	cmpq	$14, %rdi	#, tmp.21
	jbe	.L15	#,
	leaq	1(%rbx), %rax	#, tmp164
.LVL7:
	.loc 1 28 9 view .LVU21
	movq	%rdx, %rcx	# <retval>, tmp165
	subq	%rax, %rcx	# tmp164, tmp165
	xorl	%eax, %eax	# i
	cmpq	$30, %rcx	#, tmp165
	ja	.L71	#,
.LVL8:
	.p2align 4,,10
	.p2align 3
.L12:
	.loc 1 30 3 is_stmt 1 view .LVU22
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU23
	movzbl	(%rbx,%rax), %ecx	# MEM[(const char *)s1_12(D) + i_33 * 1], _38
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU24
	movb	%cl, (%rdx,%rax)	# _38, MEM[(char *)cpy_17 + i_33 * 1]
	.loc 1 31 3 is_stmt 1 view .LVU25
# ft_strdup.c:31: 		i++;
	.loc 1 31 4 is_stmt 0 view .LVU26
	incq	%rax	# i
.LVL9:
	.loc 1 28 9 is_stmt 1 view .LVU27
	.loc 1 28 9 is_stmt 0 view .LVU28
	cmpq	%rax, %r12	# i, len
	jne	.L12	#,
.LVL10:
.L13:
# ft_strdup.c:33: 	cpy[i] = '\0';
	.loc 1 33 5 view .LVU29
	leaq	(%rdx,%r12), %rax	#, prephitmp_5
.L5:
	.loc 1 33 2 is_stmt 1 view .LVU30
# ft_strdup.c:33: 	cpy[i] = '\0';
	.loc 1 33 9 is_stmt 0 view .LVU31
	movb	$0, (%rax)	#, *prephitmp_5
	.loc 1 34 2 is_stmt 1 view .LVU32
# ft_strdup.c:35: }
	.loc 1 35 1 is_stmt 0 view .LVU33
	leaq	-16(%rbp), %rsp	#,
	movq	%rdx, %rax	# <retval>,
	popq	%rbx	#
.LVL11:
	.loc 1 35 1 view .LVU34
	popq	%r12	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL12:
	.p2align 4,,10
	.p2align 3
.L71:
	.cfi_restore_state
	.loc 1 35 1 view .LVU35
	cmpq	$30, %rdi	#, tmp.21
	jbe	.L17	#,
	movq	%r12, %rcx	# len, tmp.20
# ft_strdup.c:28: 	while (len--)
	.loc 1 28 9 view .LVU36
	xorl	%esi, %esi	# ivtmp.43
	andq	$-32, %rcx	#, tmp.20
.LVL13:
	.p2align 4,,10
	.p2align 3
.L8:
	.loc 1 30 3 is_stmt 1 view .LVU37
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 is_stmt 0 view .LVU38
	vmovdqu	(%rbx,%rsi), %ymm0	# MEM <const vector(32) char> [(const char *)s1_12(D) + ivtmp.43_31 * 1], tmp178
	vmovdqu	%ymm0, (%rdx,%rsi)	# tmp178, MEM <vector(32) char> [(char *)cpy_17 + ivtmp.43_31 * 1]
	.loc 1 31 3 is_stmt 1 view .LVU39
	.loc 1 28 9 view .LVU40
	addq	$32, %rsi	#, ivtmp.43
	cmpq	%rcx, %rsi	# tmp.20, ivtmp.43
	jne	.L8	#,
	subq	%rcx, %rdi	# tmp.20, tmp.21
	cmpq	%rcx, %r12	# tmp.20, len
	je	.L68	#,
	movq	%r12, %rax	# len, niters.17
	subq	%rcx, %rax	# tmp.20, niters.17
	leaq	-1(%rax), %rsi	#, tmp168
	cmpq	$14, %rsi	#, tmp168
	jbe	.L72	#,
	vzeroupper
.LVL14:
.L7:
	.loc 1 30 3 view .LVU41
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 is_stmt 0 view .LVU42
	vmovdqu	(%rbx,%rcx), %xmm1	# MEM <const vector(16) char> [(const char *)vectp_s1.23_93], tmp180
	movq	%rax, %rsi	# niters.17, niters_vector_mult_vf.19
	andq	$-16, %rsi	#, niters_vector_mult_vf.19
	vmovdqu	%xmm1, (%rdx,%rcx)	# tmp180, MEM <vector(16) char> [(char *)vectp_cpy.26_97]
	.loc 1 31 3 is_stmt 1 view .LVU43
	.loc 1 28 9 view .LVU44
	subq	%rsi, %rdi	# niters_vector_mult_vf.19, tmp.21
	addq	%rsi, %rcx	# niters_vector_mult_vf.19, tmp.20
	testb	$15, %al	#, niters.17
	je	.L13	#,
.L10:
.LVL15:
	.loc 1 30 3 view .LVU45
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU46
	movzbl	(%rbx,%rcx), %eax	# *_3, _22
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU47
	movb	%al, (%rdx,%rcx)	# _22, *_4
	.loc 1 31 3 is_stmt 1 view .LVU48
.LVL16:
	.loc 1 28 9 view .LVU49
	.loc 1 28 9 is_stmt 0 view .LVU50
	testq	%rdi, %rdi	# tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU51
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU52
	movzbl	1(%rbx,%rcx), %eax	# *_50, _71
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU53
	movb	%al, 1(%rdx,%rcx)	# _71, *_51
	.loc 1 31 3 is_stmt 1 view .LVU54
.LVL17:
	.loc 1 28 9 view .LVU55
	.loc 1 28 9 is_stmt 0 view .LVU56
	cmpq	$1, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU57
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU58
	movzbl	2(%rbx,%rcx), %eax	# *_106, _108
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU59
	movb	%al, 2(%rdx,%rcx)	# _108, *_107
	.loc 1 31 3 is_stmt 1 view .LVU60
.LVL18:
	.loc 1 28 9 view .LVU61
	.loc 1 28 9 is_stmt 0 view .LVU62
	cmpq	$2, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU63
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU64
	movzbl	3(%rbx,%rcx), %eax	# *_115, _117
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU65
	movb	%al, 3(%rdx,%rcx)	# _117, *_116
	.loc 1 31 3 is_stmt 1 view .LVU66
.LVL19:
	.loc 1 28 9 view .LVU67
	.loc 1 28 9 is_stmt 0 view .LVU68
	cmpq	$3, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU69
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU70
	movzbl	4(%rbx,%rcx), %eax	# *_124, _126
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU71
	movb	%al, 4(%rdx,%rcx)	# _126, *_125
	.loc 1 31 3 is_stmt 1 view .LVU72
.LVL20:
	.loc 1 28 9 view .LVU73
	.loc 1 28 9 is_stmt 0 view .LVU74
	cmpq	$4, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU75
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU76
	movzbl	5(%rbx,%rcx), %eax	# *_133, _135
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU77
	movb	%al, 5(%rdx,%rcx)	# _135, *_134
	.loc 1 31 3 is_stmt 1 view .LVU78
.LVL21:
	.loc 1 28 9 view .LVU79
	.loc 1 28 9 is_stmt 0 view .LVU80
	cmpq	$5, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU81
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU82
	movzbl	6(%rbx,%rcx), %eax	# *_142, _144
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU83
	movb	%al, 6(%rdx,%rcx)	# _144, *_143
	.loc 1 31 3 is_stmt 1 view .LVU84
.LVL22:
	.loc 1 28 9 view .LVU85
	.loc 1 28 9 is_stmt 0 view .LVU86
	cmpq	$6, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU87
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU88
	movzbl	7(%rbx,%rcx), %eax	# *_151, _153
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU89
	movb	%al, 7(%rdx,%rcx)	# _153, *_152
	.loc 1 31 3 is_stmt 1 view .LVU90
.LVL23:
	.loc 1 28 9 view .LVU91
	.loc 1 28 9 is_stmt 0 view .LVU92
	cmpq	$7, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU93
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU94
	movzbl	8(%rbx,%rcx), %eax	# *_160, _162
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU95
	movb	%al, 8(%rdx,%rcx)	# _162, *_161
	.loc 1 31 3 is_stmt 1 view .LVU96
.LVL24:
	.loc 1 28 9 view .LVU97
	.loc 1 28 9 is_stmt 0 view .LVU98
	cmpq	$8, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU99
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU100
	movzbl	9(%rbx,%rcx), %eax	# *_169, _171
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU101
	movb	%al, 9(%rdx,%rcx)	# _171, *_170
	.loc 1 31 3 is_stmt 1 view .LVU102
.LVL25:
	.loc 1 28 9 view .LVU103
	.loc 1 28 9 is_stmt 0 view .LVU104
	cmpq	$9, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU105
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU106
	movzbl	10(%rbx,%rcx), %eax	# *_178, _180
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU107
	movb	%al, 10(%rdx,%rcx)	# _180, *_179
	.loc 1 31 3 is_stmt 1 view .LVU108
.LVL26:
	.loc 1 28 9 view .LVU109
	.loc 1 28 9 is_stmt 0 view .LVU110
	cmpq	$10, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU111
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU112
	movzbl	11(%rbx,%rcx), %eax	# *_187, _189
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU113
	movb	%al, 11(%rdx,%rcx)	# _189, *_188
	.loc 1 31 3 is_stmt 1 view .LVU114
.LVL27:
	.loc 1 28 9 view .LVU115
	.loc 1 28 9 is_stmt 0 view .LVU116
	cmpq	$11, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU117
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU118
	movzbl	12(%rbx,%rcx), %eax	# *_196, _198
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU119
	movb	%al, 12(%rdx,%rcx)	# _198, *_197
	.loc 1 31 3 is_stmt 1 view .LVU120
.LVL28:
	.loc 1 28 9 view .LVU121
	.loc 1 28 9 is_stmt 0 view .LVU122
	cmpq	$12, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU123
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU124
	movzbl	13(%rbx,%rcx), %eax	# *_205, _207
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU125
	movb	%al, 13(%rdx,%rcx)	# _207, *_206
	.loc 1 31 3 is_stmt 1 view .LVU126
.LVL29:
	.loc 1 28 9 view .LVU127
	.loc 1 28 9 is_stmt 0 view .LVU128
	cmpq	$13, %rdi	#, tmp.21
	je	.L13	#,
	.loc 1 30 3 is_stmt 1 view .LVU129
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU130
	movzbl	14(%rbx,%rcx), %eax	# *_76, _78
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU131
	movb	%al, 14(%rdx,%rcx)	# _78, *_77
	.loc 1 31 3 is_stmt 1 view .LVU132
.LVL30:
	.loc 1 28 9 view .LVU133
	.loc 1 28 9 is_stmt 0 view .LVU134
	jmp	.L13	#
.LVL31:
	.p2align 4,,10
	.p2align 3
.L15:
	.loc 1 28 9 view .LVU135
	xorl	%eax, %eax	# i
.LVL32:
	.loc 1 30 3 is_stmt 1 view .LVU136
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 14 is_stmt 0 view .LVU137
	movzbl	(%rbx,%rax), %ecx	# MEM[(const char *)s1_12(D) + i_33 * 1], _38
# ft_strdup.c:30: 		cpy[i] = s1[i];
	.loc 1 30 10 view .LVU138
	movb	%cl, (%rdx,%rax)	# _38, MEM[(char *)cpy_17 + i_33 * 1]
	.loc 1 31 3 is_stmt 1 view .LVU139
# ft_strdup.c:31: 		i++;
	.loc 1 31 4 is_stmt 0 view .LVU140
	incq	%rax	# i
.LVL33:
	.loc 1 28 9 is_stmt 1 view .LVU141
	.loc 1 28 9 is_stmt 0 view .LVU142
	cmpq	%rax, %r12	# i, len
	jne	.L12	#,
	jmp	.L13	#
.LVL34:
	.p2align 4,,10
	.p2align 3
.L4:
# ft_strdup.c:35: }
	.loc 1 35 1 view .LVU143
	leaq	-16(%rbp), %rsp	#,
# ft_strdup.c:22: 		return (NULL);
	.loc 1 22 10 view .LVU144
	xorl	%edx, %edx	# <retval>
# ft_strdup.c:35: }
	.loc 1 35 1 view .LVU145
	popq	%rbx	#
.LVL35:
	.loc 1 35 1 view .LVU146
	movq	%rdx, %rax	# <retval>,
	popq	%r12	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL36:
.L17:
	.cfi_restore_state
# ft_strdup.c:28: 	while (len--)
	.loc 1 28 9 view .LVU147
	movq	%r12, %rax	# len, niters.17
# ft_strdup.c:27: 	i = 0;
	.loc 1 27 4 view .LVU148
	xorl	%ecx, %ecx	# tmp.20
	jmp	.L7	#
.LVL37:
.L72:
	.loc 1 27 4 view .LVU149
	vzeroupper
.LVL38:
	jmp	.L10	#
.L68:
	vzeroupper
.LVL39:
	jmp	.L13	#
	.cfi_endproc
.LFE51:
	.size	ft_strdup, .-ft_strdup
	.p2align 4
	.globl	ft_strndup
	.type	ft_strndup, @function
ft_strndup:
.LVL40:
.LFB52:
	.loc 1 38 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 38 1 is_stmt 0 view .LVU151
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	andq	$-32, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# ft_strdup.c:38: {
	.loc 1 38 1 view .LVU152
	.loc 1 39 2 is_stmt 1 view .LVU153
	.loc 1 40 2 view .LVU154
	.loc 1 41 2 view .LVU155
	.loc 1 43 2 view .LVU156
.LVL41:
	.loc 1 44 2 view .LVU157
# ft_strdup.c:38: {
	.loc 1 38 1 is_stmt 0 view .LVU158
	movq	%rdi, %rbx	# tmp173, s1
# ft_strdup.c:44: 	if (s1)
	.loc 1 44 5 view .LVU159
	testq	%rdi, %rdi	# s1
	je	.L74	#,
	.loc 1 45 3 is_stmt 1 view .LVU160
# ft_strdup.c:45: 		len = ft_strnlen(s1, max_size);
	.loc 1 45 9 is_stmt 0 view .LVU161
	call	ft_strnlen@PLT	#
.LVL42:
# ft_strdup.c:46: 	cpy = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 46 16 view .LVU162
	movl	$1, %esi	#,
	leaq	1(%rax), %rdi	#, tmp164
# ft_strdup.c:45: 		len = ft_strnlen(s1, max_size);
	.loc 1 45 9 view .LVU163
	movq	%rax, %r12	# tmp175, len
.LVL43:
	.loc 1 46 2 is_stmt 1 view .LVU164
# ft_strdup.c:46: 	cpy = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 46 16 is_stmt 0 view .LVU165
	call	ft_calloc@PLT	#
.LVL44:
	.loc 1 46 16 view .LVU166
	movq	%rax, %rdx	# tmp176, <retval>
.LVL45:
	.loc 1 47 2 is_stmt 1 view .LVU167
# ft_strdup.c:47: 	if (!cpy)
	.loc 1 47 5 is_stmt 0 view .LVU168
	testq	%rax, %rax	# <retval>
	je	.L86	#,
.LVL46:
	.loc 1 50 9 is_stmt 1 view .LVU169
# ft_strdup.c:50: 	while (len--)
	.loc 1 50 12 is_stmt 0 view .LVU170
	leaq	-1(%r12), %rsi	#, tmp.66
.LVL47:
# ft_strdup.c:50: 	while (len--)
	.loc 1 50 9 view .LVU171
	testq	%r12, %r12	# len
	je	.L87	#,
	cmpq	$14, %rsi	#, tmp.66
	jbe	.L88	#,
	leaq	1(%rbx), %rax	#, tmp165
.LVL48:
	.loc 1 50 9 view .LVU172
	movq	%rdx, %rcx	# <retval>, tmp166
	subq	%rax, %rcx	# tmp165, tmp166
	xorl	%eax, %eax	# i
	cmpq	$30, %rcx	#, tmp166
	ja	.L143	#,
.LVL49:
	.p2align 4,,10
	.p2align 3
.L84:
	.loc 1 52 3 is_stmt 1 view .LVU173
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU174
	movzbl	(%rbx,%rax), %ecx	# MEM[(const char *)s1_13(D) + i_25 * 1], _41
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU175
	movb	%cl, (%rdx,%rax)	# _41, MEM[(char *)cpy_19 + i_25 * 1]
	.loc 1 53 3 is_stmt 1 view .LVU176
# ft_strdup.c:53: 		i++;
	.loc 1 53 4 is_stmt 0 view .LVU177
	incq	%rax	# i
.LVL50:
	.loc 1 50 9 is_stmt 1 view .LVU178
	.loc 1 50 9 is_stmt 0 view .LVU179
	cmpq	%rax, %r12	# i, len
	jne	.L84	#,
.LVL51:
.L85:
# ft_strdup.c:55: 	cpy[i] = '\0';
	.loc 1 55 5 view .LVU180
	addq	%rdx, %r12	# <retval>, _8
.L77:
	.loc 1 55 2 is_stmt 1 view .LVU181
# ft_strdup.c:55: 	cpy[i] = '\0';
	.loc 1 55 9 is_stmt 0 view .LVU182
	movb	$0, (%r12)	#, *prephitmp_9
	.loc 1 56 2 is_stmt 1 view .LVU183
.LVL52:
.L73:
# ft_strdup.c:57: }
	.loc 1 57 1 is_stmt 0 view .LVU184
	leaq	-16(%rbp), %rsp	#,
	movq	%rdx, %rax	# <retval>,
	popq	%rbx	#
.LVL53:
	.loc 1 57 1 view .LVU185
	popq	%r12	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL54:
	.p2align 4,,10
	.p2align 3
.L143:
	.cfi_restore_state
	.loc 1 57 1 view .LVU186
	cmpq	$30, %rsi	#, tmp.66
	jbe	.L90	#,
	movq	%r12, %rax	# len, tmp.65
# ft_strdup.c:50: 	while (len--)
	.loc 1 50 9 view .LVU187
	xorl	%ecx, %ecx	# ivtmp.87
	andq	$-32, %rax	#, tmp.65
.LVL55:
	.p2align 4,,10
	.p2align 3
.L80:
	.loc 1 52 3 is_stmt 1 view .LVU188
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 is_stmt 0 view .LVU189
	vmovdqu	(%rbx,%rcx), %ymm0	# MEM <const vector(32) char> [(const char *)s1_13(D) + ivtmp.87_10 * 1], tmp181
	vmovdqu	%ymm0, (%rdx,%rcx)	# tmp181, MEM <vector(32) char> [(char *)cpy_19 + ivtmp.87_10 * 1]
	.loc 1 53 3 is_stmt 1 view .LVU190
	.loc 1 50 9 view .LVU191
	addq	$32, %rcx	#, ivtmp.87
	cmpq	%rax, %rcx	# tmp.65, ivtmp.87
	jne	.L80	#,
	subq	%rax, %rsi	# tmp.65, tmp.66
	cmpq	%rax, %r12	# tmp.65, len
	je	.L141	#,
	movq	%r12, %rcx	# len, niters.62
	subq	%rax, %rcx	# tmp.65, niters.62
	leaq	-1(%rcx), %rdi	#, tmp169
	cmpq	$14, %rdi	#, tmp169
	jbe	.L144	#,
	vzeroupper
.LVL56:
.L79:
	.loc 1 52 3 view .LVU192
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 is_stmt 0 view .LVU193
	vmovdqu	(%rbx,%rax), %xmm1	# MEM <const vector(16) char> [(const char *)vectp_s1.68_96], tmp183
	movq	%rcx, %rdi	# niters.62, niters_vector_mult_vf.64
	andq	$-16, %rdi	#, niters_vector_mult_vf.64
	vmovdqu	%xmm1, (%rdx,%rax)	# tmp183, MEM <vector(16) char> [(char *)vectp_cpy.71_100]
	.loc 1 53 3 is_stmt 1 view .LVU194
	.loc 1 50 9 view .LVU195
	subq	%rdi, %rsi	# niters_vector_mult_vf.64, tmp.66
	addq	%rdi, %rax	# niters_vector_mult_vf.64, tmp.65
	andl	$15, %ecx	#, niters.62
	je	.L85	#,
.L82:
.LVL57:
	.loc 1 52 3 view .LVU196
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU197
	movzbl	(%rbx,%rax), %ecx	# *_3, _23
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU198
	movb	%cl, (%rdx,%rax)	# _23, *_4
	.loc 1 53 3 is_stmt 1 view .LVU199
.LVL58:
	.loc 1 50 9 view .LVU200
	.loc 1 50 9 is_stmt 0 view .LVU201
	testq	%rsi, %rsi	# tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU202
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU203
	movzbl	1(%rbx,%rax), %ecx	# *_53, _74
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU204
	movb	%cl, 1(%rdx,%rax)	# _74, *_54
	.loc 1 53 3 is_stmt 1 view .LVU205
.LVL59:
	.loc 1 50 9 view .LVU206
	.loc 1 50 9 is_stmt 0 view .LVU207
	cmpq	$1, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU208
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU209
	movzbl	2(%rbx,%rax), %ecx	# *_109, _111
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU210
	movb	%cl, 2(%rdx,%rax)	# _111, *_110
	.loc 1 53 3 is_stmt 1 view .LVU211
.LVL60:
	.loc 1 50 9 view .LVU212
	.loc 1 50 9 is_stmt 0 view .LVU213
	cmpq	$2, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU214
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU215
	movzbl	3(%rbx,%rax), %ecx	# *_118, _120
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU216
	movb	%cl, 3(%rdx,%rax)	# _120, *_119
	.loc 1 53 3 is_stmt 1 view .LVU217
.LVL61:
	.loc 1 50 9 view .LVU218
	.loc 1 50 9 is_stmt 0 view .LVU219
	cmpq	$3, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU220
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU221
	movzbl	4(%rbx,%rax), %ecx	# *_127, _129
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU222
	movb	%cl, 4(%rdx,%rax)	# _129, *_128
	.loc 1 53 3 is_stmt 1 view .LVU223
.LVL62:
	.loc 1 50 9 view .LVU224
	.loc 1 50 9 is_stmt 0 view .LVU225
	cmpq	$4, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU226
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU227
	movzbl	5(%rbx,%rax), %ecx	# *_136, _138
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU228
	movb	%cl, 5(%rdx,%rax)	# _138, *_137
	.loc 1 53 3 is_stmt 1 view .LVU229
.LVL63:
	.loc 1 50 9 view .LVU230
	.loc 1 50 9 is_stmt 0 view .LVU231
	cmpq	$5, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU232
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU233
	movzbl	6(%rbx,%rax), %ecx	# *_145, _147
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU234
	movb	%cl, 6(%rdx,%rax)	# _147, *_146
	.loc 1 53 3 is_stmt 1 view .LVU235
.LVL64:
	.loc 1 50 9 view .LVU236
	.loc 1 50 9 is_stmt 0 view .LVU237
	cmpq	$6, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU238
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU239
	movzbl	7(%rbx,%rax), %ecx	# *_154, _156
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU240
	movb	%cl, 7(%rdx,%rax)	# _156, *_155
	.loc 1 53 3 is_stmt 1 view .LVU241
.LVL65:
	.loc 1 50 9 view .LVU242
	.loc 1 50 9 is_stmt 0 view .LVU243
	cmpq	$7, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU244
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU245
	movzbl	8(%rbx,%rax), %ecx	# *_163, _165
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU246
	movb	%cl, 8(%rdx,%rax)	# _165, *_164
	.loc 1 53 3 is_stmt 1 view .LVU247
.LVL66:
	.loc 1 50 9 view .LVU248
	.loc 1 50 9 is_stmt 0 view .LVU249
	cmpq	$8, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU250
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU251
	movzbl	9(%rbx,%rax), %ecx	# *_172, _174
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU252
	movb	%cl, 9(%rdx,%rax)	# _174, *_173
	.loc 1 53 3 is_stmt 1 view .LVU253
.LVL67:
	.loc 1 50 9 view .LVU254
	.loc 1 50 9 is_stmt 0 view .LVU255
	cmpq	$9, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU256
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU257
	movzbl	10(%rbx,%rax), %ecx	# *_181, _183
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU258
	movb	%cl, 10(%rdx,%rax)	# _183, *_182
	.loc 1 53 3 is_stmt 1 view .LVU259
.LVL68:
	.loc 1 50 9 view .LVU260
	.loc 1 50 9 is_stmt 0 view .LVU261
	cmpq	$10, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU262
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU263
	movzbl	11(%rbx,%rax), %ecx	# *_190, _192
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU264
	movb	%cl, 11(%rdx,%rax)	# _192, *_191
	.loc 1 53 3 is_stmt 1 view .LVU265
.LVL69:
	.loc 1 50 9 view .LVU266
	.loc 1 50 9 is_stmt 0 view .LVU267
	cmpq	$11, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU268
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU269
	movzbl	12(%rbx,%rax), %ecx	# *_199, _201
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU270
	movb	%cl, 12(%rdx,%rax)	# _201, *_200
	.loc 1 53 3 is_stmt 1 view .LVU271
.LVL70:
	.loc 1 50 9 view .LVU272
	.loc 1 50 9 is_stmt 0 view .LVU273
	cmpq	$12, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU274
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU275
	movzbl	13(%rbx,%rax), %ecx	# *_208, _210
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU276
	movb	%cl, 13(%rdx,%rax)	# _210, *_209
	.loc 1 53 3 is_stmt 1 view .LVU277
.LVL71:
	.loc 1 50 9 view .LVU278
	.loc 1 50 9 is_stmt 0 view .LVU279
	cmpq	$13, %rsi	#, tmp.66
	je	.L85	#,
	.loc 1 52 3 is_stmt 1 view .LVU280
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU281
	movzbl	14(%rbx,%rax), %ecx	# *_79, _81
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU282
	movb	%cl, 14(%rdx,%rax)	# _81, *_80
	.loc 1 53 3 is_stmt 1 view .LVU283
.LVL72:
	.loc 1 50 9 view .LVU284
	.loc 1 50 9 is_stmt 0 view .LVU285
	jmp	.L85	#
.LVL73:
	.p2align 4,,10
	.p2align 3
.L88:
	.loc 1 50 9 view .LVU286
	xorl	%eax, %eax	# i
.LVL74:
	.loc 1 52 3 is_stmt 1 view .LVU287
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 14 is_stmt 0 view .LVU288
	movzbl	(%rbx,%rax), %ecx	# MEM[(const char *)s1_13(D) + i_25 * 1], _41
# ft_strdup.c:52: 		cpy[i] = s1[i];
	.loc 1 52 10 view .LVU289
	movb	%cl, (%rdx,%rax)	# _41, MEM[(char *)cpy_19 + i_25 * 1]
	.loc 1 53 3 is_stmt 1 view .LVU290
# ft_strdup.c:53: 		i++;
	.loc 1 53 4 is_stmt 0 view .LVU291
	incq	%rax	# i
.LVL75:
	.loc 1 50 9 is_stmt 1 view .LVU292
	.loc 1 50 9 is_stmt 0 view .LVU293
	cmpq	%rax, %r12	# i, len
	jne	.L84	#,
	jmp	.L85	#
.LVL76:
	.p2align 4,,10
	.p2align 3
.L74:
	.loc 1 46 2 is_stmt 1 view .LVU294
# ft_strdup.c:46: 	cpy = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 46 16 is_stmt 0 view .LVU295
	movl	$1, %esi	#,
.LVL77:
	.loc 1 46 16 view .LVU296
	movl	$1, %edi	#,
	call	ft_calloc@PLT	#
.LVL78:
	movq	%rax, %rdx	# tmp177, <retval>
.LVL79:
	.loc 1 47 2 is_stmt 1 view .LVU297
# ft_strdup.c:47: 	if (!cpy)
	.loc 1 47 5 is_stmt 0 view .LVU298
	testq	%rax, %rax	# <retval>
	jne	.L87	#,
.LVL80:
.L86:
	.loc 1 47 5 view .LVU299
	xorl	%edx, %edx	# <retval>
	jmp	.L73	#
	.p2align 4,,10
	.p2align 3
.L87:
# ft_strdup.c:50: 	while (len--)
	.loc 1 50 9 view .LVU300
	movq	%rdx, %r12	# <retval>, _8
	jmp	.L77	#
.LVL81:
.L90:
	.loc 1 50 9 view .LVU301
	movq	%r12, %rcx	# len, niters.62
# ft_strdup.c:49: 	i = 0;
	.loc 1 49 4 view .LVU302
	xorl	%eax, %eax	# tmp.65
	jmp	.L79	#
.LVL82:
.L144:
	.loc 1 49 4 view .LVU303
	vzeroupper
.LVL83:
	jmp	.L82	#
.L141:
	vzeroupper
.LVL84:
	jmp	.L85	#
	.cfi_endproc
.LFE52:
	.size	ft_strndup, .-ft_strndup
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x29c
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xa
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xb
	.long	.LASF18
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xc
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xd
	.byte	0x8
	.uleb128 0x8
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xe
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x8
	.long	0x8e
	.uleb128 0x7
	.long	.LASF13
	.byte	0x23
	.byte	0x8
	.long	0x35
	.long	0xb9
	.uleb128 0x5
	.long	0x9a
	.uleb128 0x5
	.long	0x35
	.byte	0
	.uleb128 0x7
	.long	.LASF14
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xd3
	.uleb128 0x5
	.long	0x35
	.uleb128 0x5
	.long	0x35
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xe8
	.uleb128 0x5
	.long	0x9a
	.byte	0
	.uleb128 0xf
	.long	.LASF19
	.byte	0x1
	.byte	0x25
	.byte	0x7
	.long	0x82
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x1e1
	.uleb128 0x9
	.string	"s1"
	.byte	0x25
	.byte	0x1e
	.long	0x9a
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x10
	.long	.LASF16
	.byte	0x1
	.byte	0x25
	.byte	0x29
	.long	0x35
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x3
	.string	"len"
	.byte	0x27
	.byte	0x9
	.long	0x35
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x3
	.string	"cpy"
	.byte	0x28
	.byte	0x8
	.long	0x82
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x3
	.string	"i"
	.byte	0x29
	.byte	0x9
	.long	0x35
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x6
	.quad	.LVL42
	.long	0x9f
	.long	0x186
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0
	.uleb128 0x6
	.quad	.LVL44
	.long	0xb9
	.long	0x1a3
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x4
	.quad	.LVL56
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x6
	.quad	.LVL78
	.long	0xb9
	.long	0x1ca
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x4
	.quad	.LVL83
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x4
	.quad	.LVL84
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x11
	.long	.LASF20
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x82
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x9
	.string	"s1"
	.byte	0xf
	.byte	0x1d
	.long	0x9a
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x3
	.string	"len"
	.byte	0x11
	.byte	0x9
	.long	0x35
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x3
	.string	"cpy"
	.byte	0x12
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x3
	.string	"i"
	.byte	0x13
	.byte	0x9
	.long	0x35
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x6
	.quad	.LVL1
	.long	0xd3
	.long	0x260
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x6
	.quad	.LVL3
	.long	0xb9
	.long	0x27d
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x4
	.quad	.LVL14
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x4
	.quad	.LVL38
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x4
	.quad	.LVL39
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x83
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS4:
	.uleb128 0
	.uleb128 .LVU162
	.uleb128 .LVU162
	.uleb128 .LVU185
	.uleb128 .LVU185
	.uleb128 .LVU186
	.uleb128 .LVU186
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL42-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL42-1-.Ltext0
	.uleb128 .LVL53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL54-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS5:
	.uleb128 0
	.uleb128 .LVU162
	.uleb128 .LVU162
	.uleb128 .LVU294
	.uleb128 .LVU294
	.uleb128 .LVU296
	.uleb128 .LVU296
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL42-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL42-1-.Ltext0
	.uleb128 .LVL76-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL76-.Ltext0
	.uleb128 .LVL77-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL77-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU157
	.uleb128 .LVU164
	.uleb128 .LVU164
	.uleb128 .LVU166
	.uleb128 .LVU166
	.uleb128 .LVU171
	.uleb128 .LVU171
	.uleb128 .LVU173
	.uleb128 .LVU173
	.uleb128 .LVU178
	.uleb128 .LVU178
	.uleb128 .LVU179
	.uleb128 .LVU179
	.uleb128 .LVU180
	.uleb128 .LVU186
	.uleb128 .LVU188
	.uleb128 .LVU286
	.uleb128 .LVU287
	.uleb128 .LVU287
	.uleb128 .LVU292
	.uleb128 .LVU292
	.uleb128 .LVU293
	.uleb128 .LVU293
	.uleb128 .LVU294
	.uleb128 .LVU294
	.uleb128 .LVU299
	.uleb128 .LVU301
	.uleb128 .LVU303
.LLST6:
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL44-1-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL47-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x6
	.byte	0x7c
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL73-.Ltext0
	.uleb128 .LVL74-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL75-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL75-.Ltext0
	.uleb128 .LVL75-.Ltext0
	.uleb128 0x3
	.byte	0x7c
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL75-.Ltext0
	.uleb128 .LVL76-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL76-.Ltext0
	.uleb128 .LVL80-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL81-.Ltext0
	.uleb128 .LVL82-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS7:
	.uleb128 .LVU167
	.uleb128 .LVU172
	.uleb128 .LVU172
	.uleb128 .LVU184
	.uleb128 .LVU186
	.uleb128 .LVU286
	.uleb128 .LVU286
	.uleb128 .LVU287
	.uleb128 .LVU287
	.uleb128 .LVU294
	.uleb128 .LVU297
	.uleb128 .LVU301
	.uleb128 .LVU301
	.uleb128 0
.LLST7:
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL52-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LVL73-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL73-.Ltext0
	.uleb128 .LVL74-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL76-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL79-.Ltext0
	.uleb128 .LVL81-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL81-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS8:
	.uleb128 .LVU169
	.uleb128 .LVU173
	.uleb128 .LVU173
	.uleb128 .LVU180
	.uleb128 .LVU186
	.uleb128 .LVU188
	.uleb128 .LVU200
	.uleb128 .LVU206
	.uleb128 .LVU206
	.uleb128 .LVU212
	.uleb128 .LVU212
	.uleb128 .LVU218
	.uleb128 .LVU218
	.uleb128 .LVU224
	.uleb128 .LVU224
	.uleb128 .LVU230
	.uleb128 .LVU230
	.uleb128 .LVU236
	.uleb128 .LVU236
	.uleb128 .LVU242
	.uleb128 .LVU242
	.uleb128 .LVU248
	.uleb128 .LVU248
	.uleb128 .LVU254
	.uleb128 .LVU254
	.uleb128 .LVU260
	.uleb128 .LVU260
	.uleb128 .LVU266
	.uleb128 .LVU266
	.uleb128 .LVU272
	.uleb128 .LVU272
	.uleb128 .LVU278
	.uleb128 .LVU278
	.uleb128 .LVU284
	.uleb128 .LVU286
	.uleb128 .LVU287
	.uleb128 .LVU287
	.uleb128 .LVU294
	.uleb128 .LVU301
	.uleb128 .LVU303
.LLST8:
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL58-.Ltext0
	.uleb128 .LVL59-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL59-.Ltext0
	.uleb128 .LVL60-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL60-.Ltext0
	.uleb128 .LVL61-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL61-.Ltext0
	.uleb128 .LVL62-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL62-.Ltext0
	.uleb128 .LVL63-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL63-.Ltext0
	.uleb128 .LVL64-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL64-.Ltext0
	.uleb128 .LVL65-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL65-.Ltext0
	.uleb128 .LVL66-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL66-.Ltext0
	.uleb128 .LVL67-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL67-.Ltext0
	.uleb128 .LVL68-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL68-.Ltext0
	.uleb128 .LVL69-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL69-.Ltext0
	.uleb128 .LVL70-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL70-.Ltext0
	.uleb128 .LVL71-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL71-.Ltext0
	.uleb128 .LVL72-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL73-.Ltext0
	.uleb128 .LVL74-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL76-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL81-.Ltext0
	.uleb128 .LVL82-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU146
	.uleb128 .LVU146
	.uleb128 .LVU147
	.uleb128 .LVU147
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 .LVU13
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU29
	.uleb128 .LVU35
	.uleb128 .LVU37
	.uleb128 .LVU135
	.uleb128 .LVU136
	.uleb128 .LVU136
	.uleb128 .LVU141
	.uleb128 .LVU141
	.uleb128 .LVU142
	.uleb128 .LVU142
	.uleb128 .LVU143
	.uleb128 .LVU147
	.uleb128 .LVU149
.LLST1:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x6
	.byte	0x7c
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x3
	.byte	0x7c
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x7
	.byte	0x70
	.sleb128 0
	.byte	0x20
	.byte	0x7c
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS2:
	.uleb128 .LVU16
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU135
	.uleb128 .LVU135
	.uleb128 .LVU136
	.uleb128 .LVU136
	.uleb128 .LVU143
	.uleb128 .LVU147
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS3:
	.uleb128 .LVU18
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU29
	.uleb128 .LVU35
	.uleb128 .LVU37
	.uleb128 .LVU49
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU61
	.uleb128 .LVU61
	.uleb128 .LVU67
	.uleb128 .LVU67
	.uleb128 .LVU73
	.uleb128 .LVU73
	.uleb128 .LVU79
	.uleb128 .LVU79
	.uleb128 .LVU85
	.uleb128 .LVU85
	.uleb128 .LVU91
	.uleb128 .LVU91
	.uleb128 .LVU97
	.uleb128 .LVU97
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 .LVU109
	.uleb128 .LVU109
	.uleb128 .LVU115
	.uleb128 .LVU115
	.uleb128 .LVU121
	.uleb128 .LVU121
	.uleb128 .LVU127
	.uleb128 .LVU127
	.uleb128 .LVU133
	.uleb128 .LVU135
	.uleb128 .LVU136
	.uleb128 .LVU136
	.uleb128 .LVU143
	.uleb128 .LVU147
	.uleb128 .LVU149
.LLST3:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 2
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 3
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 4
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 5
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 7
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 8
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 10
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 11
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 12
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 13
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 14
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF13:
	.string	"ft_strnlen"
.LASF8:
	.string	"unsigned int"
.LASF18:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF20:
	.string	"ft_strdup"
.LASF16:
	.string	"max_size"
.LASF14:
	.string	"ft_calloc"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF19:
	.string	"ft_strndup"
.LASF15:
	.string	"ft_strlen"
.LASF9:
	.string	"signed char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strdup.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_substr.o/    0           0     0     644     14656     `
	.file	"ft_substr.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_substr.c"
	.p2align 4
	.globl	ft_substr
	.type	ft_substr, @function
ft_substr:
.LVL0:
.LFB51:
	.file 1 "ft_substr.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_substr.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
# ft_substr.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movl	%esi, %r13d	# tmp95, start
	movq	%rdx, %r12	# tmp96, len
	movq	%rdi, %rbx	# tmp94, s
# ft_substr.c:20: 	len2 = ft_strlen(s);
	.loc 1 20 9 view .LVU7
	call	ft_strlen@PLT	#
.LVL1:
	.loc 1 21 2 is_stmt 1 view .LVU8
# ft_substr.c:21: 	if (len2 <= start)
	.loc 1 21 11 is_stmt 0 view .LVU9
	movl	%r13d, %edx	# start, _1
	movl	$1, %r13d	#, _22
.LVL2:
# ft_substr.c:21: 	if (len2 <= start)
	.loc 1 21 5 view .LVU10
	cmpq	%rax, %rdx	# len2, _1
	jnb	.L2	#,
	.loc 1 25 3 is_stmt 1 view .LVU11
# ft_substr.c:26: 		len2 -= start;
	.loc 1 26 8 is_stmt 0 view .LVU12
	subq	%rdx, %rax	# _1, len2
.LVL3:
# ft_substr.c:25: 		s += start;
	.loc 1 25 5 view .LVU13
	addq	%rdx, %rbx	# _1, s
.LVL4:
	.loc 1 26 3 is_stmt 1 view .LVU14
# ft_substr.c:28: 	if (len2 < len)
	.loc 1 28 5 is_stmt 0 view .LVU15
	cmpq	%r12, %rax	# len, len2
	cmova	%r12, %rax	# len2,, len, tmp91
# ft_substr.c:30: 	sub_str = (char *)ft_calloc((len + 1), sizeof(char));
	.loc 1 30 20 view .LVU16
	leaq	1(%rax), %r13	#, _22
.L2:
.LVL5:
	.loc 1 28 2 is_stmt 1 view .LVU17
	.loc 1 30 2 view .LVU18
# ft_substr.c:30: 	sub_str = (char *)ft_calloc((len + 1), sizeof(char));
	.loc 1 30 20 is_stmt 0 view .LVU19
	movl	$1, %esi	#,
	movq	%r13, %rdi	# _22,
	call	ft_calloc@PLT	#
.LVL6:
	.loc 1 30 20 view .LVU20
	movq	%rax, %r12	# tmp98, <retval>
.LVL7:
	.loc 1 31 2 is_stmt 1 view .LVU21
# ft_substr.c:31: 	if (!sub_str)
	.loc 1 31 5 is_stmt 0 view .LVU22
	testq	%rax, %rax	# <retval>
	je	.L1	#,
	.loc 1 33 2 is_stmt 1 view .LVU23
	movq	%r13, %rdx	# _22,
	movq	%rbx, %rsi	# s,
	movq	%rax, %rdi	# <retval>,
	call	ft_strlcpy@PLT	#
.LVL8:
	.loc 1 34 2 view .LVU24
.L1:
# ft_substr.c:35: }
	.loc 1 35 1 is_stmt 0 view .LVU25
	addq	$8, %rsp	#,
	movq	%r12, %rax	# <retval>,
	popq	%rbx	#
.LVL9:
	.loc 1 35 1 view .LVU26
	popq	%r12	#
.LVL10:
	.loc 1 35 1 view .LVU27
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_substr, .-ft_substr
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x1ba
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x9
	.long	.LASF19
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xa
	.long	.LASF20
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xb
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xc
	.byte	0x8
	.uleb128 0x5
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xd
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x5
	.long	0x8e
	.uleb128 0x4
	.long	.LASF13
	.byte	0x29
	.byte	0x8
	.long	0x35
	.long	0xbe
	.uleb128 0x2
	.long	0x82
	.uleb128 0x2
	.long	0x9a
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x4
	.long	.LASF14
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xd8
	.uleb128 0x2
	.long	0x35
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x4
	.long	.LASF15
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xed
	.uleb128 0x2
	.long	0x9a
	.byte	0
	.uleb128 0xe
	.long	.LASF21
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x82
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x6
	.string	"s"
	.byte	0x1d
	.long	0x9a
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xf
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x2d
	.long	0x6b
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x6
	.string	"len"
	.byte	0x3b
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x7
	.long	.LASF17
	.byte	0x11
	.byte	0xa
	.long	0x35
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x7
	.long	.LASF18
	.byte	0x12
	.byte	0x9
	.long	0x82
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x8
	.quad	.LVL1
	.long	0xd8
	.long	0x17f
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x8
	.quad	.LVL6
	.long	0xbe
	.long	0x19c
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x10
	.quad	.LVL8
	.long	0x9f
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU26
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU17
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU8
	.uleb128 .LVU13
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS4:
	.uleb128 .LVU21
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL8-1-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF21:
	.string	"ft_substr"
.LASF20:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF19:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF16:
	.string	"start"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF14:
	.string	"ft_calloc"
.LASF18:
	.string	"sub_str"
.LASF17:
	.string	"len2"
.LASF10:
	.string	"short int"
.LASF13:
	.string	"ft_strlcpy"
.LASF15:
	.string	"ft_strlen"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_substr.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_strjoin.o/   0           0     0     644     40165     `
	.file	"ft_strjoin.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strjoin.c"
	.p2align 4
	.globl	ft_strjoin
	.type	ft_strjoin, @function
ft_strjoin:
.LVL0:
.LFB51:
	.file 1 "ft_strjoin.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_strjoin.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 21 2 view .LVU6
# ft_strjoin.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rsi, %r14	# tmp99, s2
	movq	%rdi, %r15	# tmp98, s1
# ft_strjoin.c:21: 	size1 = ft_strlen(s1);
	.loc 1 21 10 view .LVU8
	call	ft_strlen@PLT	#
.LVL1:
# ft_strjoin.c:22: 	size2 = ft_strlen(s2);
	.loc 1 22 10 view .LVU9
	movq	%r14, %rdi	# s2,
# ft_strjoin.c:21: 	size1 = ft_strlen(s1);
	.loc 1 21 10 view .LVU10
	movq	%rax, %rbx	# tmp100, size1
.LVL2:
	.loc 1 22 2 is_stmt 1 view .LVU11
# ft_strjoin.c:22: 	size2 = ft_strlen(s2);
	.loc 1 22 10 is_stmt 0 view .LVU12
	call	ft_strlen@PLT	#
.LVL3:
# ft_strjoin.c:23: 	new_str = (char *) ft_calloc((size1 + size2 + 1), sizeof(char));
	.loc 1 23 21 view .LVU13
	movl	$1, %esi	#,
	leaq	1(%rbx,%rax), %rdi	#, tmp93
# ft_strjoin.c:22: 	size2 = ft_strlen(s2);
	.loc 1 22 10 view .LVU14
	movq	%rax, %r13	# tmp101, size2
.LVL4:
	.loc 1 23 2 is_stmt 1 view .LVU15
# ft_strjoin.c:23: 	new_str = (char *) ft_calloc((size1 + size2 + 1), sizeof(char));
	.loc 1 23 21 is_stmt 0 view .LVU16
	call	ft_calloc@PLT	#
.LVL5:
	.loc 1 23 21 view .LVU17
	movq	%rax, %r12	# tmp102, <retval>
.LVL6:
	.loc 1 24 2 is_stmt 1 view .LVU18
# ft_strjoin.c:24: 	if (!new_str)
	.loc 1 24 5 is_stmt 0 view .LVU19
	testq	%rax, %rax	# <retval>
	je	.L1	#,
	.loc 1 26 2 is_stmt 1 view .LVU20
	leaq	1(%rbx), %rdx	#, tmp94
	movq	%r15, %rsi	# s1,
	movq	%rax, %rdi	# <retval>,
	call	ft_strlcpy@PLT	#
.LVL7:
	.loc 1 27 2 view .LVU21
	leaq	1(%r13), %rdx	#, tmp95
	leaq	(%r12,%rbx), %rdi	#, tmp96
	movq	%r14, %rsi	# s2,
	call	ft_strlcpy@PLT	#
.LVL8:
	.loc 1 28 2 view .LVU22
.L1:
# ft_strjoin.c:29: }
	.loc 1 29 1 is_stmt 0 view .LVU23
	addq	$8, %rsp	#,
	movq	%r12, %rax	# <retval>,
	popq	%rbx	#
.LVL9:
	.loc 1 29 1 view .LVU24
	popq	%r12	#
.LVL10:
	.loc 1 29 1 view .LVU25
	popq	%r13	#
.LVL11:
	.loc 1 29 1 view .LVU26
	popq	%r14	#
.LVL12:
	.loc 1 29 1 view .LVU27
	popq	%r15	#
.LVL13:
	.loc 1 29 1 view .LVU28
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_strjoin, .-ft_strjoin
	.p2align 4
	.globl	ft_memjoin
	.type	ft_memjoin, @function
ft_memjoin:
.LVL14:
.LFB52:
	.loc 1 32 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 32 1 is_stmt 0 view .LVU30
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_strjoin.c:32: {
	.loc 1 32 1 view .LVU31
	.loc 1 33 2 is_stmt 1 view .LVU32
	.loc 1 35 2 view .LVU33
# ft_strjoin.c:32: {
	.loc 1 32 1 is_stmt 0 view .LVU34
	movslq	%edx, %rbx	# tmp102,
	movq	%rdi, %r15	# tmp100, src1
	movq	%rsi, %r14	# tmp101, src2
	movl	%ecx, %r13d	# tmp103, size2
# ft_strjoin.c:35: 	return_val = malloc((size1 + size2) * 2);
	.loc 1 35 29 view .LVU35
	leal	(%rbx,%rcx), %edi	#, tmp93
.LVL15:
# ft_strjoin.c:35: 	return_val = malloc((size1 + size2) * 2);
	.loc 1 35 38 view .LVU36
	addl	%edi, %edi	# tmp94
# ft_strjoin.c:35: 	return_val = malloc((size1 + size2) * 2);
	.loc 1 35 15 view .LVU37
	movslq	%edi, %rdi	# tmp94, tmp95
	call	malloc@PLT	#
.LVL16:
	.loc 1 35 15 view .LVU38
	movq	%rax, %r12	# tmp104, <retval>
.LVL17:
	.loc 1 36 2 is_stmt 1 view .LVU39
# ft_strjoin.c:36: 	if (!return_val)
	.loc 1 36 5 is_stmt 0 view .LVU40
	testq	%rax, %rax	# <retval>
	je	.L7	#,
	.loc 1 38 2 is_stmt 1 view .LVU41
	movq	%rbx, %rdx	# _4,
	movq	%r15, %rsi	# src1,
	movq	%rax, %rdi	# <retval>,
	call	ft_memcpy@PLT	#
.LVL18:
	.loc 1 39 2 view .LVU42
	movslq	%r13d, %rdx	# size2, size2
# ft_strjoin.c:39: 	ft_memcpy(return_val + size1, src2, size2);
	.loc 1 39 23 is_stmt 0 view .LVU43
	leaq	(%r12,%rbx), %rdi	#, tmp98
# ft_strjoin.c:39: 	ft_memcpy(return_val + size1, src2, size2);
	.loc 1 39 2 view .LVU44
	movq	%r14, %rsi	# src2,
	call	ft_memcpy@PLT	#
.LVL19:
	.loc 1 40 2 is_stmt 1 view .LVU45
.L7:
# ft_strjoin.c:41: }
	.loc 1 41 1 is_stmt 0 view .LVU46
	addq	$8, %rsp	#,
	movq	%r12, %rax	# <retval>,
	popq	%rbx	#
.LVL20:
	.loc 1 41 1 view .LVU47
	popq	%r12	#
.LVL21:
	.loc 1 41 1 view .LVU48
	popq	%r13	#
.LVL22:
	.loc 1 41 1 view .LVU49
	popq	%r14	#
.LVL23:
	.loc 1 41 1 view .LVU50
	popq	%r15	#
.LVL24:
	.loc 1 41 1 view .LVU51
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE52:
	.size	ft_memjoin, .-ft_memjoin
	.p2align 4
	.globl	ft_strjoin_inplace
	.type	ft_strjoin_inplace, @function
ft_strjoin_inplace:
.LVL25:
.LFB53:
	.loc 1 45 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 45 1 is_stmt 0 view .LVU53
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_strjoin.c:45: {
	.loc 1 45 1 view .LVU54
	.loc 1 46 2 is_stmt 1 view .LVU55
	.loc 1 47 2 view .LVU56
	.loc 1 48 2 view .LVU57
	.loc 1 50 2 view .LVU58
# ft_strjoin.c:45: {
	.loc 1 45 1 is_stmt 0 view .LVU59
	movq	%rdi, %r12	# tmp107, s1
	movq	%rsi, %rbx	# tmp108, s2
# ft_strjoin.c:50: 	if (!s2 || !*s2)
	.loc 1 50 5 view .LVU60
	testq	%rsi, %rsi	# s2
	je	.L13	#,
# ft_strjoin.c:50: 	if (!s2 || !*s2)
	.loc 1 50 10 discriminator 1 view .LVU61
	cmpb	$0, (%rsi)	#, *s2_16(D)
	je	.L13	#,
	.loc 1 52 2 is_stmt 1 view .LVU62
.LVL26:
	.loc 1 53 2 view .LVU63
	.loc 1 54 2 view .LVU64
# ft_strjoin.c:54: 	if (*s1)
	.loc 1 54 6 is_stmt 0 view .LVU65
	movq	(%rdi), %rdi	# *s1_18(D), _2
.LVL27:
# ft_strjoin.c:52: 	size1 = 0;
	.loc 1 52 8 view .LVU66
	xorl	%r13d, %r13d	# size1
# ft_strjoin.c:54: 	if (*s1)
	.loc 1 54 5 view .LVU67
	testq	%rdi, %rdi	# _2
	je	.L14	#,
	.loc 1 55 3 is_stmt 1 view .LVU68
# ft_strjoin.c:55: 		size1 = ft_strlen(*s1);
	.loc 1 55 11 is_stmt 0 view .LVU69
	call	ft_strlen@PLT	#
.LVL28:
	.loc 1 55 11 view .LVU70
	movq	%rax, %r13	# tmp109, size1
.LVL29:
.L14:
	.loc 1 56 2 is_stmt 1 view .LVU71
	.loc 1 57 3 view .LVU72
# ft_strjoin.c:57: 		size2 = ft_strlen(s2);
	.loc 1 57 11 is_stmt 0 view .LVU73
	movq	%rbx, %rdi	# s2,
	call	ft_strlen@PLT	#
.LVL30:
# ft_strjoin.c:58: 	new_str = (char *) ft_calloc((size1 + size2 + 1), sizeof(char));
	.loc 1 58 21 view .LVU74
	movl	$1, %esi	#,
	leaq	1(%r13,%rax), %rdi	#, tmp99
# ft_strjoin.c:57: 		size2 = ft_strlen(s2);
	.loc 1 57 11 view .LVU75
	movq	%rax, %r15	# tmp110, size2
.LVL31:
	.loc 1 58 2 is_stmt 1 view .LVU76
# ft_strjoin.c:58: 	new_str = (char *) ft_calloc((size1 + size2 + 1), sizeof(char));
	.loc 1 58 21 is_stmt 0 view .LVU77
	call	ft_calloc@PLT	#
.LVL32:
	.loc 1 58 21 view .LVU78
	movq	%rax, %r14	# tmp111, new_str
.LVL33:
	.loc 1 59 2 is_stmt 1 view .LVU79
# ft_strjoin.c:59: 	if (!new_str)
	.loc 1 59 5 is_stmt 0 view .LVU80
	testq	%rax, %rax	# new_str
	je	.L22	#,
	.loc 1 65 2 is_stmt 1 view .LVU81
	movq	(%r12), %rsi	# *s1_18(D), *s1_18(D)
	leaq	1(%r13), %rdx	#, tmp101
	movq	%rax, %rdi	# new_str,
	call	ft_strlcpy@PLT	#
.LVL34:
	.loc 1 66 2 view .LVU82
	leaq	1(%r15), %rdx	#, tmp103
	leaq	(%r14,%r13), %rdi	#, tmp104
	movq	%rbx, %rsi	# s2,
	call	ft_strlcpy@PLT	#
.LVL35:
	.loc 1 67 2 view .LVU83
	movq	(%r12), %rdi	# *s1_18(D), *s1_18(D)
	call	free@PLT	#
.LVL36:
	.loc 1 68 2 view .LVU84
# ft_strjoin.c:68: 	*s1 = new_str;
	.loc 1 68 6 is_stmt 0 view .LVU85
	movq	%r14, (%r12)	# new_str, *s1_18(D)
	.loc 1 69 2 is_stmt 1 view .LVU86
.LVL37:
.L13:
# ft_strjoin.c:51: 		return (true);
	.loc 1 51 10 is_stmt 0 view .LVU87
	movl	$1, %eax	#, <retval>
.L12:
# ft_strjoin.c:70: }
	.loc 1 70 1 view .LVU88
	addq	$8, %rsp	#,
	popq	%rbx	#
.LVL38:
	.loc 1 70 1 view .LVU89
	popq	%r12	#
.LVL39:
	.loc 1 70 1 view .LVU90
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL40:
	.p2align 4,,10
	.p2align 3
.L22:
	.cfi_restore_state
	.loc 1 61 3 is_stmt 1 view .LVU91
	movq	(%r12), %rdi	# *s1_18(D), *s1_18(D)
	call	free@PLT	#
.LVL41:
	.loc 1 62 3 view .LVU92
# ft_strjoin.c:62: 		*s1 = NULL;
	.loc 1 62 7 is_stmt 0 view .LVU93
	movq	$0, (%r12)	#, *s1_18(D)
	.loc 1 63 3 is_stmt 1 view .LVU94
# ft_strjoin.c:63: 		return (false);
	.loc 1 63 10 is_stmt 0 view .LVU95
	xorl	%eax, %eax	# <retval>
	jmp	.L12	#
	.cfi_endproc
.LFE53:
	.size	ft_strjoin_inplace, .-ft_strjoin_inplace
	.p2align 4
	.globl	ft_strjoin_inplace_char
	.type	ft_strjoin_inplace_char, @function
ft_strjoin_inplace_char:
.LVL42:
.LFB54:
	.loc 1 74 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 74 1 is_stmt 0 view .LVU97
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_strjoin.c:74: {
	.loc 1 74 1 view .LVU98
	.loc 1 75 2 is_stmt 1 view .LVU99
	.loc 1 76 2 view .LVU100
	.loc 1 77 2 view .LVU101
	.loc 1 79 2 view .LVU102
# ft_strjoin.c:79: 	if (!s1 || !s2)
	.loc 1 79 6 is_stmt 0 view .LVU103
	testq	%rdi, %rdi	# s1
# ft_strjoin.c:74: {
	.loc 1 74 1 view .LVU104
	movq	%rdi, %rbx	# tmp105, s1
	movl	%esi, %r15d	# tmp106, s2
# ft_strjoin.c:79: 	if (!s1 || !s2)
	.loc 1 79 6 view .LVU105
	sete	%r12b	#, tmp99
# ft_strjoin.c:79: 	if (!s1 || !s2)
	.loc 1 79 13 view .LVU106
	testb	%sil, %sil	# s2
	sete	%al	#, tmp101
# ft_strjoin.c:79: 	if (!s1 || !s2)
	.loc 1 79 5 view .LVU107
	orb	%al, %r12b	# tmp101, <retval>
	jne	.L24	#,
	.loc 1 81 2 is_stmt 1 view .LVU108
.LVL43:
	.loc 1 82 2 view .LVU109
	.loc 1 83 2 view .LVU110
# ft_strjoin.c:83: 	if (*s1)
	.loc 1 83 6 is_stmt 0 view .LVU111
	movq	(%rdi), %rdi	# *s1_19(D), _4
.LVL44:
# ft_strjoin.c:83: 	if (*s1)
	.loc 1 83 5 view .LVU112
	testq	%rdi, %rdi	# _4
	je	.L29	#,
	.loc 1 84 3 is_stmt 1 view .LVU113
# ft_strjoin.c:84: 		size1 = ft_strlen(*s1);
	.loc 1 84 11 is_stmt 0 view .LVU114
	call	ft_strlen@PLT	#
.LVL45:
	.loc 1 84 11 view .LVU115
	movq	%rax, %r14	# tmp107, size1
.LVL46:
# ft_strjoin.c:85: 	new_str = (char *) ft_calloc((size1 + size2 + 1), sizeof(char));
	.loc 1 85 21 view .LVU116
	leaq	2(%rax), %rdi	#, _5
.LVL47:
.L25:
	.loc 1 85 2 is_stmt 1 view .LVU117
# ft_strjoin.c:85: 	new_str = (char *) ft_calloc((size1 + size2 + 1), sizeof(char));
	.loc 1 85 21 is_stmt 0 view .LVU118
	movl	$1, %esi	#,
	call	ft_calloc@PLT	#
.LVL48:
	movq	%rax, %r13	# tmp108, new_str
.LVL49:
	.loc 1 86 2 is_stmt 1 view .LVU119
# ft_strjoin.c:86: 	if (!new_str)
	.loc 1 86 5 is_stmt 0 view .LVU120
	testq	%rax, %rax	# new_str
	je	.L33	#,
	.loc 1 92 2 is_stmt 1 view .LVU121
# ft_strjoin.c:92: 	if (*s1)
	.loc 1 92 6 is_stmt 0 view .LVU122
	movq	(%rbx), %rsi	# *s1_19(D), _8
# ft_strjoin.c:93: 		ft_strlcpy(new_str, *s1, size1 + 1);
	.loc 1 93 3 view .LVU123
	leaq	1(%r14), %r12	#, _36
# ft_strjoin.c:92: 	if (*s1)
	.loc 1 92 5 view .LVU124
	testq	%rsi, %rsi	# _8
	je	.L28	#,
	.loc 1 93 3 is_stmt 1 view .LVU125
	movq	%r12, %rdx	# _36,
	movq	%rax, %rdi	# new_str,
	call	ft_strlcpy@PLT	#
.LVL50:
.L28:
	.loc 1 94 2 view .LVU126
# ft_strjoin.c:94: 	new_str[size1] = s2;
	.loc 1 94 17 is_stmt 0 view .LVU127
	movb	%r15b, 0(%r13,%r14)	# s2, *_10
	.loc 1 95 2 is_stmt 1 view .LVU128
	.loc 1 96 3 view .LVU129
# ft_strjoin.c:96: 		new_str[size1 + 1] = 0;
	.loc 1 96 22 is_stmt 0 view .LVU130
	movb	$0, 0(%r13,%r12)	#, *_12
	.loc 1 97 2 is_stmt 1 view .LVU131
	movq	(%rbx), %rdi	# *s1_19(D), *s1_19(D)
	call	free@PLT	#
.LVL51:
	.loc 1 98 2 view .LVU132
# ft_strjoin.c:98: 	*s1 = new_str;
	.loc 1 98 6 is_stmt 0 view .LVU133
	movq	%r13, (%rbx)	# new_str, *s1_19(D)
	.loc 1 99 2 is_stmt 1 view .LVU134
.LVL52:
.L24:
# ft_strjoin.c:80: 		return (true);
	.loc 1 80 10 is_stmt 0 view .LVU135
	movl	$1, %r12d	#, <retval>
.L23:
# ft_strjoin.c:100: }
	.loc 1 100 1 view .LVU136
	addq	$8, %rsp	#,
	movl	%r12d, %eax	# <retval>,
	popq	%rbx	#
.LVL53:
	.loc 1 100 1 view .LVU137
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
.LVL54:
	.loc 1 100 1 view .LVU138
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL55:
	.p2align 4,,10
	.p2align 3
.L29:
	.cfi_restore_state
	.loc 1 100 1 view .LVU139
	movl	$2, %edi	#, _5
# ft_strjoin.c:81: 	size1 = 0;
	.loc 1 81 8 view .LVU140
	xorl	%r14d, %r14d	# size1
	jmp	.L25	#
.LVL56:
	.p2align 4,,10
	.p2align 3
.L33:
	.loc 1 88 3 is_stmt 1 view .LVU141
	movq	(%rbx), %rdi	# *s1_19(D), *s1_19(D)
	call	free@PLT	#
.LVL57:
	.loc 1 89 3 view .LVU142
# ft_strjoin.c:89: 		*s1 = NULL;
	.loc 1 89 7 is_stmt 0 view .LVU143
	movq	$0, (%rbx)	#, *s1_19(D)
	.loc 1 90 3 is_stmt 1 view .LVU144
# ft_strjoin.c:90: 		return (false);
	.loc 1 90 10 is_stmt 0 view .LVU145
	jmp	.L23	#
	.cfi_endproc
.LFE54:
	.size	ft_strjoin_inplace_char, .-ft_strjoin_inplace_char
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
	.file 5 "../includes/libft.h"
	.file 6 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x564
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xe
	.long	.LASF31
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xb
	.long	.LASF10
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xf
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x2
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0xb
	.long	.LASF11
	.byte	0x3
	.byte	0x26
	.byte	0x17
	.long	0x5d
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.long	.LASF12
	.uleb128 0x10
	.byte	0x8
	.uleb128 0x8
	.long	0x93
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x11
	.long	0x93
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF14
	.uleb128 0x8
	.long	0xab
	.uleb128 0x12
	.uleb128 0x8
	.long	0x8e
	.uleb128 0x8
	.long	0x9a
	.uleb128 0xb
	.long	.LASF15
	.byte	0x4
	.byte	0x18
	.byte	0x13
	.long	0x79
	.uleb128 0x13
	.long	.LASF32
	.byte	0x6
	.value	0x2af
	.byte	0xd
	.long	0xd5
	.uleb128 0x4
	.long	0x8c
	.byte	0
	.uleb128 0x9
	.long	.LASF16
	.byte	0x26
	.byte	0x7
	.long	0x8c
	.long	0xf4
	.uleb128 0x4
	.long	0x8c
	.uleb128 0x4
	.long	0xa6
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x14
	.long	.LASF17
	.byte	0x6
	.value	0x2a0
	.byte	0xe
	.long	0x8c
	.long	0x10b
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x9
	.long	.LASF18
	.byte	0x29
	.byte	0x8
	.long	0x35
	.long	0x12a
	.uleb128 0x4
	.long	0x8e
	.uleb128 0x4
	.long	0xb1
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x9
	.long	.LASF19
	.byte	0x34
	.byte	0x7
	.long	0x8c
	.long	0x144
	.uleb128 0x4
	.long	0x35
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x9
	.long	.LASF20
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0x159
	.uleb128 0x4
	.long	0xb1
	.byte	0
	.uleb128 0xc
	.long	.LASF25
	.byte	0x49
	.byte	0x6
	.long	0x234
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.uleb128 0x1
	.byte	0x9c
	.long	0x234
	.uleb128 0x6
	.string	"s1"
	.byte	0x49
	.byte	0x25
	.long	0xac
	.long	.LLST15
	.long	.LVUS15
	.uleb128 0x6
	.string	"s2"
	.byte	0x49
	.byte	0x34
	.long	0x9a
	.long	.LLST16
	.long	.LVUS16
	.uleb128 0x5
	.long	.LASF21
	.byte	0x4b
	.byte	0x9
	.long	0x35
	.long	.LLST17
	.long	.LVUS17
	.uleb128 0x5
	.long	.LASF22
	.byte	0x4c
	.byte	0x9
	.long	0x35
	.long	.LLST18
	.long	.LVUS18
	.uleb128 0x5
	.long	.LASF23
	.byte	0x4d
	.byte	0x8
	.long	0x8e
	.long	.LLST19
	.long	.LVUS19
	.uleb128 0x7
	.quad	.LVL45
	.long	0x144
	.uleb128 0x3
	.quad	.LVL48
	.long	0x12a
	.long	0x1fb
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x3
	.quad	.LVL50
	.long	0x10b
	.long	0x219
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL51
	.long	0xc2
	.uleb128 0x7
	.quad	.LVL57
	.long	0xc2
	.byte	0
	.uleb128 0x2
	.byte	0x1
	.byte	0x2
	.long	.LASF24
	.uleb128 0xc
	.long	.LASF26
	.byte	0x2c
	.byte	0x6
	.long	0x234
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x360
	.uleb128 0x6
	.string	"s1"
	.byte	0x2c
	.byte	0x20
	.long	0xac
	.long	.LLST10
	.long	.LVUS10
	.uleb128 0x6
	.string	"s2"
	.byte	0x2c
	.byte	0x30
	.long	0xb1
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0x5
	.long	.LASF21
	.byte	0x2e
	.byte	0x9
	.long	0x35
	.long	.LLST12
	.long	.LVUS12
	.uleb128 0x5
	.long	.LASF22
	.byte	0x2f
	.byte	0x9
	.long	0x35
	.long	.LLST13
	.long	.LVUS13
	.uleb128 0x5
	.long	.LASF23
	.byte	0x30
	.byte	0x8
	.long	0x8e
	.long	.LLST14
	.long	.LVUS14
	.uleb128 0x7
	.quad	.LVL28
	.long	0x144
	.uleb128 0x3
	.quad	.LVL30
	.long	0x144
	.long	0x2de
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL32
	.long	0x12a
	.long	0x300
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x7
	.byte	0x7d
	.sleb128 0
	.byte	0x7f
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x3
	.quad	.LVL34
	.long	0x10b
	.long	0x31e
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7d
	.sleb128 1
	.byte	0
	.uleb128 0x3
	.quad	.LVL35
	.long	0x10b
	.long	0x345
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x5
	.byte	0x7e
	.sleb128 0
	.byte	0x7d
	.sleb128 0
	.byte	0x22
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7f
	.sleb128 1
	.byte	0
	.uleb128 0x7
	.quad	.LVL36
	.long	0xc2
	.uleb128 0x7
	.quad	.LVL41
	.long	0xc2
	.byte	0
	.uleb128 0xc
	.long	.LASF27
	.byte	0x1f
	.byte	0x7
	.long	0x8c
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x44d
	.uleb128 0xa
	.long	.LASF28
	.byte	0x18
	.long	0x8c
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0xa
	.long	.LASF29
	.byte	0x24
	.long	0x8c
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0xa
	.long	.LASF21
	.byte	0x2e
	.long	0x48
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0xa
	.long	.LASF22
	.byte	0x39
	.long	0x48
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x5
	.long	.LASF30
	.byte	0x21
	.byte	0xb
	.long	0x44d
	.long	.LLST9
	.long	.LVUS9
	.uleb128 0x3
	.quad	.LVL16
	.long	0xf4
	.long	0x3ff
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0xd
	.byte	0x73
	.sleb128 0
	.byte	0x7d
	.sleb128 0
	.byte	0x22
	.byte	0x31
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x3
	.quad	.LVL18
	.long	0xd5
	.long	0x423
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7f
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0xd
	.quad	.LVL19
	.long	0xd5
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x5
	.byte	0x7c
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x8
	.byte	0x7d
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.byte	0
	.uleb128 0x8
	.long	0xb6
	.uleb128 0x15
	.long	.LASF33
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x8e
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x6
	.string	"s1"
	.byte	0xf
	.byte	0x1e
	.long	0xb1
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x6
	.string	"s2"
	.byte	0xf
	.byte	0x2e
	.long	0xb1
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x5
	.long	.LASF21
	.byte	0x11
	.byte	0x9
	.long	0x35
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x5
	.long	.LASF22
	.byte	0x12
	.byte	0x9
	.long	0x35
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x5
	.long	.LASF23
	.byte	0x13
	.byte	0x8
	.long	0x8e
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x3
	.quad	.LVL1
	.long	0x144
	.long	0x4e5
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7f
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL3
	.long	0x144
	.long	0x4fd
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL5
	.long	0x12a
	.long	0x51f
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x7
	.byte	0x73
	.sleb128 0
	.byte	0x7d
	.sleb128 0
	.byte	0x22
	.byte	0x23
	.uleb128 0x1
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x3
	.quad	.LVL7
	.long	0x10b
	.long	0x543
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7f
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x73
	.sleb128 1
	.byte	0
	.uleb128 0xd
	.quad	.LVL8
	.long	0x10b
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x5
	.byte	0x7c
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7d
	.sleb128 1
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 5
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 31
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS15:
	.uleb128 0
	.uleb128 .LVU112
	.uleb128 .LVU112
	.uleb128 .LVU137
	.uleb128 .LVU137
	.uleb128 .LVU139
	.uleb128 .LVU139
	.uleb128 0
.LLST15:
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL55-.Ltext0
	.uleb128 .LFE54-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS16:
	.uleb128 0
	.uleb128 .LVU115
	.uleb128 .LVU115
	.uleb128 .LVU138
	.uleb128 .LVU138
	.uleb128 .LVU139
	.uleb128 .LVU139
	.uleb128 .LVU141
	.uleb128 .LVU141
	.uleb128 0
.LLST16:
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL45-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL45-1-.Ltext0
	.uleb128 .LVL54-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LVL55-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL55-.Ltext0
	.uleb128 .LVL56-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LFE54-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0
.LVUS17:
	.uleb128 .LVU109
	.uleb128 .LVU116
	.uleb128 .LVU116
	.uleb128 .LVU117
	.uleb128 .LVU117
	.uleb128 .LVU135
	.uleb128 .LVU139
	.uleb128 .LVU141
	.uleb128 .LVU141
	.uleb128 0
.LLST17:
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL47-.Ltext0
	.uleb128 .LVL52-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL55-.Ltext0
	.uleb128 .LVL56-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LFE54-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS18:
	.uleb128 .LVU110
	.uleb128 .LVU135
	.uleb128 .LVU139
	.uleb128 0
.LLST18:
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL52-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL55-.Ltext0
	.uleb128 .LFE54-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS19:
	.uleb128 .LVU119
	.uleb128 .LVU126
	.uleb128 .LVU126
	.uleb128 .LVU135
	.uleb128 .LVU141
	.uleb128 .LVU142
	.uleb128 .LVU142
	.uleb128 0
.LLST19:
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL50-1-.Ltext0
	.uleb128 .LVL52-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LVL57-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL57-1-.Ltext0
	.uleb128 .LFE54-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS10:
	.uleb128 0
	.uleb128 .LVU66
	.uleb128 .LVU66
	.uleb128 .LVU90
	.uleb128 .LVU90
	.uleb128 .LVU91
	.uleb128 .LVU91
	.uleb128 0
.LLST10:
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS11:
	.uleb128 0
	.uleb128 .LVU70
	.uleb128 .LVU70
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 .LVU91
	.uleb128 .LVU91
	.uleb128 0
.LLST11:
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL28-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL28-1-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS12:
	.uleb128 .LVU63
	.uleb128 .LVU71
	.uleb128 .LVU71
	.uleb128 .LVU87
	.uleb128 .LVU91
	.uleb128 0
.LLST12:
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS13:
	.uleb128 .LVU64
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 .LVU78
	.uleb128 .LVU78
	.uleb128 .LVU87
	.uleb128 .LVU91
	.uleb128 0
.LLST13:
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL32-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL32-1-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0
.LVUS14:
	.uleb128 .LVU79
	.uleb128 .LVU82
	.uleb128 .LVU82
	.uleb128 .LVU87
	.uleb128 .LVU91
	.uleb128 .LVU92
	.uleb128 .LVU92
	.uleb128 0
.LLST14:
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL34-1-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL41-1-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS5:
	.uleb128 0
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU51
	.uleb128 .LVU51
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 0
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL16-1-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS7:
	.uleb128 0
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 0
.LLST7:
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL16-1-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0
.LVUS8:
	.uleb128 0
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 0
.LLST8:
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-1-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL16-1-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0
.LVUS9:
	.uleb128 .LVU39
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 0
.LLST9:
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU11
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU24
.LLST2:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS3:
	.uleb128 .LVU15
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU26
.LLST3:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL5-1-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS4:
	.uleb128 .LVU18
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL7-1-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"__uint8_t"
.LASF10:
	.string	"size_t"
.LASF26:
	.string	"ft_strjoin_inplace"
.LASF21:
	.string	"size1"
.LASF22:
	.string	"size2"
.LASF33:
	.string	"ft_strjoin"
.LASF30:
	.string	"return_val"
.LASF18:
	.string	"ft_strlcpy"
.LASF20:
	.string	"ft_strlen"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF7:
	.string	"short unsigned int"
.LASF16:
	.string	"ft_memcpy"
.LASF19:
	.string	"ft_calloc"
.LASF8:
	.string	"unsigned int"
.LASF23:
	.string	"new_str"
.LASF14:
	.string	"long long unsigned int"
.LASF15:
	.string	"uint8_t"
.LASF27:
	.string	"ft_memjoin"
.LASF5:
	.string	"long double"
.LASF32:
	.string	"free"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF12:
	.string	"short int"
.LASF2:
	.string	"long int"
.LASF28:
	.string	"src1"
.LASF29:
	.string	"src2"
.LASF25:
	.string	"ft_strjoin_inplace_char"
.LASF9:
	.string	"signed char"
.LASF31:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF24:
	.string	"_Bool"
.LASF17:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strjoin.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strtrim.o/   0           0     0     644     33430     `
	.file	"ft_strtrim.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strtrim.c"
	.p2align 4
	.globl	ft_strtrim
	.type	ft_strtrim, @function
ft_strtrim:
.LVL0:
.LFB52:
	.file 1 "ft_strtrim.c"
	.loc 1 27 1 view -0
	.cfi_startproc
	.loc 1 27 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# ft_strtrim.c:27: {
	.loc 1 27 1 view .LVU2
	.loc 1 28 2 is_stmt 1 view .LVU3
	.loc 1 29 2 view .LVU4
	.loc 1 30 2 view .LVU5
	.loc 1 32 2 view .LVU6
# ft_strtrim.c:27: {
	.loc 1 27 1 is_stmt 0 view .LVU7
	movq	%rdi, %rbx	# tmp133, s1
	movq	%rsi, %r13	# tmp134, set
# ft_strtrim.c:32: 	if (!s1)
	.loc 1 32 5 view .LVU8
	testq	%rdi, %rdi	# s1
	je	.L15	#,
	.loc 1 34 2 is_stmt 1 view .LVU9
# ft_strtrim.c:34: 	len = ft_strlen(s1);
	.loc 1 34 8 is_stmt 0 view .LVU10
	call	ft_strlen@PLT	#
.LVL1:
# ft_strtrim.c:35: 	while (*s1 && in_set(set, *s1))
	.loc 1 35 9 view .LVU11
	movzbl	(%rbx), %ecx	# *s1_26(D), _2
# ft_strtrim.c:34: 	len = ft_strlen(s1);
	.loc 1 34 6 discriminator 1 view .LVU12
	movl	%eax, %r12d	# tmp135, len
.LVL2:
	.loc 1 35 2 is_stmt 1 view .LVU13
	.loc 1 35 13 view .LVU14
	testb	%cl, %cl	# _2
	je	.L4	#,
.LBB6:
.LBB7:
# ft_strtrim.c:17: 	while (*set)
	.loc 1 17 9 is_stmt 0 view .LVU15
	movzbl	0(%r13), %esi	# *set_30(D), _62
.LVL3:
	.loc 1 17 9 is_stmt 1 view .LVU16
	testb	%sil, %sil	# _62
	je	.L4	#,
.LVL4:
	.p2align 4,,10
	.p2align 3
.L5:
	.loc 1 17 9 is_stmt 0 view .LVU17
.LBE7:
.LBE6:
# ft_strtrim.c:27: {
	.loc 1 27 1 view .LVU18
	movq	%r13, %rdx	# set, set
.LBB10:
.LBB8:
# ft_strtrim.c:17: 	while (*set)
	.loc 1 17 9 view .LVU19
	movl	%esi, %eax	# _62, _31
	jmp	.L10	#
.LVL5:
	.p2align 4,,10
	.p2align 3
.L41:
	.loc 1 21 3 is_stmt 1 view .LVU20
# ft_strtrim.c:17: 	while (*set)
	.loc 1 17 9 is_stmt 0 view .LVU21
	movzbl	1(%rdx), %eax	# MEM[(const char *)set_43], _31
# ft_strtrim.c:21: 		set++;
	.loc 1 21 6 view .LVU22
	incq	%rdx	# set
.LVL6:
	.loc 1 17 9 is_stmt 1 view .LVU23
	testb	%al, %al	# _31
	je	.L4	#,
.LVL7:
.L10:
	.loc 1 19 3 view .LVU24
# ft_strtrim.c:19: 		if (c == *set)
	.loc 1 19 6 is_stmt 0 view .LVU25
	cmpb	%cl, %al	# _2, _31
	jne	.L41	#,
.LVL8:
	.loc 1 19 6 view .LVU26
.LBE8:
.LBE10:
	.loc 1 37 3 is_stmt 1 view .LVU27
# ft_strtrim.c:35: 	while (*s1 && in_set(set, *s1))
	.loc 1 35 9 is_stmt 0 view .LVU28
	movzbl	1(%rbx), %ecx	# MEM[(const char *)s1_33], _2
# ft_strtrim.c:38: 		s1++;
	.loc 1 38 5 view .LVU29
	incq	%rbx	# s1
# ft_strtrim.c:37: 		len--;
	.loc 1 37 6 view .LVU30
	decl	%r12d	# len
.LVL9:
	.loc 1 38 3 is_stmt 1 view .LVU31
	.loc 1 35 13 view .LVU32
	testb	%cl, %cl	# _2
	jne	.L5	#,
.LVL10:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 40 17 view .LVU33
	testl	%r12d, %r12d	# len
	jle	.L6	#,
.LBB11:
.LBB12:
# ft_strtrim.c:17: 	while (*set)
	.loc 1 17 9 is_stmt 0 view .LVU34
	movzbl	0(%r13), %edi	# *set_30(D), _56
	movslq	%r12d, %rsi	# len, ivtmp.23
	movl	%r12d, %r14d	# len, _10
	.loc 1 17 9 view .LVU35
.LBE12:
.LBE11:
# ft_strtrim.c:40: 	while (len > 0 && in_set(set, s1[len - 1]))
	.loc 1 40 34 discriminator 1 view .LVU36
	movzbl	-1(%rbx,%rsi), %ecx	# MEM[(const char *)s1_64 + -1B + ivtmp.23_76 * 1], _82
.LVL11:
.LBB16:
.LBI11:
	.loc 1 15 12 is_stmt 1 view .LVU37
.LBB13:
	.loc 1 17 2 view .LVU38
	.loc 1 17 9 view .LVU39
	testb	%dil, %dil	# _56
	je	.L39	#,
.LVL12:
	.p2align 4,,10
	.p2align 3
.L7:
	.loc 1 17 9 is_stmt 0 view .LVU40
.LBE13:
.LBE16:
.LBB17:
.LBB9:
	movq	%r13, %rdx	# set, set
.LBE9:
.LBE17:
.LBB18:
.LBB14:
	movl	%edi, %eax	# _56, _45
	jmp	.L14	#
.LVL13:
	.p2align 4,,10
	.p2align 3
.L42:
	.loc 1 21 3 is_stmt 1 view .LVU41
# ft_strtrim.c:17: 	while (*set)
	.loc 1 17 9 is_stmt 0 view .LVU42
	movzbl	1(%rdx), %eax	# MEM[(const char *)set_47], _45
# ft_strtrim.c:21: 		set++;
	.loc 1 21 6 view .LVU43
	incq	%rdx	# set
.LVL14:
	.loc 1 17 9 is_stmt 1 view .LVU44
	testb	%al, %al	# _45
	je	.L39	#,
.LVL15:
.L14:
	.loc 1 19 3 view .LVU45
# ft_strtrim.c:19: 		if (c == *set)
	.loc 1 19 6 is_stmt 0 view .LVU46
	cmpb	%cl, %al	# _82, _45
	jne	.L42	#,
.LVL16:
	.loc 1 19 6 view .LVU47
.LBE14:
.LBE18:
	.loc 1 41 3 is_stmt 1 view .LVU48
	.loc 1 40 17 view .LVU49
	decq	%rsi	# ivtmp.23
	testl	%esi, %esi	# ivtmp.23
	je	.L11	#,
# ft_strtrim.c:40: 	while (len > 0 && in_set(set, s1[len - 1]))
	.loc 1 40 34 is_stmt 0 discriminator 1 view .LVU50
	movzbl	-1(%rbx,%rsi), %ecx	# MEM[(const char *)s1_64 + -1B + ivtmp.23_49 * 1], _82
	movl	%esi, %r14d	# ivtmp.23, _10
	movl	%esi, %r12d	# ivtmp.23, len
.LVL17:
.LBB19:
	.loc 1 15 12 is_stmt 1 view .LVU51
.LBB15:
	.loc 1 17 2 view .LVU52
	.loc 1 17 9 view .LVU53
	jmp	.L7	#
.LVL18:
	.p2align 4,,10
	.p2align 3
.L39:
	.loc 1 17 9 is_stmt 0 view .LVU54
.LBE15:
.LBE19:
# ft_strtrim.c:42: 	trim = (char *)malloc(sizeof(char) * (len + 1));
	.loc 1 42 44 view .LVU55
	leal	1(%r12), %edi	#, tmp114
# ft_strtrim.c:42: 	trim = (char *)malloc(sizeof(char) * (len + 1));
	.loc 1 42 17 view .LVU56
	movslq	%edi, %rdi	# tmp114, _15
.LVL19:
	.loc 1 42 2 is_stmt 1 view .LVU57
# ft_strtrim.c:42: 	trim = (char *)malloc(sizeof(char) * (len + 1));
	.loc 1 42 17 is_stmt 0 view .LVU58
	call	malloc@PLT	#
.LVL20:
	movq	%rax, %rcx	# tmp138, <retval>
.LVL21:
	.loc 1 43 2 is_stmt 1 view .LVU59
# ft_strtrim.c:43: 	if (!trim)
	.loc 1 43 5 is_stmt 0 view .LVU60
	testq	%rax, %rax	# <retval>
	je	.L15	#,
	.loc 1 45 2 is_stmt 1 view .LVU61
.LVL22:
	.loc 1 46 2 view .LVU62
# ft_strtrim.c:46: 	trim[len] = '\0';
	.loc 1 46 6 is_stmt 0 view .LVU63
	movslq	%r12d, %rdx	# len, len
# ft_strtrim.c:48: 		*(trim++) = *(s1++);
	.loc 1 48 13 view .LVU64
	movq	%rcx, %rdi	# <retval>,
	movq	%rbx, %rsi	# s1,
# ft_strtrim.c:46: 	trim[len] = '\0';
	.loc 1 46 12 view .LVU65
	movb	$0, (%rcx,%rdx)	#, *_67
	.loc 1 47 2 is_stmt 1 view .LVU66
.LVL23:
	.loc 1 47 15 view .LVU67
# ft_strtrim.c:48: 		*(trim++) = *(s1++);
	.loc 1 48 13 is_stmt 0 view .LVU68
	call	memcpy@PLT	#
.LVL24:
	.loc 1 48 13 view .LVU69
	movq	%rax, %rcx	#, <retval>
.LVL25:
.L1:
# ft_strtrim.c:50: }
	.loc 1 50 1 view .LVU70
	popq	%rbx	#
	movq	%rcx, %rax	# <retval>,
	popq	%r12	#
	popq	%r13	#
.LVL26:
	.loc 1 50 1 view .LVU71
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL27:
.L15:
	.cfi_restore_state
	.loc 1 50 1 view .LVU72
	popq	%rbx	#
# ft_strtrim.c:33: 		return (NULL);
	.loc 1 33 10 view .LVU73
	xorl	%ecx, %ecx	# <retval>
# ft_strtrim.c:50: }
	.loc 1 50 1 view .LVU74
	popq	%r12	#
	movq	%rcx, %rax	# <retval>,
	popq	%r13	#
.LVL28:
	.loc 1 50 1 view .LVU75
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL29:
.L6:
	.cfi_restore_state
	.loc 1 42 2 is_stmt 1 view .LVU76
# ft_strtrim.c:42: 	trim = (char *)malloc(sizeof(char) * (len + 1));
	.loc 1 42 44 is_stmt 0 view .LVU77
	leal	1(%r12), %edi	#, tmp115
# ft_strtrim.c:42: 	trim = (char *)malloc(sizeof(char) * (len + 1));
	.loc 1 42 17 view .LVU78
	movslq	%edi, %rdi	# tmp115, tmp116
	call	malloc@PLT	#
.LVL30:
	movq	%rax, %rcx	# tmp136, <retval>
.LVL31:
	.loc 1 43 2 is_stmt 1 view .LVU79
# ft_strtrim.c:43: 	if (!trim)
	.loc 1 43 5 is_stmt 0 view .LVU80
	testq	%rax, %rax	# <retval>
	je	.L15	#,
	.loc 1 45 2 is_stmt 1 view .LVU81
.LVL32:
	.loc 1 46 2 view .LVU82
# ft_strtrim.c:46: 	trim[len] = '\0';
	.loc 1 46 6 is_stmt 0 view .LVU83
	movslq	%r12d, %r12	# len, len
# ft_strtrim.c:46: 	trim[len] = '\0';
	.loc 1 46 12 view .LVU84
	movb	$0, (%rax,%r12)	#, *_53
	.loc 1 47 2 is_stmt 1 view .LVU85
.LVL33:
	.loc 1 47 15 view .LVU86
	.loc 1 47 15 is_stmt 0 view .LVU87
	jmp	.L1	#
.LVL34:
.L11:
	.loc 1 42 2 is_stmt 1 view .LVU88
# ft_strtrim.c:42: 	trim = (char *)malloc(sizeof(char) * (len + 1));
	.loc 1 42 17 is_stmt 0 view .LVU89
	movl	$1, %edi	#,
	call	malloc@PLT	#
.LVL35:
	movq	%rax, %rcx	# tmp137, <retval>
.LVL36:
	.loc 1 43 2 is_stmt 1 view .LVU90
# ft_strtrim.c:43: 	if (!trim)
	.loc 1 43 5 is_stmt 0 view .LVU91
	testq	%rax, %rax	# <retval>
	je	.L15	#,
	.loc 1 45 2 is_stmt 1 view .LVU92
.LVL37:
	.loc 1 46 2 view .LVU93
# ft_strtrim.c:41: 		len--;
	.loc 1 41 6 is_stmt 0 view .LVU94
	leal	-1(%r14), %eax	#, len
.LVL38:
# ft_strtrim.c:46: 	trim[len] = '\0';
	.loc 1 46 6 view .LVU95
	cltq
# ft_strtrim.c:46: 	trim[len] = '\0';
	.loc 1 46 12 view .LVU96
	movb	$0, (%rcx,%rax)	#, *_5
	.loc 1 47 2 is_stmt 1 view .LVU97
.LVL39:
	.loc 1 47 15 view .LVU98
	.loc 1 47 15 is_stmt 0 view .LVU99
	jmp	.L1	#
	.cfi_endproc
.LFE52:
	.size	ft_strtrim, .-ft_strtrim
	.p2align 4
	.globl	ft_strstrtrim
	.type	ft_strstrtrim, @function
ft_strstrtrim:
.LVL40:
.LFB53:
	.loc 1 53 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 53 1 is_stmt 0 view .LVU101
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_strtrim.c:53: {
	.loc 1 53 1 view .LVU102
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp105
	movq	%rax, -40(%rbp)	# tmp105, D.5751
	xorl	%eax, %eax	# tmp105
	.loc 1 54 2 is_stmt 1 view .LVU103
	.loc 1 56 2 view .LVU104
# ft_strtrim.c:53: {
	.loc 1 53 1 is_stmt 0 view .LVU105
	movq	%rdi, %rbx	# tmp99, s1
	movq	%rsi, %r12	# tmp100, sub
# ft_strtrim.c:56: 	if (!s1)
	.loc 1 56 5 view .LVU106
	testq	%rdi, %rdi	# s1
	je	.L54	#,
	.loc 1 58 2 is_stmt 1 view .LVU107
# ft_strtrim.c:59: 	while (*s1)
	.loc 1 59 9 is_stmt 0 view .LVU108
	cmpb	$0, (%rdi)	#, *s1_15(D)
# ft_strtrim.c:58: 	trim = NULL;
	.loc 1 58 7 view .LVU109
	movq	$0, -48(%rbp)	#, trim
	.loc 1 59 2 is_stmt 1 view .LVU110
	.loc 1 59 9 view .LVU111
	je	.L54	#,
# ft_strtrim.c:67: 			if (!ft_strjoin_inplace_char(&trim, *s1))
	.loc 1 67 9 is_stmt 0 view .LVU112
	leaq	-48(%rbp), %r13	#, tmp98
	jmp	.L52	#
.LVL41:
	.p2align 4,,10
	.p2align 3
.L50:
	.loc 1 69 3 is_stmt 1 view .LVU113
# ft_strtrim.c:69: 		s1++;
	.loc 1 69 5 is_stmt 0 view .LVU114
	incq	%rbx	# s1
.LVL42:
	.loc 1 59 9 is_stmt 1 view .LVU115
	cmpb	$0, (%rbx)	#, *s1_5
	je	.L56	#,
.L52:
	.loc 1 61 3 view .LVU116
# ft_strtrim.c:61: 		if (*s1 && !ft_strncmp(s1, sub, ft_strlen(sub)))
	.loc 1 61 15 is_stmt 0 discriminator 1 view .LVU117
	movq	%r12, %rdi	# sub,
	call	ft_strlen@PLT	#
.LVL43:
	movq	%r12, %rsi	# sub,
	movq	%rbx, %rdi	# s1,
	movq	%rax, %rdx	# tmp101, _2
	call	ft_strncmp@PLT	#
.LVL44:
# ft_strtrim.c:61: 		if (*s1 && !ft_strncmp(s1, sub, ft_strlen(sub)))
	.loc 1 61 11 discriminator 2 view .LVU118
	testl	%eax, %eax	# tmp102
	je	.L57	#,
	.loc 1 66 3 is_stmt 1 view .LVU119
# ft_strtrim.c:66: 		if (*s1)
	.loc 1 66 7 is_stmt 0 view .LVU120
	movsbl	(%rbx), %esi	# *s1_30,
# ft_strtrim.c:66: 		if (*s1)
	.loc 1 66 6 view .LVU121
	testb	%sil, %sil	# _4
	je	.L50	#,
	.loc 1 67 4 is_stmt 1 view .LVU122
# ft_strtrim.c:67: 			if (!ft_strjoin_inplace_char(&trim, *s1))
	.loc 1 67 9 is_stmt 0 view .LVU123
	movq	%r13, %rdi	# tmp98,
	call	ft_strjoin_inplace_char@PLT	#
.LVL45:
# ft_strtrim.c:67: 			if (!ft_strjoin_inplace_char(&trim, *s1))
	.loc 1 67 7 discriminator 1 view .LVU124
	testb	%al, %al	# tmp104
	jne	.L50	#,
.L54:
# ft_strtrim.c:59: 	while (*s1)
	.loc 1 59 9 view .LVU125
	xorl	%eax, %eax	# <retval>
	.loc 1 71 2 is_stmt 1 view .LVU126
# ft_strtrim.c:71: 	return (trim);
	.loc 1 71 9 is_stmt 0 view .LVU127
	jmp	.L43	#
	.p2align 4,,10
	.p2align 3
.L57:
	.loc 1 63 4 is_stmt 1 view .LVU128
# ft_strtrim.c:63: 			s1 += ft_strlen(sub);
	.loc 1 63 10 is_stmt 0 view .LVU129
	movq	%r12, %rdi	# sub,
	call	ft_strlen@PLT	#
.LVL46:
# ft_strtrim.c:63: 			s1 += ft_strlen(sub);
	.loc 1 63 7 discriminator 1 view .LVU130
	addq	%rax, %rbx	# tmp103, s1
.LVL47:
	.loc 1 64 4 is_stmt 1 view .LVU131
	.loc 1 59 9 view .LVU132
	cmpb	$0, (%rbx)	#, *s1_5
	jne	.L52	#,
	.p2align 4,,10
	.p2align 3
.L56:
# ft_strtrim.c:71: 	return (trim);
	.loc 1 71 9 is_stmt 0 view .LVU133
	movq	-48(%rbp), %rax	# trim, <retval>
.L43:
# ft_strtrim.c:72: }
	.loc 1 72 1 view .LVU134
	movq	-40(%rbp), %rdx	# D.5751, tmp106
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp106
	jne	.L58	#,
	addq	$24, %rsp	#,
	popq	%rbx	#
.LVL48:
	.loc 1 72 1 view .LVU135
	popq	%r12	#
.LVL49:
	.loc 1 72 1 view .LVU136
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL50:
.L58:
	.cfi_restore_state
	.loc 1 72 1 view .LVU137
	call	__stack_chk_fail@PLT	#
.LVL51:
	.cfi_endproc
.LFE53:
	.size	ft_strstrtrim, .-ft_strstrtrim
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/include/stdlib.h"
	.file 4 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 5 "<built-in>"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x36d
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xc
	.long	.LASF22
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xd
	.long	.LASF23
	.byte	0x4
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xe
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xf
	.byte	0x8
	.uleb128 0x6
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x10
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x6
	.long	0x82
	.uleb128 0x6
	.long	0x8e
	.uleb128 0x7
	.long	.LASF14
	.byte	0x3e
	.byte	0x6
	.long	0xbe
	.long	0xbe
	.uleb128 0x4
	.long	0x9a
	.uleb128 0x4
	.long	0x8e
	.byte	0
	.uleb128 0x1
	.byte	0x1
	.byte	0x2
	.long	.LASF13
	.uleb128 0x7
	.long	.LASF15
	.byte	0x2e
	.byte	0x6
	.long	0x48
	.long	0xe4
	.uleb128 0x4
	.long	0x9f
	.uleb128 0x4
	.long	0x9f
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x11
	.long	.LASF16
	.byte	0x3
	.value	0x2a0
	.byte	0xe
	.long	0x80
	.long	0xfb
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x7
	.long	.LASF17
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0x110
	.uleb128 0x4
	.long	0x9f
	.byte	0
	.uleb128 0x9
	.long	.LASF18
	.byte	0x34
	.long	0x82
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x1d8
	.uleb128 0x5
	.string	"s1"
	.byte	0x34
	.byte	0x21
	.long	0x9f
	.long	.LLST10
	.long	.LVUS10
	.uleb128 0x5
	.string	"sub"
	.byte	0x34
	.byte	0x31
	.long	0x9f
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0x12
	.long	.LASF20
	.byte	0x1
	.byte	0x36
	.byte	0x8
	.long	0x82
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3
	.quad	.LVL43
	.long	0xfb
	.long	0x17c
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL44
	.long	0xc5
	.long	0x19a
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL45
	.long	0xa4
	.long	0x1b2
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL46
	.long	0xfb
	.long	0x1ca
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x13
	.quad	.LVL51
	.long	0x35c
	.byte	0
	.uleb128 0x9
	.long	.LASF19
	.byte	0x1a
	.long	0x82
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x338
	.uleb128 0x5
	.string	"s1"
	.byte	0x1a
	.byte	0x1e
	.long	0x9f
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.string	"set"
	.byte	0x1a
	.byte	0x2e
	.long	0x9f
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xa
	.long	.LASF20
	.byte	0x1c
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xa
	.long	.LASF21
	.byte	0x1d
	.long	0x82
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x14
	.string	"len"
	.byte	0x1
	.byte	0x1e
	.byte	0x7
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x15
	.long	0x338
	.long	.LLRL5
	.byte	0x1
	.byte	0x23
	.byte	0x10
	.long	0x278
	.uleb128 0x16
	.long	0x353
	.uleb128 0x8
	.long	0x349
	.long	.LLST6
	.long	.LVUS6
	.byte	0
	.uleb128 0x17
	.long	0x338
	.quad	.LBI11
	.byte	.LVU37
	.long	.LLRL7
	.byte	0x1
	.byte	0x28
	.byte	0x14
	.long	0x2ac
	.uleb128 0x8
	.long	0x353
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x8
	.long	0x349
	.long	.LLST9
	.long	.LVUS9
	.byte	0
	.uleb128 0x3
	.quad	.LVL1
	.long	0xfb
	.long	0x2c4
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL20
	.long	0xe4
	.long	0x2e2
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x7c
	.sleb128 1
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x3
	.quad	.LVL24
	.long	0x365
	.long	0x306
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x8
	.byte	0x7c
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x3
	.quad	.LVL30
	.long	0xe4
	.long	0x324
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x7c
	.sleb128 1
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x18
	.quad	.LVL35
	.long	0xe4
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.byte	0
	.uleb128 0x19
	.long	.LASF24
	.byte	0x1
	.byte	0xf
	.byte	0xc
	.long	0x48
	.byte	0x1
	.long	0x35c
	.uleb128 0xb
	.string	"set"
	.byte	0x1f
	.long	0x9f
	.uleb128 0xb
	.string	"c"
	.byte	0x29
	.long	0x87
	.byte	0
	.uleb128 0x1a
	.long	.LASF25
	.long	.LASF25
	.uleb128 0x1b
	.long	.LASF26
	.long	.LASF27
	.byte	0x5
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS10:
	.uleb128 0
	.uleb128 .LVU113
	.uleb128 .LVU113
	.uleb128 .LVU135
	.uleb128 .LVU137
	.uleb128 0
.LLST10:
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS11:
	.uleb128 0
	.uleb128 .LVU113
	.uleb128 .LVU113
	.uleb128 .LVU136
	.uleb128 .LVU136
	.uleb128 .LVU137
	.uleb128 .LVU137
	.uleb128 0
.LLST11:
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU17
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU71
	.uleb128 .LVU71
	.uleb128 .LVU72
	.uleb128 .LVU72
	.uleb128 .LVU75
	.uleb128 .LVU75
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS2:
	.uleb128 .LVU59
	.uleb128 .LVU69
	.uleb128 .LVU79
	.uleb128 .LVU88
	.uleb128 .LVU90
	.uleb128 .LVU95
	.uleb128 .LVU95
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS3:
	.uleb128 .LVU62
	.uleb128 .LVU69
	.uleb128 .LVU82
	.uleb128 .LVU88
	.uleb128 .LVU93
	.uleb128 .LVU95
	.uleb128 .LVU95
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU13
	.uleb128 .LVU17
	.uleb128 .LVU31
	.uleb128 .LVU49
	.uleb128 .LVU51
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 .LVU57
	.uleb128 .LVU67
	.uleb128 .LVU68
	.uleb128 .LVU68
	.uleb128 .LVU70
	.uleb128 .LVU86
	.uleb128 .LVU87
	.uleb128 .LVU87
	.uleb128 .LVU88
.LLST4:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x7c
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x3
	.byte	0x7c
	.sleb128 -1
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU16
	.uleb128 .LVU17
	.uleb128 .LVU20
	.uleb128 .LVU26
.LLST6:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS8:
	.uleb128 .LVU37
	.uleb128 .LVU47
	.uleb128 .LVU51
	.uleb128 .LVU57
.LLST8:
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS9:
	.uleb128 .LVU37
	.uleb128 .LVU40
	.uleb128 .LVU41
	.uleb128 .LVU47
.LLST9:
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL5:
	.byte	0x4
	.uleb128 .LBB6-.Ltext0
	.uleb128 .LBE6-.Ltext0
	.byte	0x4
	.uleb128 .LBB10-.Ltext0
	.uleb128 .LBE10-.Ltext0
	.byte	0x4
	.uleb128 .LBB17-.Ltext0
	.uleb128 .LBE17-.Ltext0
	.byte	0
.LLRL7:
	.byte	0x4
	.uleb128 .LBB11-.Ltext0
	.uleb128 .LBE11-.Ltext0
	.byte	0x4
	.uleb128 .LBB16-.Ltext0
	.uleb128 .LBE16-.Ltext0
	.byte	0x4
	.uleb128 .LBB18-.Ltext0
	.uleb128 .LBE18-.Ltext0
	.byte	0x4
	.uleb128 .LBB19-.Ltext0
	.uleb128 .LBE19-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF23:
	.string	"size_t"
.LASF14:
	.string	"ft_strjoin_inplace_char"
.LASF7:
	.string	"short unsigned int"
.LASF17:
	.string	"ft_strlen"
.LASF19:
	.string	"ft_strtrim"
.LASF6:
	.string	"unsigned char"
.LASF18:
	.string	"ft_strstrtrim"
.LASF21:
	.string	"trim_ret"
.LASF24:
	.string	"in_set"
.LASF25:
	.string	"__stack_chk_fail"
.LASF3:
	.string	"long unsigned int"
.LASF8:
	.string	"unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF27:
	.string	"__builtin_memcpy"
.LASF4:
	.string	"long long int"
.LASF20:
	.string	"trim"
.LASF11:
	.string	"char"
.LASF26:
	.string	"memcpy"
.LASF10:
	.string	"short int"
.LASF2:
	.string	"long int"
.LASF15:
	.string	"ft_strncmp"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF22:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF13:
	.string	"_Bool"
.LASF16:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strtrim.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_split.o/     0           0     0     644     34751     `
	.file	"ft_split.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_split.c"
	.p2align 4
	.globl	ft_split
	.type	ft_split, @function
ft_split:
.LVL0:
.LFB53:
	.file 1 "ft_split.c"
	.loc 1 66 1 view -0
	.cfi_startproc
	.loc 1 66 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_split.c:66: {
	.loc 1 66 1 view .LVU2
	.loc 1 67 2 is_stmt 1 view .LVU3
	.loc 1 68 2 view .LVU4
	.loc 1 69 2 view .LVU5
	.loc 1 70 2 view .LVU6
	.loc 1 72 2 view .LVU7
.LVL1:
.LBB8:
.LBB9:
# ft_split.c:22: 	while (*s)
	.loc 1 22 9 is_stmt 0 view .LVU8
	movzbl	(%rdi), %eax	# *s_19(D), _2
.LBE9:
.LBE8:
# ft_split.c:66: {
	.loc 1 66 1 view .LVU9
	movq	%rdi, %rbx	# tmp154, s
	movl	%esi, %r12d	# tmp155, c
.LVL2:
.LBB13:
.LBI8:
	.loc 1 15 15 is_stmt 1 view .LVU10
.LBB10:
	.loc 1 17 2 view .LVU11
	.loc 1 18 2 view .LVU12
	.loc 1 20 2 view .LVU13
	.loc 1 21 2 view .LVU14
	.loc 1 22 2 view .LVU15
	.loc 1 22 9 view .LVU16
.LBE10:
.LBE13:
# ft_split.c:66: {
	.loc 1 66 1 is_stmt 0 view .LVU17
	movl	%esi, %r15d	# c, c
.LBB14:
.LBB11:
# ft_split.c:22: 	while (*s)
	.loc 1 22 9 view .LVU18
	testb	%al, %al	# _2
	je	.L25	#,
	movq	%rdi, %rdx	# s, s
# ft_split.c:21: 	was_c = 1;
	.loc 1 21 8 view .LVU19
	movl	$1, %ecx	#, was_c
# ft_split.c:20: 	count = 0;
	.loc 1 20 8 view .LVU20
	xorl	%edi, %edi	# count
.LVL3:
	.loc 1 20 8 view .LVU21
	jmp	.L5	#
.LVL4:
	.p2align 4,,10
	.p2align 3
.L56:
# ft_split.c:24: 		if (!was_c && *s == c)
	.loc 1 24 14 discriminator 1 view .LVU22
	cmpb	%al, %r15b	# _2, c
	jne	.L4	#,
# ft_split.c:26: 			count++;
	.loc 1 26 9 view .LVU23
	incq	%rdi	# count
.LVL5:
# ft_split.c:27: 			was_c = 1;
	.loc 1 27 10 view .LVU24
	movl	$1, %ecx	#, was_c
.LVL6:
.L4:
	.loc 1 33 3 is_stmt 1 view .LVU25
# ft_split.c:22: 	while (*s)
	.loc 1 22 9 is_stmt 0 view .LVU26
	movzbl	1(%rdx), %eax	# MEM[(const char *)s_37], _2
# ft_split.c:33: 		s++;
	.loc 1 33 4 view .LVU27
	incq	%rdx	# s
.LVL7:
	.loc 1 22 9 is_stmt 1 view .LVU28
	testb	%al, %al	# _2
	je	.L55	#,
.LVL8:
.L5:
	.loc 1 24 3 view .LVU29
# ft_split.c:24: 		if (!was_c && *s == c)
	.loc 1 24 6 is_stmt 0 view .LVU30
	testl	%ecx, %ecx	# was_c
	je	.L56	#,
.LVL9:
	.loc 1 29 8 is_stmt 1 view .LVU31
# ft_split.c:29: 		else if (*s == c)
	.loc 1 29 11 is_stmt 0 view .LVU32
	xorl	%ecx, %ecx	# was_c
	cmpb	%al, %r15b	# _2, c
	sete	%cl	#, was_c
.LVL10:
	.loc 1 33 3 is_stmt 1 view .LVU33
# ft_split.c:33: 		s++;
	.loc 1 33 4 is_stmt 0 view .LVU34
	incq	%rdx	# s
.LVL11:
	.loc 1 22 9 is_stmt 1 view .LVU35
	movzbl	(%rdx), %eax	# MEM[(const char *)s_37], _2
	testb	%al, %al	# _2
	jne	.L5	#,
.LVL12:
.L55:
	.loc 1 35 2 view .LVU36
# ft_split.c:36: 		count++;
	.loc 1 36 8 is_stmt 0 view .LVU37
	cmpl	$1, %ecx	#, was_c
	adcq	$1, %rdi	#, prephitmp_35
.LVL13:
.L2:
	.loc 1 37 2 is_stmt 1 view .LVU38
	.loc 1 37 2 is_stmt 0 view .LVU39
.LBE11:
.LBE14:
	.loc 1 73 2 is_stmt 1 view .LVU40
# ft_split.c:73: 	str_ar = (char **)ft_calloc(str_count + 1, sizeof(char *));
	.loc 1 73 20 is_stmt 0 view .LVU41
	movl	$8, %esi	#,
.LVL14:
	.loc 1 73 20 view .LVU42
	call	ft_calloc@PLT	#
.LVL15:
	movq	%rax, %r14	# tmp156, <retval>
.LVL16:
	.loc 1 74 2 is_stmt 1 view .LVU43
# ft_split.c:74: 	if (!str_ar)
	.loc 1 74 5 is_stmt 0 view .LVU44
	testq	%rax, %rax	# <retval>
	je	.L7	#,
.LVL17:
	.loc 1 77 9 is_stmt 1 view .LVU45
	movzbl	(%rbx), %edx	# *s_19(D), _29
	testb	%dl, %dl	# _29
	je	.L1	#,
.LBB15:
.LBB16:
# ft_split.c:46: 	found = ft_strchr(s, c);
	.loc 1 46 10 is_stmt 0 view .LVU46
	movsbl	%r12b, %eax	# c, _106
.LVL18:
	.loc 1 46 10 view .LVU47
.LBE16:
.LBE15:
# ft_split.c:76: 	i = 0;
	.loc 1 76 4 view .LVU48
	xorl	%r13d, %r13d	# i
.LBB24:
.LBB17:
# ft_split.c:46: 	found = ft_strchr(s, c);
	.loc 1 46 10 view .LVU49
	movl	%eax, -52(%rbp)	# _106, %sfp
.LVL19:
	.p2align 4,,10
	.p2align 3
.L9:
	.loc 1 46 10 view .LVU50
.LBE17:
.LBE24:
	.loc 1 79 13 is_stmt 1 view .LVU51
# ft_split.c:79: 		while (*s && *s == c)
	.loc 1 79 13 is_stmt 0 discriminator 1 view .LVU52
	cmpb	%dl, %r15b	# _29, c
	je	.L10	#,
	jmp	.L24	#
	.p2align 4,,10
	.p2align 3
.L57:
	.loc 1 79 13 discriminator 1 view .LVU53
	testb	%al, %al	# _3
	je	.L24	#,
.L10:
	.loc 1 80 4 is_stmt 1 view .LVU54
# ft_split.c:79: 		while (*s && *s == c)
	.loc 1 79 10 is_stmt 0 view .LVU55
	movzbl	1(%rbx), %eax	# MEM[(const char *)s_23], _3
# ft_split.c:80: 			s++;
	.loc 1 80 5 view .LVU56
	incq	%rbx	# s
.LVL20:
	.loc 1 79 13 is_stmt 1 view .LVU57
# ft_split.c:79: 		while (*s && *s == c)
	.loc 1 79 13 is_stmt 0 discriminator 1 view .LVU58
	cmpb	%r15b, %al	# c, _3
	je	.L57	#,
.L24:
	.loc 1 81 3 is_stmt 1 view .LVU59
.LVL21:
.LBB25:
.LBI15:
	.loc 1 40 12 view .LVU60
.LBB18:
	.loc 1 42 2 view .LVU61
	.loc 1 43 2 view .LVU62
	.loc 1 44 2 view .LVU63
	.loc 1 46 2 view .LVU64
# ft_split.c:46: 	found = ft_strchr(s, c);
	.loc 1 46 10 is_stmt 0 view .LVU65
	movl	-52(%rbp), %esi	# %sfp,
	movq	%rbx, %rdi	# s,
	call	ft_strchr@PLT	#
.LVL22:
	.loc 1 47 2 is_stmt 1 view .LVU66
# ft_split.c:50: 		len = found - s;
	.loc 1 50 7 is_stmt 0 view .LVU67
	movl	%eax, %edx	# found, len
	subl	%ebx, %edx	# s, len
# ft_split.c:47: 	if (!found)
	.loc 1 47 5 view .LVU68
	testq	%rax, %rax	# found
	je	.L58	#,
.LVL23:
.L13:
	.loc 1 51 2 is_stmt 1 view .LVU69
# ft_split.c:51: 	if (len == 0)
	.loc 1 51 5 is_stmt 0 view .LVU70
	testl	%edx, %edx	# len
	jne	.L14	#,
.LBE18:
.LBE25:
# ft_split.c:77: 	while (*s)
	.loc 1 77 9 view .LVU71
	movzbl	(%rbx), %edx	# *s_90, _29
.LVL24:
.L15:
	.loc 1 86 3 is_stmt 1 view .LVU72
	.loc 1 77 9 view .LVU73
	testb	%dl, %dl	# _29
	jne	.L9	#,
.LVL25:
.L1:
# ft_split.c:89: }
	.loc 1 89 1 is_stmt 0 view .LVU74
	addq	$24, %rsp	#,
	movq	%r14, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
.LVL26:
	.loc 1 89 1 view .LVU75
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL27:
	.p2align 4,,10
	.p2align 3
.L14:
	.cfi_restore_state
.LBB26:
.LBB19:
# ft_split.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 35 view .LVU76
	incl	%edx	# tmp135
.LVL28:
	.loc 1 53 35 view .LVU77
.LBE19:
.LBE26:
# ft_split.c:81: 		s_increase = append_next_sub(str_ar + i, s, c);
	.loc 1 81 39 view .LVU78
	movslq	%r13d, %rax	# i, i
.LBB27:
.LBB20:
# ft_split.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 21 view .LVU79
	movl	$1, %esi	#,
	movslq	%edx, %rdi	# tmp135, tmp136
.LBE20:
.LBE27:
# ft_split.c:81: 		s_increase = append_next_sub(str_ar + i, s, c);
	.loc 1 81 16 view .LVU80
	leaq	(%r14,%rax,8), %r12	#, _7
.LBB28:
.LBB21:
	.loc 1 53 2 is_stmt 1 view .LVU81
# ft_split.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 21 is_stmt 0 view .LVU82
	call	ft_calloc@PLT	#
.LVL29:
# ft_split.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 11 discriminator 1 view .LVU83
	movq	%rax, (%r12)	# _51, *_7
	.loc 1 54 2 is_stmt 1 view .LVU84
# ft_split.c:54: 	if (!(*sub_str))
	.loc 1 54 5 is_stmt 0 view .LVU85
	testq	%rax, %rax	# _51
	je	.L16	#,
.LVL30:
	.loc 1 57 18 is_stmt 1 view .LVU86
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 10 is_stmt 0 view .LVU87
	movzbl	(%rbx), %edx	# *s_90, _29
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 18 discriminator 1 view .LVU88
	cmpb	%dl, %r15b	# _29, c
	je	.L15	#,
	testb	%dl, %dl	# _29
	je	.L1	#,
	.loc 1 59 3 is_stmt 1 view .LVU89
# ft_split.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 21 is_stmt 0 view .LVU90
	movb	%dl, (%rax)	# _29, MEM[(char *)_51]
	.loc 1 60 3 is_stmt 1 view .LVU91
.LVL31:
	.loc 1 57 18 view .LVU92
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 10 is_stmt 0 view .LVU93
	movzbl	1(%rbx), %edx	# MEM[(const char *)s_90 + 1B], _29
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 18 discriminator 1 view .LVU94
	testb	%dl, %dl	# _29
	je	.L20	#,
	cmpb	%dl, %r15b	# _29, c
	je	.L20	#,
	leaq	2(%rbx), %rax	#, ivtmp.17
	jmp	.L21	#
.LVL32:
	.p2align 4,,10
	.p2align 3
.L59:
	.loc 1 57 18 discriminator 1 view .LVU95
	cmpb	%dl, %r15b	# _29, c
	je	.L23	#,
.LVL33:
.L21:
	.loc 1 59 3 is_stmt 1 view .LVU96
# ft_split.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 13 is_stmt 0 view .LVU97
	movq	%rax, %rcx	# ivtmp.17, tmp145
# ft_split.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 21 view .LVU98
	movq	(%r12), %rsi	# *_7, *_7
# ft_split.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 13 view .LVU99
	subq	%rbx, %rcx	# s, tmp145
# ft_split.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 21 view .LVU100
	movb	%dl, -1(%rsi,%rcx)	# _29, *_54
	.loc 1 60 3 is_stmt 1 view .LVU101
.LVL34:
	.loc 1 57 18 view .LVU102
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 10 is_stmt 0 view .LVU103
	movq	%rax, %rcx	# ivtmp.17, _58
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 18 discriminator 1 view .LVU104
	incq	%rax	# ivtmp.17
.LVL35:
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 10 view .LVU105
	movzbl	-1(%rax), %edx	# MEM[(const char *)_58], _29
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 18 discriminator 1 view .LVU106
	testb	%dl, %dl	# _29
	jne	.L59	#,
.L23:
.LVL36:
	.loc 1 57 18 discriminator 1 view .LVU107
.LBE21:
.LBE28:
	.loc 1 82 3 is_stmt 1 view .LVU108
	.loc 1 84 3 view .LVU109
	.loc 1 85 4 view .LVU110
# ft_split.c:85: 			i++;
	.loc 1 85 5 is_stmt 0 view .LVU111
	incl	%r13d	# i
.LVL37:
	.loc 1 85 5 view .LVU112
	movq	%rcx, %rbx	# _58, s
.LVL38:
	.loc 1 85 5 view .LVU113
	jmp	.L15	#
.LVL39:
	.p2align 4,,10
	.p2align 3
.L58:
.LBB29:
.LBB22:
	.loc 1 48 3 is_stmt 1 view .LVU114
# ft_split.c:48: 		len = ft_strlen(s);
	.loc 1 48 9 is_stmt 0 view .LVU115
	movq	%rbx, %rdi	# s,
	call	ft_strlen@PLT	#
.LVL40:
# ft_split.c:48: 		len = ft_strlen(s);
	.loc 1 48 7 discriminator 1 view .LVU116
	movl	%eax, %edx	# tmp158, len
.LVL41:
	.loc 1 48 7 discriminator 1 view .LVU117
	jmp	.L13	#
.LVL42:
.L16:
	.loc 1 48 7 discriminator 1 view .LVU118
.LBE22:
.LBE29:
	.loc 1 82 3 is_stmt 1 view .LVU119
	.loc 1 83 4 view .LVU120
# ft_split.c:83: 			return (ft_free_2darr(str_ar), NULL);
	.loc 1 83 12 is_stmt 0 view .LVU121
	movq	%r14, %rdi	# <retval>,
	call	ft_free_2darr@PLT	#
.LVL43:
.L7:
# ft_split.c:75: 		return (NULL);
	.loc 1 75 10 view .LVU122
	xorl	%r14d, %r14d	# <retval>
.LVL44:
	.loc 1 75 10 view .LVU123
	jmp	.L1	#
.LVL45:
.L20:
.LBB30:
.LBB23:
# ft_split.c:57: 	while (s[count] && s[count] != c)
	.loc 1 57 10 view .LVU124
	leaq	1(%rbx), %rcx	#, _58
.LVL46:
	.loc 1 57 10 view .LVU125
.LBE23:
.LBE30:
	.loc 1 82 3 is_stmt 1 view .LVU126
	.loc 1 84 3 view .LVU127
	.loc 1 85 4 view .LVU128
# ft_split.c:85: 			i++;
	.loc 1 85 5 is_stmt 0 view .LVU129
	incl	%r13d	# i
.LVL47:
	.loc 1 85 5 view .LVU130
	movq	%rcx, %rbx	# _58, s
.LVL48:
	.loc 1 85 5 view .LVU131
	jmp	.L15	#
.LVL49:
.L25:
.LBB31:
.LBB12:
# ft_split.c:22: 	while (*s)
	.loc 1 22 9 view .LVU132
	movl	$1, %edi	#, prephitmp_35
	jmp	.L2	#
.LBE12:
.LBE31:
	.cfi_endproc
.LFE53:
	.size	ft_split, .-ft_split
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x333
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x11
	.long	.LASF23
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x12
	.long	.LASF24
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x13
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x14
	.byte	0x8
	.uleb128 0x7
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x15
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x7
	.long	0x82
	.uleb128 0x7
	.long	0x8e
	.uleb128 0x8
	.long	.LASF13
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xb9
	.uleb128 0x2
	.long	0x9f
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2b
	.byte	0x7
	.long	0x82
	.long	0xd3
	.uleb128 0x2
	.long	0x9f
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x16
	.long	.LASF25
	.byte	0x2
	.byte	0x37
	.byte	0x6
	.long	0xe5
	.uleb128 0x2
	.long	0x9a
	.byte	0
	.uleb128 0x8
	.long	.LASF15
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xff
	.uleb128 0x2
	.long	0x35
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x17
	.long	.LASF26
	.byte	0x1
	.byte	0x41
	.byte	0x8
	.long	0x9a
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x2ae
	.uleb128 0xb
	.string	"s"
	.byte	0x41
	.byte	0x1d
	.long	0x9f
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xb
	.string	"c"
	.byte	0x41
	.byte	0x25
	.long	0x87
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x4
	.long	.LASF19
	.byte	0x43
	.byte	0xa
	.long	0x35
	.uleb128 0xc
	.long	.LASF16
	.byte	0x44
	.byte	0xa
	.long	0x9a
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x18
	.string	"i"
	.byte	0x1
	.byte	0x45
	.byte	0x8
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xc
	.long	.LASF17
	.byte	0x46
	.byte	0x8
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xd
	.long	0x300
	.quad	.LBI8
	.byte	.LVU10
	.long	.LLRL5
	.byte	0x48
	.byte	0xe
	.long	0x1d9
	.uleb128 0x9
	.long	0x316
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x9
	.long	0x30d
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0xe
	.long	.LLRL5
	.uleb128 0x5
	.long	0x31f
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x5
	.long	0x32a
	.long	.LLST9
	.long	.LVUS9
	.byte	0
	.byte	0
	.uleb128 0xd
	.long	0x2ae
	.quad	.LBI15
	.byte	.LVU60
	.long	.LLRL10
	.byte	0x51
	.byte	0x10
	.long	0x282
	.uleb128 0xf
	.long	0x2d4
	.uleb128 0x9
	.long	0x2cb
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0xf
	.long	0x2bf
	.uleb128 0xe
	.long	.LLRL10
	.uleb128 0x5
	.long	0x2dd
	.long	.LLST12
	.long	.LVUS12
	.uleb128 0x5
	.long	0x2e8
	.long	.LLST13
	.long	.LVUS13
	.uleb128 0x5
	.long	0x2f4
	.long	.LLST14
	.long	.LVUS14
	.uleb128 0xa
	.quad	.LVL22
	.long	0xb9
	.long	0x255
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x5
	.byte	0x91
	.sleb128 -68
	.byte	0x94
	.byte	0x4
	.byte	0
	.uleb128 0xa
	.quad	.LVL29
	.long	0xe5
	.long	0x26c
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x10
	.quad	.LVL40
	.long	0xa4
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xa
	.quad	.LVL15
	.long	0xe5
	.long	0x299
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x38
	.byte	0
	.uleb128 0x10
	.quad	.LVL43
	.long	0xd3
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.byte	0
	.uleb128 0x19
	.long	.LASF27
	.byte	0x1
	.byte	0x28
	.byte	0xc
	.long	0x48
	.byte	0x1
	.long	0x300
	.uleb128 0x1a
	.long	.LASF18
	.byte	0x1
	.byte	0x28
	.byte	0x23
	.long	0x9a
	.uleb128 0x6
	.string	"s"
	.byte	0x28
	.byte	0x38
	.long	0x9f
	.uleb128 0x6
	.string	"c"
	.byte	0x28
	.byte	0x40
	.long	0x87
	.uleb128 0x4
	.long	.LASF20
	.byte	0x2a
	.byte	0x7
	.long	0x48
	.uleb128 0x1b
	.string	"len"
	.byte	0x1
	.byte	0x2b
	.byte	0x7
	.long	0x48
	.uleb128 0x4
	.long	.LASF21
	.byte	0x2c
	.byte	0x8
	.long	0x82
	.byte	0
	.uleb128 0x1c
	.long	.LASF28
	.byte	0x1
	.byte	0xf
	.byte	0xf
	.long	0x35
	.byte	0x1
	.uleb128 0x6
	.string	"s"
	.byte	0xf
	.byte	0x29
	.long	0x9f
	.uleb128 0x6
	.string	"c"
	.byte	0xf
	.byte	0x31
	.long	0x87
	.uleb128 0x4
	.long	.LASF20
	.byte	0x11
	.byte	0x9
	.long	0x35
	.uleb128 0x4
	.long	.LASF22
	.byte	0x12
	.byte	0x7
	.long	0x48
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU72
	.uleb128 .LVU76
	.uleb128 .LVU113
	.uleb128 .LVU114
	.uleb128 .LVU131
	.uleb128 .LVU131
	.uleb128 .LVU132
	.uleb128 .LVU132
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU75
	.uleb128 .LVU75
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 .LVU132
	.uleb128 .LVU132
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS2:
	.uleb128 .LVU43
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU74
	.uleb128 .LVU76
	.uleb128 .LVU123
	.uleb128 .LVU124
	.uleb128 .LVU132
.LLST2:
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS3:
	.uleb128 .LVU45
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU74
	.uleb128 .LVU76
	.uleb128 .LVU122
	.uleb128 .LVU124
	.uleb128 .LVU132
.LLST3:
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS4:
	.uleb128 .LVU107
	.uleb128 .LVU114
	.uleb128 .LVU118
	.uleb128 .LVU122
	.uleb128 .LVU125
	.uleb128 .LVU132
.LLST4:
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU10
	.uleb128 .LVU39
	.uleb128 .LVU132
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS7:
	.uleb128 .LVU8
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU38
	.uleb128 .LVU132
	.uleb128 0
.LLST7:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS8:
	.uleb128 .LVU14
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU38
	.uleb128 .LVU132
	.uleb128 0
.LLST8:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x3
	.byte	0x75
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS9:
	.uleb128 .LVU15
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU36
	.uleb128 .LVU132
	.uleb128 0
.LLST9:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS11:
	.uleb128 .LVU60
	.uleb128 .LVU72
	.uleb128 .LVU76
	.uleb128 .LVU107
	.uleb128 .LVU114
	.uleb128 .LVU118
	.uleb128 .LVU124
	.uleb128 .LVU125
.LLST11:
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS12:
	.uleb128 .LVU86
	.uleb128 .LVU92
	.uleb128 .LVU92
	.uleb128 .LVU95
	.uleb128 .LVU95
	.uleb128 .LVU96
	.uleb128 .LVU96
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU105
	.uleb128 .LVU105
	.uleb128 .LVU107
	.uleb128 .LVU124
	.uleb128 .LVU125
.LLST12:
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x7
	.byte	0x73
	.sleb128 0
	.byte	0x20
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x6
	.byte	0x72
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS13:
	.uleb128 .LVU69
	.uleb128 .LVU72
	.uleb128 .LVU76
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU83
	.uleb128 .LVU117
	.uleb128 .LVU118
.LLST13:
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL29-1-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS14:
	.uleb128 .LVU66
	.uleb128 .LVU69
	.uleb128 .LVU114
	.uleb128 .LVU116
.LLST14:
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL40-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL5:
	.byte	0x4
	.uleb128 .LBB8-.Ltext0
	.uleb128 .LBE8-.Ltext0
	.byte	0x4
	.uleb128 .LBB13-.Ltext0
	.uleb128 .LBE13-.Ltext0
	.byte	0x4
	.uleb128 .LBB14-.Ltext0
	.uleb128 .LBE14-.Ltext0
	.byte	0x4
	.uleb128 .LBB31-.Ltext0
	.uleb128 .LBE31-.Ltext0
	.byte	0
.LLRL10:
	.byte	0x4
	.uleb128 .LBB15-.Ltext0
	.uleb128 .LBE15-.Ltext0
	.byte	0x4
	.uleb128 .LBB24-.Ltext0
	.uleb128 .LBE24-.Ltext0
	.byte	0x4
	.uleb128 .LBB25-.Ltext0
	.uleb128 .LBE25-.Ltext0
	.byte	0x4
	.uleb128 .LBB26-.Ltext0
	.uleb128 .LBE26-.Ltext0
	.byte	0x4
	.uleb128 .LBB27-.Ltext0
	.uleb128 .LBE27-.Ltext0
	.byte	0x4
	.uleb128 .LBB28-.Ltext0
	.uleb128 .LBE28-.Ltext0
	.byte	0x4
	.uleb128 .LBB29-.Ltext0
	.uleb128 .LBE29-.Ltext0
	.byte	0x4
	.uleb128 .LBB30-.Ltext0
	.uleb128 .LBE30-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF26:
	.string	"ft_split"
.LASF28:
	.string	"get_str_count"
.LASF20:
	.string	"count"
.LASF22:
	.string	"was_c"
.LASF13:
	.string	"ft_strlen"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF7:
	.string	"short unsigned int"
.LASF24:
	.string	"size_t"
.LASF15:
	.string	"ft_calloc"
.LASF27:
	.string	"append_next_sub"
.LASF8:
	.string	"unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF18:
	.string	"sub_str"
.LASF19:
	.string	"str_count"
.LASF21:
	.string	"found"
.LASF14:
	.string	"ft_strchr"
.LASF11:
	.string	"char"
.LASF17:
	.string	"s_increase"
.LASF10:
	.string	"short int"
.LASF25:
	.string	"ft_free_2darr"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF23:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"str_ar"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_split.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_itoa.o/      0           0     0     644     23507     `
	.file	"ft_itoa.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_itoa.c"
	.p2align 4
	.globl	ft_itoa
	.type	ft_itoa, @function
ft_itoa:
.LVL0:
.LFB52:
	.file 1 "ft_itoa.c"
	.loc 1 35 1 view -0
	.cfi_startproc
	.loc 1 35 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_itoa.c:35: {
	.loc 1 35 1 view .LVU2
	.loc 1 36 2 is_stmt 1 view .LVU3
	.loc 1 37 2 view .LVU4
	.loc 1 38 2 view .LVU5
	.loc 1 40 2 view .LVU6
.LVL1:
	.loc 1 41 2 view .LVU7
# ft_itoa.c:41: 	if (n <= 0)
	.loc 1 41 5 is_stmt 0 view .LVU8
	xorl	%r13d, %r13d	# size
	testl	%edi, %edi	# n
# ft_itoa.c:35: {
	.loc 1 35 1 view .LVU9
	movl	%edi, %ebx	# tmp163, n
# ft_itoa.c:41: 	if (n <= 0)
	.loc 1 41 5 view .LVU10
	setle	%r13b	#, size
.LVL2:
	.loc 1 45 9 is_stmt 1 view .LVU11
	je	.L2	#,
	movl	%edi, %edx	# n, n
.LVL3:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 47 3 view .LVU12
# ft_itoa.c:47: 		n /= 10;
	.loc 1 47 5 is_stmt 0 view .LVU13
	movslq	%edx, %rax	# n, n
	movl	%edx, %ecx	# n, n
	movl	%r13d, %r12d	# size, size
	imulq	$1717986919, %rax, %rax	#, n, tmp114
	sarl	$31, %ecx	#, n
# ft_itoa.c:48: 		size++;
	.loc 1 48 7 view .LVU14
	leal	1(%r13), %r13d	#, size
# ft_itoa.c:47: 		n /= 10;
	.loc 1 47 5 view .LVU15
	sarq	$34, %rax	#, tmp116
.LVL4:
	.loc 1 48 3 is_stmt 1 view .LVU16
	.loc 1 45 9 view .LVU17
	subl	%ecx, %eax	# tmp117, tmp116
.LVL5:
	.loc 1 45 9 is_stmt 0 view .LVU18
	movl	%eax, %edx	# tmp116, n
	jne	.L3	#,
	.loc 1 50 2 is_stmt 1 view .LVU19
# ft_itoa.c:50: 	str = (char *)ft_calloc(size + 1, sizeof(char));
	.loc 1 50 31 is_stmt 0 view .LVU20
	leal	2(%r12), %edi	#, tmp118
# ft_itoa.c:50: 	str = (char *)ft_calloc(size + 1, sizeof(char));
	.loc 1 50 16 view .LVU21
	movl	$1, %esi	#,
	movslq	%edi, %rdi	# tmp118, tmp119
	call	ft_calloc@PLT	#
.LVL6:
	.loc 1 50 16 view .LVU22
	movq	%rax, %rcx	# tmp164, <retval>
.LVL7:
	.loc 1 51 2 is_stmt 1 view .LVU23
# ft_itoa.c:51: 	if (!str)
	.loc 1 51 5 is_stmt 0 view .LVU24
	testq	%rax, %rax	# <retval>
	je	.L1	#,
	.loc 1 53 2 is_stmt 1 view .LVU25
.LVL8:
.LBB4:
.LBI4:
	.loc 1 15 13 view .LVU26
.LBB5:
	.loc 1 17 2 view .LVU27
# ft_itoa.c:17: 	str[size--] = '\0';
	.loc 1 17 10 is_stmt 0 view .LVU28
	movslq	%r13d, %r13	# size, size
# ft_itoa.c:17: 	str[size--] = '\0';
	.loc 1 17 14 view .LVU29
	movb	$0, (%rax,%r13)	#, *_18
	.loc 1 18 2 is_stmt 1 view .LVU30
	.loc 1 20 7 view .LVU31
# ft_itoa.c:20: 	else if (n < 0)
	.loc 1 20 10 is_stmt 0 view .LVU32
	testl	%ebx, %ebx	# n
	js	.L20	#,
.LVL9:
.L5:
	.loc 1 20 10 view .LVU33
	movslq	%r12d, %r12	# size, size
	addq	%rcx, %r12	# <retval>, ivtmp.14
	.p2align 4,,10
	.p2align 3
.L6:
.LVL10:
	.loc 1 29 3 is_stmt 1 view .LVU34
# ft_itoa.c:29: 		str[size--] = '0' + n % 10;
	.loc 1 29 25 is_stmt 0 view .LVU35
	movslq	%ebx, %rax	# n, n
	movl	%ebx, %edx	# n, tmp148
# ft_itoa.c:27: 	while (n)
	.loc 1 27 9 view .LVU36
	decq	%r12	# ivtmp.14
# ft_itoa.c:29: 		str[size--] = '0' + n % 10;
	.loc 1 29 25 view .LVU37
	imulq	$1717986919, %rax, %rax	#, n, tmp145
	sarl	$31, %edx	#, tmp148
	sarq	$34, %rax	#, tmp147
	subl	%edx, %eax	# tmp148, tmp143
	leal	(%rax,%rax,4), %edx	#, tmp151
	addl	%edx, %edx	# tmp152
	subl	%edx, %ebx	# tmp152, tmp153
.LVL11:
# ft_itoa.c:29: 		str[size--] = '0' + n % 10;
	.loc 1 29 21 view .LVU38
	addl	$48, %ebx	#, tmp154
	movb	%bl, 1(%r12)	# tmp154, MEM[(char *)_72]
	.loc 1 30 3 is_stmt 1 view .LVU39
# ft_itoa.c:30: 		n /= 10;
	.loc 1 30 5 is_stmt 0 view .LVU40
	movl	%eax, %ebx	# tmp143, n
.LVL12:
	.loc 1 27 9 is_stmt 1 view .LVU41
	testl	%eax, %eax	# n
	jne	.L6	#,
.LVL13:
.L1:
	.loc 1 27 9 is_stmt 0 view .LVU42
.LBE5:
.LBE4:
# ft_itoa.c:55: }
	.loc 1 55 1 view .LVU43
	addq	$8, %rsp	#,
	movq	%rcx, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL14:
	.p2align 4,,10
	.p2align 3
.L20:
	.cfi_restore_state
.LBB8:
.LBB6:
	.loc 1 22 3 is_stmt 1 view .LVU44
# ft_itoa.c:22: 		str[0] = '-';
	.loc 1 22 10 is_stmt 0 view .LVU45
	movb	$45, (%rax)	#, *str_10
	.loc 1 23 3 is_stmt 1 view .LVU46
.LVL15:
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 25 is_stmt 0 view .LVU47
	movslq	%ebx, %rax	# n, n
.LVL16:
	.loc 1 23 25 view .LVU48
	movl	%ebx, %edx	# n, tmp127
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 11 view .LVU49
	movslq	%r12d, %rsi	# size, size
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 25 view .LVU50
	imulq	$1717986919, %rax, %rax	#, n, tmp124
	sarl	$31, %edx	#, tmp127
	sarq	$34, %rax	#, tmp126
	subl	%edx, %eax	# tmp127, tmp122
	leal	(%rax,%rax,4), %edx	#, tmp130
# ft_itoa.c:25: 		n = -n;
	.loc 1 25 5 view .LVU51
	negl	%eax	# n
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 25 view .LVU52
	addl	%edx, %edx	# tmp131
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 21 view .LVU53
	subl	%ebx, %edx	# n, tmp133
# ft_itoa.c:27: 	while (n)
	.loc 1 27 9 view .LVU54
	addl	$9, %ebx	#, tmp141
.LVL17:
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 21 view .LVU55
	addl	$48, %edx	#, tmp134
	movb	%dl, (%rcx,%rsi)	# tmp134, *_87
	.loc 1 24 3 is_stmt 1 view .LVU56
.LVL18:
	.loc 1 25 3 view .LVU57
	.loc 1 27 9 view .LVU58
	cmpl	$18, %ebx	#, tmp141
	jbe	.L1	#,
# ft_itoa.c:23: 		str[size--] = '0' - n % 10;
	.loc 1 23 11 is_stmt 0 view .LVU59
	decl	%r12d	# size
.LVL19:
	.loc 1 23 11 view .LVU60
	movl	%eax, %ebx	# n, n
.LVL20:
	.loc 1 23 11 view .LVU61
	jmp	.L5	#
.LVL21:
	.p2align 4,,10
	.p2align 3
.L2:
	.loc 1 23 11 view .LVU62
.LBE6:
.LBE8:
	.loc 1 50 2 is_stmt 1 view .LVU63
# ft_itoa.c:50: 	str = (char *)ft_calloc(size + 1, sizeof(char));
	.loc 1 50 16 is_stmt 0 view .LVU64
	movl	$1, %esi	#,
	movl	$2, %edi	#,
	call	ft_calloc@PLT	#
.LVL22:
	movq	%rax, %rcx	# tmp165, <retval>
.LVL23:
	.loc 1 51 2 is_stmt 1 view .LVU65
# ft_itoa.c:51: 	if (!str)
	.loc 1 51 5 is_stmt 0 view .LVU66
	testq	%rax, %rax	# <retval>
	je	.L1	#,
	.loc 1 53 2 is_stmt 1 view .LVU67
.LVL24:
.LBB9:
	.loc 1 15 13 view .LVU68
.LBB7:
	.loc 1 17 2 view .LVU69
	.loc 1 18 2 view .LVU70
	.loc 1 19 3 view .LVU71
# ft_itoa.c:19: 		str[0] = '0';
	.loc 1 19 10 is_stmt 0 view .LVU72
	movl	$48, %eax	#,
.LVL25:
	.loc 1 19 10 view .LVU73
	movw	%ax, (%rcx)	#, MEM <unsigned short> [(char *)str_57]
	.loc 1 27 9 is_stmt 1 view .LVU74
.LBE7:
.LBE9:
# ft_itoa.c:55: }
	.loc 1 55 1 is_stmt 0 view .LVU75
	addq	$8, %rsp	#,
	movq	%rcx, %rax	# <retval>,
	popq	%rbx	#
.LVL26:
	.loc 1 55 1 view .LVU76
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE52:
	.size	ft_itoa, .-ft_itoa
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x1bb
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x7
	.long	.LASF16
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x8
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x9
	.byte	0x8
	.uleb128 0xa
	.byte	0x8
	.long	0x88
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0xb
	.long	.LASF17
	.byte	0x3
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xb1
	.uleb128 0x4
	.long	0x35
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0xc
	.long	.LASF18
	.byte	0x1
	.byte	0x22
	.byte	0x7
	.long	0x82
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x196
	.uleb128 0xd
	.string	"n"
	.byte	0x1
	.byte	0x22
	.byte	0x13
	.long	0x48
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xe
	.long	.LASF14
	.byte	0x1
	.byte	0x24
	.byte	0x7
	.long	0x48
	.uleb128 0xf
	.long	.LASF13
	.byte	0x1
	.byte	0x25
	.byte	0x7
	.long	0x48
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x10
	.string	"str"
	.byte	0x1
	.byte	0x26
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x11
	.long	0x196
	.quad	.LBI4
	.byte	.LVU26
	.long	.LLRL3
	.byte	0x1
	.byte	0x35
	.byte	0x2
	.long	0x15a
	.uleb128 0x3
	.long	0x1b1
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x3
	.long	0x1a9
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x3
	.long	0x19f
	.long	.LLST6
	.long	.LVUS6
	.byte	0
	.uleb128 0x12
	.quad	.LVL6
	.long	0x96
	.long	0x17d
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x7c
	.sleb128 2
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x13
	.quad	.LVL22
	.long	0x96
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x32
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0xd
	.byte	0x1
	.uleb128 0x5
	.string	"str"
	.byte	0x1c
	.long	0x82
	.uleb128 0x5
	.string	"n"
	.byte	0x25
	.long	0x48
	.uleb128 0x15
	.long	.LASF14
	.byte	0x1
	.byte	0xf
	.byte	0x2c
	.long	0x48
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU22
	.uleb128 .LVU62
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x6
	.byte	0x70
	.sleb128 0
	.byte	0x72
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 .LVU7
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU61
	.uleb128 .LVU61
	.uleb128 .LVU62
	.uleb128 .LVU62
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 -9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU23
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 .LVU62
	.uleb128 .LVU65
	.uleb128 .LVU73
	.uleb128 .LVU73
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU28
	.uleb128 .LVU33
	.uleb128 .LVU44
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU60
	.uleb128 .LVU60
	.uleb128 .LVU62
.LLST4:
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x3
	.byte	0x7c
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS5:
	.uleb128 .LVU26
	.uleb128 .LVU33
	.uleb128 .LVU34
	.uleb128 .LVU38
	.uleb128 .LVU41
	.uleb128 .LVU42
	.uleb128 .LVU44
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU57
	.uleb128 .LVU58
	.uleb128 .LVU62
	.uleb128 .LVU68
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 -9
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU26
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU42
	.uleb128 .LVU44
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 .LVU62
	.uleb128 .LVU68
	.uleb128 .LVU73
	.uleb128 .LVU73
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL3:
	.byte	0x4
	.uleb128 .LBB4-.Ltext0
	.uleb128 .LBE4-.Ltext0
	.byte	0x4
	.uleb128 .LBB8-.Ltext0
	.uleb128 .LBE8-.Ltext0
	.byte	0x4
	.uleb128 .LBB9-.Ltext0
	.uleb128 .LBE9-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF19:
	.string	"fill_str"
.LASF8:
	.string	"unsigned int"
.LASF6:
	.string	"unsigned char"
.LASF16:
	.string	"size_t"
.LASF13:
	.string	"n_cpy"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"ft_itoa"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF14:
	.string	"size"
.LASF17:
	.string	"ft_calloc"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_itoa.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_strmapi.o/   0           0     0     644     17102     `
	.file	"ft_strmapi.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strmapi.c"
	.p2align 4
	.globl	ft_strmapi
	.type	ft_strmapi, @function
ft_strmapi:
.LVL0:
.LFB51:
	.file 1 "ft_strmapi.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# ft_strmapi.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
# ft_strmapi.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movq	%rdi, %r12	# tmp98, s
	movq	%rsi, %r14	# tmp99, f
# ft_strmapi.c:20: 	if (!s)
	.loc 1 20 5 view .LVU7
	testq	%rdi, %rdi	# s
	je	.L4	#,
	.loc 1 22 2 is_stmt 1 view .LVU8
# ft_strmapi.c:22: 	new_str = (char *)malloc(sizeof(char) * (ft_strlen(s) + 1));
	.loc 1 22 43 is_stmt 0 view .LVU9
	call	ft_strlen@PLT	#
.LVL1:
# ft_strmapi.c:22: 	new_str = (char *)malloc(sizeof(char) * (ft_strlen(s) + 1));
	.loc 1 22 56 discriminator 1 view .LVU10
	leaq	1(%rax), %rdi	#, tmp93
# ft_strmapi.c:22: 	new_str = (char *)malloc(sizeof(char) * (ft_strlen(s) + 1));
	.loc 1 22 20 discriminator 1 view .LVU11
	call	malloc@PLT	#
.LVL2:
	movq	%rax, %r13	# tmp101, <retval>
.LVL3:
	.loc 1 23 2 is_stmt 1 view .LVU12
# ft_strmapi.c:23: 	if (!new_str)
	.loc 1 23 5 is_stmt 0 view .LVU13
	testq	%rax, %rax	# <retval>
	je	.L4	#,
.LVL4:
	.loc 1 26 9 is_stmt 1 view .LVU14
# ft_strmapi.c:26: 	while (s[i])
	.loc 1 26 10 is_stmt 0 view .LVU15
	movsbl	(%r12), %esi	# *s_17(D),
# ft_strmapi.c:26: 	while (s[i])
	.loc 1 26 9 view .LVU16
	testb	%sil, %sil	# _10
	je	.L7	#,
# ft_strmapi.c:26: 	while (s[i])
	.loc 1 26 10 view .LVU17
	xorl	%ebx, %ebx	# _13
.LVL5:
	.p2align 4,,10
	.p2align 3
.L6:
	.loc 1 28 3 is_stmt 1 view .LVU18
# ft_strmapi.c:28: 		new_str[i] = f(i, s[i]);
	.loc 1 28 16 is_stmt 0 view .LVU19
	movl	%ebx, %edi	# _13, _13
	call	*%r14	# f
.LVL6:
# ft_strmapi.c:28: 		new_str[i] = f(i, s[i]);
	.loc 1 28 14 discriminator 1 view .LVU20
	movb	%al, 0(%r13,%rbx)	# tmp102, MEM[(char *)new_str_21 + _30 * 1]
	.loc 1 29 3 is_stmt 1 view .LVU21
.LVL7:
	.loc 1 26 9 view .LVU22
	incq	%rbx	# _13
.LVL8:
# ft_strmapi.c:26: 	while (s[i])
	.loc 1 26 10 is_stmt 0 view .LVU23
	movsbl	(%r12,%rbx), %esi	# MEM[(const char *)s_17(D) + _13 * 1],
# ft_strmapi.c:26: 	while (s[i])
	.loc 1 26 9 view .LVU24
	testb	%sil, %sil	# _10
	jne	.L6	#,
# ft_strmapi.c:31: 	new_str[i] = '\0';
	.loc 1 31 9 view .LVU25
	addq	%r13, %rbx	# <retval>, _27
.LVL9:
.L5:
	.loc 1 31 2 is_stmt 1 view .LVU26
# ft_strmapi.c:31: 	new_str[i] = '\0';
	.loc 1 31 13 is_stmt 0 view .LVU27
	movb	$0, (%rbx)	#, *prephitmp_28
	.loc 1 32 2 is_stmt 1 view .LVU28
# ft_strmapi.c:33: }
	.loc 1 33 1 is_stmt 0 view .LVU29
	movq	%r13, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
.LVL10:
	.loc 1 33 1 view .LVU30
	popq	%r13	#
.LVL11:
	.loc 1 33 1 view .LVU31
	popq	%r14	#
.LVL12:
	.loc 1 33 1 view .LVU32
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL13:
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
	.loc 1 33 1 view .LVU33
	popq	%rbx	#
# ft_strmapi.c:21: 		return (NULL);
	.loc 1 21 10 view .LVU34
	xorl	%r13d, %r13d	# <retval>
# ft_strmapi.c:33: }
	.loc 1 33 1 view .LVU35
	popq	%r12	#
.LVL14:
	.loc 1 33 1 view .LVU36
	movq	%r13, %rax	# <retval>,
	popq	%r13	#
	popq	%r14	#
.LVL15:
	.loc 1 33 1 view .LVU37
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL16:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
# ft_strmapi.c:26: 	while (s[i])
	.loc 1 26 9 view .LVU38
	movq	%rax, %rbx	# <retval>, _27
	jmp	.L5	#
	.cfi_endproc
.LFE51:
	.size	ft_strmapi, .-ft_strmapi
.Letext0:
	.file 2 "/usr/include/stdlib.h"
	.file 3 "../includes/libft.h"
	.file 4 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x180
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF16
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x7
	.long	.LASF17
	.byte	0x4
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x8
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x9
	.byte	0x8
	.uleb128 0x3
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xa
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x3
	.long	0x8e
	.uleb128 0xb
	.long	.LASF13
	.byte	0x2
	.value	0x2a0
	.byte	0xe
	.long	0x80
	.long	0xb6
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0xc
	.long	.LASF14
	.byte	0x3
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xcc
	.uleb128 0x2
	.long	0x9a
	.byte	0
	.uleb128 0xd
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x82
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x16a
	.uleb128 0x4
	.string	"s"
	.byte	0x1e
	.long	0x9a
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.string	"f"
	.byte	0x28
	.long	0x17e
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xe
	.long	.LASF15
	.byte	0x1
	.byte	0x11
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xf
	.string	"i"
	.byte	0x1
	.byte	0x12
	.byte	0x7
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x10
	.quad	.LVL1
	.long	0xb6
	.long	0x14c
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x11
	.quad	.LVL2
	.long	0x9f
	.uleb128 0x12
	.quad	.LVL6
	.uleb128 0x5
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.byte	0
	.uleb128 0x13
	.long	0x87
	.long	0x17e
	.uleb128 0x2
	.long	0x6b
	.uleb128 0x2
	.long	0x87
	.byte	0
	.uleb128 0x3
	.long	0x16a
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS2:
	.uleb128 .LVU12
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU33
	.uleb128 .LVU38
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS3:
	.uleb128 .LVU14
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU23
	.uleb128 .LVU23
	.uleb128 .LVU26
	.uleb128 .LVU38
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF17:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF16:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF18:
	.string	"ft_strmapi"
.LASF15:
	.string	"new_str"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"ft_strlen"
.LASF13:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strmapi.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_striteri.o/  0           0     0     644     10372     `
	.file	"ft_striteri.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_striteri.c"
	.p2align 4
	.globl	ft_striteri
	.type	ft_striteri, @function
ft_striteri:
.LVL0:
.LFB0:
	.file 1 "ft_striteri.c"
	.loc 1 14 1 view -0
	.cfi_startproc
	.loc 1 14 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_striteri.c:14: {
	.loc 1 14 1 view .LVU2
	.loc 1 15 2 is_stmt 1 view .LVU3
	.loc 1 17 2 view .LVU4
# ft_striteri.c:14: {
	.loc 1 14 1 is_stmt 0 view .LVU5
	movq	%rdi, %rbx	# tmp90, s
	movq	%rsi, %r13	# tmp91, f
# ft_striteri.c:17: 	if (!s)
	.loc 1 17 5 view .LVU6
	testq	%rdi, %rdi	# s
	je	.L8	#,
.LVL1:
	.loc 1 20 9 is_stmt 1 view .LVU7
	cmpb	$0, (%rdi)	#, *s_8(D)
	je	.L8	#,
# ft_striteri.c:19: 	i = 0;
	.loc 1 19 4 is_stmt 0 view .LVU8
	xorl	%r12d, %r12d	# i
.LVL2:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 22 3 is_stmt 1 view .LVU9
	movq	%rbx, %rsi	# s,
	movl	%r12d, %edi	# i,
# ft_striteri.c:20: 	while (s[i])
	.loc 1 20 10 is_stmt 0 view .LVU10
	incq	%rbx	# s
# ft_striteri.c:23: 		i++;
	.loc 1 23 4 view .LVU11
	incl	%r12d	# i
.LVL3:
# ft_striteri.c:22: 		f(i, s + i);
	.loc 1 22 3 view .LVU12
	call	*%r13	# f
.LVL4:
	.loc 1 23 3 is_stmt 1 view .LVU13
	.loc 1 20 9 view .LVU14
	cmpb	$0, (%rbx)	#, MEM[(char *)_3]
	jne	.L3	#,
.LVL5:
.L8:
# ft_striteri.c:25: }
	.loc 1 25 1 is_stmt 0 view .LVU15
	addq	$8, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
.LVL6:
	.loc 1 25 1 view .LVU16
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE0:
	.size	ft_striteri, .-ft_striteri
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xc1
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF4
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x7
	.long	.LASF5
	.byte	0x1
	.byte	0xd
	.byte	0x6
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x95
	.uleb128 0x1
	.string	"s"
	.byte	0x18
	.long	0x95
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x1
	.string	"f"
	.byte	0x22
	.long	0xb8
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x8
	.string	"i"
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.long	0xbd
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x9
	.quad	.LVL4
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 -1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x73
	.sleb128 -1
	.byte	0
	.byte	0
	.uleb128 0x3
	.long	0x9a
	.uleb128 0x4
	.byte	0x1
	.byte	0x6
	.long	.LASF2
	.uleb128 0xa
	.long	0xb1
	.uleb128 0x5
	.long	0xb1
	.uleb128 0x5
	.long	0x95
	.byte	0
	.uleb128 0x4
	.byte	0x4
	.byte	0x7
	.long	.LASF3
	.uleb128 0x3
	.long	0xa1
	.uleb128 0xb
	.byte	0x4
	.byte	0x5
	.string	"int"
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 13
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LFE0-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU7
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU15
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x3
	.byte	0x7c
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF5:
	.string	"ft_striteri"
.LASF3:
	.string	"unsigned int"
.LASF4:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF2:
	.string	"char"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_striteri.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_putnbr_fd.o/ 0           0     0     644     28157     `
	.file	"ft_putnbr_fd.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_putnbr_fd.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC2:
	.string	"-"
.LC3:
	.string	"0"
	.text
	.p2align 4
	.globl	ft_putnbr_fd
	.type	ft_putnbr_fd, @function
ft_putnbr_fd:
.LVL0:
.LFB53:
	.file 1 "ft_putnbr_fd.c"
	.loc 1 51 1 view -0
	.cfi_startproc
	.loc 1 51 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	andq	$-32, %rsp	#,
	subq	$64, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_putnbr_fd.c:51: {
	.loc 1 51 1 view .LVU2
.LBB8:
.LBB9:
# ft_putnbr_fd.c:17: 	dividend[0] = 1;
	.loc 1 17 14 view .LVU3
	vmovdqa	.LC0(%rip), %ymm0	#, tmp113
.LBE9:
.LBE8:
# ft_putnbr_fd.c:51: {
	.loc 1 51 1 view .LVU4
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp144
	movq	%rax, 56(%rsp)	# tmp144, D.5710
	xorl	%eax, %eax	# tmp144
	.loc 1 52 2 is_stmt 1 view .LVU5
	.loc 1 53 2 view .LVU6
	.loc 1 54 2 view .LVU7
	.loc 1 55 2 view .LVU8
	.loc 1 57 2 view .LVU9
.LVL1:
.LBB12:
.LBI8:
	.loc 1 15 13 view .LVU10
.LBB10:
	.loc 1 17 2 view .LVU11
	.loc 1 18 2 view .LVU12
	.loc 1 19 2 view .LVU13
	.loc 1 20 2 view .LVU14
	.loc 1 21 2 view .LVU15
	.loc 1 22 2 view .LVU16
	.loc 1 23 2 view .LVU17
	.loc 1 24 2 view .LVU18
# ft_putnbr_fd.c:25: 	dividend[8] = 100000000;
	.loc 1 25 14 is_stmt 0 view .LVU19
	movq	.LC1(%rip), %rax	#, tmp114
.LBE10:
.LBE12:
# ft_putnbr_fd.c:51: {
	.loc 1 51 1 view .LVU20
	movl	%edi, %r13d	# tmp138, n
	movl	%esi, %r12d	# tmp139, fd
.LBB13:
.LBB11:
# ft_putnbr_fd.c:17: 	dividend[0] = 1;
	.loc 1 17 14 view .LVU21
	vmovdqa	%ymm0, (%rsp)	# tmp113, MEM <vector(8) int> [(int *)&dividend]
	.loc 1 25 2 is_stmt 1 view .LVU22
	.loc 1 26 2 view .LVU23
# ft_putnbr_fd.c:25: 	dividend[8] = 100000000;
	.loc 1 25 14 is_stmt 0 view .LVU24
	movq	%rax, 32(%rsp)	# tmp114, MEM <vector(2) int> [(int *)&dividend + 32B]
.LVL2:
	.loc 1 25 14 view .LVU25
.LBE11:
.LBE13:
	.loc 1 58 2 is_stmt 1 view .LVU26
.LBB14:
.LBI14:
	.loc 1 29 12 view .LVU27
.LBB15:
	.loc 1 31 2 view .LVU28
	.loc 1 32 2 view .LVU29
	.loc 1 34 2 view .LVU30
	.loc 1 35 2 view .LVU31
# ft_putnbr_fd.c:35: 	if (n < 0)
	.loc 1 35 5 is_stmt 0 view .LVU32
	testl	%edi, %edi	# n
	js	.L25	#,
	.loc 1 37 7 is_stmt 1 view .LVU33
# ft_putnbr_fd.c:37: 	else if (n == 0)
	.loc 1 37 10 is_stmt 0 view .LVU34
	je	.L26	#,
	vzeroupper
.LVL3:
.L4:
	.loc 1 37 10 view .LVU35
.LBE15:
.LBE14:
# ft_putnbr_fd.c:51: {
	.loc 1 51 1 view .LVU36
	movl	%r13d, %eax	# n, n
.LBB19:
.LBB16:
# ft_putnbr_fd.c:41: 	pow = 0;
	.loc 1 41 6 view .LVU37
	xorl	%esi, %esi	# pow
	.p2align 4,,10
	.p2align 3
.L6:
.LVL4:
	.loc 1 44 3 is_stmt 1 view .LVU38
# ft_putnbr_fd.c:44: 		n /= 10;
	.loc 1 44 5 is_stmt 0 view .LVU39
	movslq	%eax, %rdx	# n, n
	sarl	$31, %eax	#, n
.LVL5:
# ft_putnbr_fd.c:45: 		pow++;
	.loc 1 45 6 view .LVU40
	incl	%esi	# pow
# ft_putnbr_fd.c:44: 		n /= 10;
	.loc 1 44 5 view .LVU41
	imulq	$1717986919, %rdx, %rdx	#, n, tmp119
.LVL6:
	.loc 1 44 5 view .LVU42
	movl	%eax, %ecx	# n, tmp122
	sarq	$34, %rdx	#, tmp121
.LVL7:
	.loc 1 45 3 is_stmt 1 view .LVU43
	.loc 1 42 9 view .LVU44
	movl	%edx, %eax	# tmp121, tmp121
.LVL8:
	.loc 1 42 9 is_stmt 0 view .LVU45
	subl	%ecx, %eax	# tmp122, tmp121
.LVL9:
	.loc 1 42 9 view .LVU46
	jne	.L6	#,
.LVL10:
.L5:
	.loc 1 42 9 view .LVU47
	movslq	%esi, %rax	# pow, pow
	movl	%esi, %esi	# pow, pow
.LBE16:
.LBE19:
# ft_putnbr_fd.c:69: 			*digit = '0' - temp;
	.loc 1 69 17 view .LVU48
	movl	$48, %r15d	#, tmp137
	leaq	(%rsp,%rax,4), %rbx	#, ivtmp.18
	salq	$2, %rsi	#, tmp135
	movq	%rbx, %r14	# ivtmp.18, _36
	subq	%rsi, %r14	# tmp135, _36
	jmp	.L10	#
.LVL11:
	.p2align 4,,10
	.p2align 3
.L27:
	.loc 1 63 4 is_stmt 1 view .LVU49
	.loc 1 64 4 view .LVU50
# ft_putnbr_fd.c:64: 			*digit = '0' + temp;
	.loc 1 64 17 is_stmt 0 view .LVU51
	addl	$48, %eax	#, tmp125
	movb	%al, 55(%rsp)	# tmp125, digit[0]
.LVL12:
	.loc 1 71 3 is_stmt 1 view .LVU52
.L23:
	.loc 1 71 3 view .LVU53
	.loc 1 71 3 is_stmt 0 view .LVU54
	movl	%edx, %r13d	# tmp124, n
.LVL13:
	.loc 1 72 3 is_stmt 1 view .LVU55
# ft_putnbr_fd.c:72: 		if (write(fd, digit, 1) == -1)
	.loc 1 72 7 is_stmt 0 view .LVU56
	leaq	55(%rsp), %rsi	#, tmp129
	movl	$1, %edx	#,
.LVL14:
	.loc 1 72 7 view .LVU57
	movl	%r12d, %edi	# fd,
	call	write@PLT	#
.LVL15:
# ft_putnbr_fd.c:72: 		if (write(fd, digit, 1) == -1)
	.loc 1 72 6 discriminator 1 view .LVU58
	subq	$4, %rbx	#, ivtmp.18
	.loc 1 72 6 discriminator 1 view .LVU59
	cmpq	$-1, %rax	#, tmp143
	je	.L1	#,
.LVL16:
.L10:
	.loc 1 59 9 is_stmt 1 view .LVU60
	cmpq	%r14, %rbx	# _36, ivtmp.18
	je	.L1	#,
	.loc 1 61 3 view .LVU61
	movl	%r13d, %eax	# n, tmp123
	cltd
	idivl	-4(%rbx)	# MEM[(int *)_24 + -4B]
# ft_putnbr_fd.c:61: 		if (n > 0)
	.loc 1 61 6 is_stmt 0 view .LVU62
	testl	%r13d, %r13d	# n
	jg	.L27	#,
	.loc 1 68 4 is_stmt 1 view .LVU63
.LVL17:
	.loc 1 69 4 view .LVU64
# ft_putnbr_fd.c:69: 			*digit = '0' - temp;
	.loc 1 69 17 is_stmt 0 view .LVU65
	movl	%r15d, %ecx	# tmp137, tmp128
	subl	%eax, %ecx	# tmp123, tmp128
	movb	%cl, 55(%rsp)	# tmp128, digit[0]
	jmp	.L23	#
.LVL18:
	.p2align 4,,10
	.p2align 3
.L26:
.LBB20:
.LBB17:
	.loc 1 38 3 is_stmt 1 view .LVU66
# ft_putnbr_fd.c:38: 		read_val = write(fd, "0", 1);
	.loc 1 38 14 is_stmt 0 view .LVU67
	movl	$1, %edx	#,
	leaq	.LC3(%rip), %rsi	#, tmp116
.LVL19:
	.loc 1 38 14 view .LVU68
	movl	%r12d, %edi	# fd,
.LVL20:
	.loc 1 38 14 view .LVU69
	vzeroupper
.LVL21:
	call	write@PLT	#
.LVL22:
	.loc 1 39 2 is_stmt 1 view .LVU70
# ft_putnbr_fd.c:39: 	if (read_val < 0)
	.loc 1 39 5 is_stmt 0 view .LVU71
	testl	%eax, %eax	# tmp141
	js	.L3	#,
# ft_putnbr_fd.c:47: 	return (pow);
	.loc 1 47 9 view .LVU72
	xorl	%esi, %esi	# pow
	jmp	.L5	#
.LVL23:
	.p2align 4,,10
	.p2align 3
.L1:
	.loc 1 47 9 view .LVU73
.LBE17:
.LBE20:
# ft_putnbr_fd.c:75: }
	.loc 1 75 1 view .LVU74
	movq	56(%rsp), %rax	# D.5710, tmp145
	subq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp145
	jne	.L28	#,
	leaq	-40(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
.LVL24:
	.loc 1 75 1 view .LVU75
	popq	%r13	#
.LVL25:
	.loc 1 75 1 view .LVU76
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL26:
	.p2align 4,,10
	.p2align 3
.L25:
	.cfi_restore_state
.LBB21:
.LBB18:
	.loc 1 36 3 is_stmt 1 view .LVU77
# ft_putnbr_fd.c:36: 		read_val = write(fd, "-", 1);
	.loc 1 36 14 is_stmt 0 view .LVU78
	movl	$1, %edx	#,
	leaq	.LC2(%rip), %rsi	#, tmp115
.LVL27:
	.loc 1 36 14 view .LVU79
	movl	%r12d, %edi	# fd,
.LVL28:
	.loc 1 36 14 view .LVU80
	vzeroupper
.LVL29:
	call	write@PLT	#
.LVL30:
	.loc 1 39 2 is_stmt 1 view .LVU81
# ft_putnbr_fd.c:39: 	if (read_val < 0)
	.loc 1 39 5 is_stmt 0 view .LVU82
	testl	%eax, %eax	# tmp140
	jns	.L4	#,
.L3:
# ft_putnbr_fd.c:40: 		return (-1);
	.loc 1 40 10 view .LVU83
	movl	$-1, %esi	#, pow
	jmp	.L5	#
.LVL31:
.L28:
	.loc 1 40 10 view .LVU84
.LBE18:
.LBE21:
# ft_putnbr_fd.c:75: }
	.loc 1 75 1 view .LVU85
	call	__stack_chk_fail@PLT	#
.LVL32:
	.cfi_endproc
.LFE53:
	.size	ft_putnbr_fd, .-ft_putnbr_fd
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC0:
	.long	1
	.long	10
	.long	100
	.long	1000
	.long	10000
	.long	100000
	.long	1000000
	.long	10000000
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC1:
	.long	100000000
	.long	1000000000
	.text
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/include/unistd.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x2d5
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x10
	.long	.LASF19
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x3
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x11
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x3
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x3
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x80
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x7
	.long	0xab
	.uleb128 0x12
	.uleb128 0x8
	.long	0x8c
	.long	0xbc
	.uleb128 0x9
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x13
	.long	.LASF20
	.byte	0x5
	.value	0x17a
	.byte	0x10
	.long	0x93
	.long	0xdd
	.uleb128 0x4
	.long	0x48
	.uleb128 0x4
	.long	0xa6
	.uleb128 0x4
	.long	0x35
	.byte	0
	.uleb128 0x14
	.long	.LASF21
	.byte	0x1
	.byte	0x32
	.byte	0x6
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x267
	.uleb128 0xa
	.string	"n"
	.byte	0x17
	.long	0x48
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xa
	.string	"fd"
	.byte	0x1e
	.long	0x48
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xb
	.string	"pow"
	.byte	0x34
	.long	0x48
	.uleb128 0xc
	.long	.LASF16
	.byte	0x35
	.long	0x267
	.uleb128 0x2
	.byte	0x77
	.sleb128 0
	.uleb128 0xc
	.long	.LASF17
	.byte	0x36
	.long	0xac
	.uleb128 0x2
	.byte	0x77
	.sleb128 55
	.uleb128 0x15
	.long	.LASF22
	.byte	0x1
	.byte	0x37
	.byte	0x7
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xd
	.long	0x2b0
	.quad	.LBI8
	.byte	.LVU10
	.long	.LLRL3
	.byte	0x39
	.byte	0x2
	.long	0x17a
	.uleb128 0x5
	.long	0x2bd
	.long	.LLST4
	.long	.LVUS4
	.byte	0
	.uleb128 0xd
	.long	0x277
	.quad	.LBI14
	.byte	.LVU27
	.long	.LLRL5
	.byte	0x3a
	.byte	0x8
	.long	0x22b
	.uleb128 0x5
	.long	0x290
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x5
	.long	0x288
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x16
	.long	.LLRL5
	.uleb128 0x17
	.long	0x299
	.uleb128 0x18
	.long	0x2a3
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x6
	.quad	.LVL21
	.uleb128 0x1
	.byte	0x30
	.uleb128 0xe
	.quad	.LVL22
	.long	0xbc
	.long	0x1f8
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC3
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x6
	.quad	.LVL29
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x19
	.quad	.LVL30
	.long	0xbc
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC2
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x6
	.quad	.LVL3
	.uleb128 0x1
	.byte	0x30
	.uleb128 0xe
	.quad	.LVL15
	.long	0xbc
	.long	0x259
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x77
	.sleb128 55
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x1a
	.quad	.LVL32
	.long	0x2cf
	.byte	0
	.uleb128 0x8
	.long	0x48
	.long	0x277
	.uleb128 0x9
	.long	0x41
	.byte	0x9
	.byte	0
	.uleb128 0x1b
	.long	.LASF23
	.byte	0x1
	.byte	0x1d
	.byte	0xc
	.long	0x48
	.byte	0x1
	.long	0x2b0
	.uleb128 0xf
	.string	"n"
	.byte	0x16
	.long	0x48
	.uleb128 0xf
	.string	"fd"
	.byte	0x1d
	.long	0x48
	.uleb128 0xb
	.string	"pow"
	.byte	0x1f
	.long	0x48
	.uleb128 0x1c
	.long	.LASF18
	.byte	0x1
	.byte	0x20
	.byte	0x7
	.long	0x48
	.byte	0
	.uleb128 0x1d
	.long	.LASF24
	.byte	0x1
	.byte	0xf
	.byte	0xd
	.byte	0x1
	.long	0x2ca
	.uleb128 0x1e
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x1b
	.long	0x2ca
	.byte	0
	.uleb128 0x7
	.long	0x48
	.uleb128 0x1f
	.long	.LASF25
	.long	.LASF25
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x83
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 50
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 29
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU53
	.uleb128 .LVU54
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU66
	.uleb128 .LVU66
	.uleb128 .LVU69
	.uleb128 .LVU69
	.uleb128 .LVU76
	.uleb128 .LVU77
	.uleb128 .LVU80
	.uleb128 .LVU80
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU66
	.uleb128 .LVU66
	.uleb128 .LVU68
	.uleb128 .LVU68
	.uleb128 .LVU75
	.uleb128 .LVU75
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU79
	.uleb128 .LVU79
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS2:
	.uleb128 .LVU52
	.uleb128 .LVU53
	.uleb128 .LVU53
	.uleb128 .LVU55
.LLST2:
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -48
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x8
	.byte	0x7d
	.sleb128 0
	.byte	0x73
	.sleb128 -4
	.byte	0x94
	.byte	0x4
	.byte	0x1b
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU10
	.uleb128 .LVU25
.LLST4:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x57
	.byte	0
.LVUS6:
	.uleb128 .LVU27
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU49
	.uleb128 .LVU66
	.uleb128 .LVU68
	.uleb128 .LVU68
	.uleb128 .LVU73
	.uleb128 .LVU77
	.uleb128 .LVU79
	.uleb128 .LVU79
	.uleb128 .LVU84
.LLST6:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS7:
	.uleb128 .LVU27
	.uleb128 .LVU35
	.uleb128 .LVU38
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU42
	.uleb128 .LVU43
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU47
	.uleb128 .LVU66
	.uleb128 .LVU69
	.uleb128 .LVU69
	.uleb128 .LVU73
	.uleb128 .LVU77
	.uleb128 .LVU80
	.uleb128 .LVU80
	.uleb128 .LVU84
.LLST7:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x6
	.byte	0x71
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x6
	.byte	0x71
	.sleb128 0
	.byte	0x72
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS8:
	.uleb128 .LVU31
	.uleb128 .LVU35
	.uleb128 .LVU66
	.uleb128 .LVU70
	.uleb128 .LVU70
	.uleb128 .LVU73
	.uleb128 .LVU77
	.uleb128 .LVU81
	.uleb128 .LVU81
	.uleb128 .LVU84
.LLST8:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL3:
	.byte	0x4
	.uleb128 .LBB8-.Ltext0
	.uleb128 .LBE8-.Ltext0
	.byte	0x4
	.uleb128 .LBB12-.Ltext0
	.uleb128 .LBE12-.Ltext0
	.byte	0x4
	.uleb128 .LBB13-.Ltext0
	.uleb128 .LBE13-.Ltext0
	.byte	0
.LLRL5:
	.byte	0x4
	.uleb128 .LBB14-.Ltext0
	.uleb128 .LBE14-.Ltext0
	.byte	0x4
	.uleb128 .LBB19-.Ltext0
	.uleb128 .LBE19-.Ltext0
	.byte	0x4
	.uleb128 .LBB20-.Ltext0
	.uleb128 .LBE20-.Ltext0
	.byte	0x4
	.uleb128 .LBB21-.Ltext0
	.uleb128 .LBE21-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF22:
	.string	"temp"
.LASF24:
	.string	"fill_div"
.LASF18:
	.string	"read_val"
.LASF3:
	.string	"long unsigned int"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF11:
	.string	"size_t"
.LASF21:
	.string	"ft_putnbr_fd"
.LASF20:
	.string	"write"
.LASF6:
	.string	"unsigned char"
.LASF13:
	.string	"char"
.LASF14:
	.string	"ssize_t"
.LASF23:
	.string	"start"
.LASF2:
	.string	"long int"
.LASF16:
	.string	"dividend"
.LASF12:
	.string	"__ssize_t"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF25:
	.string	"__stack_chk_fail"
.LASF17:
	.string	"digit"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_putnbr_fd.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/0              0           0     0     644     11771     `
	.file	"ft_lstnew_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstnew_bonus.c"
	.p2align 4
	.globl	ft_lstnew
	.type	ft_lstnew, @function
ft_lstnew:
.LVL0:
.LFB51:
	.file 1 "ft_lstnew_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstnew_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
# ft_lstnew_bonus.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU5
	movq	%rdi, %rbx	# tmp86, content
# ft_lstnew_bonus.c:19: 	new = (t_list *)malloc(sizeof(t_list));
	.loc 1 19 18 view .LVU6
	movl	$16, %edi	#,
.LVL1:
	.loc 1 19 18 view .LVU7
	call	malloc@PLT	#
.LVL2:
	.loc 1 20 2 is_stmt 1 view .LVU8
# ft_lstnew_bonus.c:20: 	if (!new)
	.loc 1 20 5 is_stmt 0 view .LVU9
	testq	%rax, %rax	# <retval>
	je	.L1	#,
	.loc 1 22 2 is_stmt 1 view .LVU10
# ft_lstnew_bonus.c:22: 	new->content = content;
	.loc 1 22 15 is_stmt 0 view .LVU11
	movq	%rbx, (%rax)	# content, new_4->content
	.loc 1 23 2 is_stmt 1 view .LVU12
# ft_lstnew_bonus.c:23: 	new->next = NULL;
	.loc 1 23 12 is_stmt 0 view .LVU13
	movq	$0, 8(%rax)	#, new_4->next
	.loc 1 24 2 is_stmt 1 view .LVU14
.L1:
# ft_lstnew_bonus.c:25: }
	.loc 1 25 1 is_stmt 0 view .LVU15
	movq	-8(%rbp), %rbx	#,
.LVL3:
	.loc 1 25 1 view .LVU16
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstnew, .-ft_lstnew
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 4 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x13e
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x2
	.long	.LASF15
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x7
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x8
	.long	.LASF18
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xb6
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x80
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xb6
	.byte	0x8
	.byte	0
	.uleb128 0x4
	.long	0x90
	.uleb128 0x2
	.long	.LASF16
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x90
	.uleb128 0x9
	.long	.LASF19
	.byte	0x4
	.value	0x2a0
	.byte	0xe
	.long	0x80
	.long	0xde
	.uleb128 0xa
	.long	0x35
	.byte	0
	.uleb128 0xb
	.long	.LASF20
	.byte	0x1
	.byte	0xf
	.byte	0x9
	.long	0x13c
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x13c
	.uleb128 0xc
	.long	.LASF13
	.byte	0x1
	.byte	0xf
	.byte	0x19
	.long	0x80
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xd
	.string	"new"
	.byte	0x1
	.byte	0x11
	.byte	0xa
	.long	0x13c
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xe
	.quad	.LVL2
	.long	0xc7
	.uleb128 0xf
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x40
	.byte	0
	.byte	0
	.uleb128 0x4
	.long	0xbb
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 .LVU8
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF15:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"s_list"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF20:
	.string	"ft_lstnew"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF16:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF19:
	.string	"malloc"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_lstnew_bonus.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/19             0           0     0     644     9343      `
	.file	"ft_lstadd_front_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstadd_front_bonus.c"
	.p2align 4
	.globl	ft_lstadd_front
	.type	ft_lstadd_front, @function
ft_lstadd_front:
.LVL0:
.LFB51:
	.file 1 "ft_lstadd_front_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstadd_front_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_lstadd_front_bonus.c:17: 	if (!lst)
	.loc 1 17 5 is_stmt 0 view .LVU4
	testq	%rdi, %rdi	# lst
	je	.L6	#,
	.loc 1 19 2 is_stmt 1 view .LVU5
# ft_lstadd_front_bonus.c:19: 	new->next = *lst;
	.loc 1 19 14 is_stmt 0 view .LVU6
	movq	(%rdi), %rax	# *lst_3(D), _1
# ft_lstadd_front_bonus.c:19: 	new->next = *lst;
	.loc 1 19 12 view .LVU7
	movq	%rax, 8(%rsi)	# _1, new_5(D)->next
	.loc 1 20 2 is_stmt 1 view .LVU8
# ft_lstadd_front_bonus.c:20: 	(*lst) = new;
	.loc 1 20 9 is_stmt 0 view .LVU9
	movq	%rsi, (%rdi)	# new, *lst_3(D)
.L6:
# ft_lstadd_front_bonus.c:21: }
	.loc 1 21 1 view .LVU10
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstadd_front, .-ft_lstadd_front
.Letext0:
	.file 2 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xf9
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x7
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x8
	.long	.LASF16
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xaa
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x74
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xaa
	.byte	0x8
	.byte	0
	.uleb128 0x2
	.long	0x84
	.uleb128 0x9
	.long	.LASF17
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x84
	.uleb128 0xa
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0xf2
	.uleb128 0x4
	.string	"lst"
	.byte	0x1f
	.long	0xf2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.string	"new"
	.byte	0x2c
	.long	0xf7
	.uleb128 0x1
	.byte	0x54
	.byte	0
	.uleb128 0x2
	.long	0xf7
	.uleb128 0x2
	.long	0xaf
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"s_list"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF10:
	.string	"short int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF17:
	.string	"t_list"
.LASF18:
	.string	"ft_lstadd_front"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_lstadd_front_bonus.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/44             0           0     0     644     11656     `
	.file	"ft_lstsize_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstsize_bonus.c"
	.p2align 4
	.globl	ft_lstsize
	.type	ft_lstsize, @function
ft_lstsize:
.LVL0:
.LFB51:
	.file 1 "ft_lstsize_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstsize_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
# ft_lstsize_bonus.c:19: 	if (!lst)
	.loc 1 19 5 is_stmt 0 view .LVU5
	testq	%rdi, %rdi	# lst
	je	.L5	#,
.LVL1:
	.loc 1 22 9 is_stmt 1 view .LVU6
# ft_lstsize_bonus.c:22: 	while (lst->next)
	.loc 1 22 12 is_stmt 0 view .LVU7
	movq	8(%rdi), %rdx	# lst_5(D)->next, _1
# ft_lstsize_bonus.c:22: 	while (lst->next)
	.loc 1 22 9 view .LVU8
	testq	%rdx, %rdx	# _1
	je	.L6	#,
# ft_lstsize_bonus.c:21: 	size = 1;
	.loc 1 21 7 view .LVU9
	movl	$1, %eax	#, size
.LVL2:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 24 3 is_stmt 1 view .LVU10
# ft_lstsize_bonus.c:22: 	while (lst->next)
	.loc 1 22 12 is_stmt 0 view .LVU11
	movq	8(%rdx), %rdx	# MEM[(struct t_list *)_12].next, _1
# ft_lstsize_bonus.c:24: 		size++;
	.loc 1 24 7 view .LVU12
	incq	%rax	# size
.LVL3:
	.loc 1 25 3 is_stmt 1 view .LVU13
	.loc 1 22 9 view .LVU14
	testq	%rdx, %rdx	# _1
	jne	.L4	#,
# ft_lstsize_bonus.c:28: }
	.loc 1 28 1 is_stmt 0 view .LVU15
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL4:
	.p2align 4,,10
	.p2align 3
.L5:
	.cfi_restore_state
# ft_lstsize_bonus.c:20: 		return (0);
	.loc 1 20 10 view .LVU16
	xorl	%eax, %eax	# <retval>
# ft_lstsize_bonus.c:28: }
	.loc 1 28 1 view .LVU17
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL5:
	.p2align 4,,10
	.p2align 3
.L6:
	.cfi_restore_state
# ft_lstsize_bonus.c:22: 	while (lst->next)
	.loc 1 22 9 view .LVU18
	movl	$1, %eax	#, <retval>
	.loc 1 27 2 is_stmt 1 view .LVU19
# ft_lstsize_bonus.c:28: }
	.loc 1 28 1 is_stmt 0 view .LVU20
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstsize, .-ft_lstsize
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x114
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x2
	.long	.LASF15
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x7
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x8
	.long	.LASF18
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xb6
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x80
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xb6
	.byte	0x8
	.byte	0
	.uleb128 0x4
	.long	0x90
	.uleb128 0x2
	.long	.LASF16
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x90
	.uleb128 0x9
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x112
	.uleb128 0xa
	.string	"lst"
	.byte	0x1
	.byte	0xf
	.byte	0x18
	.long	0x112
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xb
	.long	.LASF20
	.byte	0x1
	.byte	0x11
	.byte	0x9
	.long	0x35
	.long	.LLST1
	.long	.LVUS1
	.byte	0
	.uleb128 0x4
	.long	0xbb
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU14
	.uleb128 .LVU16
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 .LVU6
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU16
	.uleb128 .LVU18
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF15:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"s_list"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF19:
	.string	"ft_lstsize"
.LASF5:
	.string	"long double"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF20:
	.string	"size"
.LASF16:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_lstsize_bonus.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/64             0           0     0     644     10036     `
	.file	"ft_lstlast_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstlast_bonus.c"
	.p2align 4
	.globl	ft_lstlast
	.type	ft_lstlast, @function
ft_lstlast:
.LVL0:
.LFB51:
	.file 1 "ft_lstlast_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstlast_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_lstlast_bonus.c:17: 	if (!lst)
	.loc 1 17 5 is_stmt 0 view .LVU4
	testq	%rdi, %rdi	# lst
	je	.L4	#,
.LVL1:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 19 9 is_stmt 1 view .LVU5
	movq	%rdi, %rax	# lst, <retval>
# ft_lstlast_bonus.c:19: 	while (lst->next)
	.loc 1 19 12 is_stmt 0 view .LVU6
	movq	8(%rdi), %rdi	# lst_2->next, lst
.LVL2:
# ft_lstlast_bonus.c:19: 	while (lst->next)
	.loc 1 19 9 view .LVU7
	testq	%rdi, %rdi	# lst
	jne	.L3	#,
# ft_lstlast_bonus.c:22: }
	.loc 1 22 1 view .LVU8
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL3:
.L4:
	.cfi_restore_state
# ft_lstlast_bonus.c:18: 		return (NULL);
	.loc 1 18 10 view .LVU9
	xorl	%eax, %eax	# <retval>
# ft_lstlast_bonus.c:22: }
	.loc 1 22 1 view .LVU10
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstlast, .-ft_lstlast
.Letext0:
	.file 2 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xf4
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x5
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x6
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x7
	.long	.LASF16
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xaa
	.uleb128 0x2
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x74
	.byte	0
	.uleb128 0x2
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xaa
	.byte	0x8
	.byte	0
	.uleb128 0x3
	.long	0x84
	.uleb128 0x8
	.long	.LASF17
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x84
	.uleb128 0x9
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0x9
	.long	0xf2
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0xf2
	.uleb128 0xa
	.string	"lst"
	.byte	0x1
	.byte	0xf
	.byte	0x1c
	.long	0xf2
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.uleb128 0x3
	.long	0xaf
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU5
	.uleb128 .LVU5
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"ft_lstlast"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF16:
	.string	"s_list"
.LASF17:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_lstlast_bonus.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/84             0           0     0     644     11176     `
	.file	"ft_lstadd_back_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstadd_back_bonus.c"
	.p2align 4
	.globl	ft_lstadd_back
	.type	ft_lstadd_back, @function
ft_lstadd_back:
.LVL0:
.LFB51:
	.file 1 "ft_lstadd_back_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstadd_back_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_lstadd_back_bonus.c:17: 	if (!lst)
	.loc 1 17 5 is_stmt 0 view .LVU4
	testq	%rdi, %rdi	# lst
	je	.L11	#,
	.loc 1 19 2 is_stmt 1 view .LVU5
# ft_lstadd_back_bonus.c:19: 	if (!(*lst))
	.loc 1 19 8 is_stmt 0 view .LVU6
	movq	(%rdi), %rdx	# *lst_7(D), prephitmp_15
# ft_lstadd_back_bonus.c:19: 	if (!(*lst))
	.loc 1 19 5 view .LVU7
	testq	%rdx, %rdx	# prephitmp_15
	je	.L3	#,
	.loc 1 24 9 is_stmt 1 view .LVU8
# ft_lstadd_back_bonus.c:24: 	while ((*lst)->next)
	.loc 1 24 15 is_stmt 0 view .LVU9
	movq	8(%rdx), %rax	# _1->next, _3
# ft_lstadd_back_bonus.c:24: 	while ((*lst)->next)
	.loc 1 24 9 view .LVU10
	testq	%rax, %rax	# _3
	je	.L5	#,
.LVL1:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 25 3 is_stmt 1 view .LVU11
	.loc 1 24 9 view .LVU12
	movq	%rax, %rdx	# _3, prephitmp_15
# ft_lstadd_back_bonus.c:24: 	while ((*lst)->next)
	.loc 1 24 15 is_stmt 0 view .LVU13
	movq	8(%rax), %rax	# prephitmp_11->next, _3
# ft_lstadd_back_bonus.c:24: 	while ((*lst)->next)
	.loc 1 24 9 view .LVU14
	testq	%rax, %rax	# _3
	jne	.L4	#,
.LVL2:
.L5:
	.loc 1 26 2 is_stmt 1 view .LVU15
# ft_lstadd_back_bonus.c:26: 	(*lst)->next = new;
	.loc 1 26 15 is_stmt 0 view .LVU16
	movq	%rsi, 8(%rdx)	# new, _16->next
.L11:
# ft_lstadd_back_bonus.c:27: }
	.loc 1 27 1 view .LVU17
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL3:
	.p2align 4,,10
	.p2align 3
.L3:
	.cfi_restore_state
	.loc 1 21 3 is_stmt 1 view .LVU18
# ft_lstadd_back_bonus.c:21: 		*lst = new;
	.loc 1 21 8 is_stmt 0 view .LVU19
	movq	%rsi, (%rdi)	# new, *lst_7(D)
	.loc 1 22 3 is_stmt 1 view .LVU20
# ft_lstadd_back_bonus.c:27: }
	.loc 1 27 1 is_stmt 0 view .LVU21
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstadd_back, .-ft_lstadd_back
.Letext0:
	.file 2 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x103
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x5
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x6
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x7
	.long	.LASF16
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xaa
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x74
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xaa
	.byte	0x8
	.byte	0
	.uleb128 0x2
	.long	0x84
	.uleb128 0x8
	.long	.LASF17
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x84
	.uleb128 0x9
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0xfc
	.uleb128 0xa
	.string	"lst"
	.byte	0x1
	.byte	0xf
	.byte	0x1e
	.long	0xfc
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xb
	.string	"new"
	.byte	0x1
	.byte	0xf
	.byte	0x2b
	.long	0x101
	.uleb128 0x1
	.byte	0x54
	.byte	0
	.uleb128 0x2
	.long	0x101
	.uleb128 0x2
	.long	0xaf
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU12
	.uleb128 .LVU18
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"s_list"
.LASF18:
	.string	"ft_lstadd_back"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF17:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_lstadd_back_bonus.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/108            0           0     0     644     12294     `
	.file	"ft_lstdelone_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstdelone_bonus.c"
	.p2align 4
	.globl	ft_lstdelone
	.type	ft_lstdelone, @function
ft_lstdelone:
.LVL0:
.LFB51:
	.file 1 "ft_lstdelone_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstdelone_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_lstdelone_bonus.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU4
	movq	%rdi, %rbx	# tmp86, lst
# ft_lstdelone_bonus.c:17: 	if (!lst)
	.loc 1 17 5 view .LVU5
	testq	%rdi, %rdi	# lst
	je	.L3	#,
	.loc 1 19 2 is_stmt 1 view .LVU6
	movq	(%rdi), %rdi	# lst_3(D)->content, lst_3(D)->content
.LVL1:
	.loc 1 19 2 is_stmt 0 view .LVU7
	call	*%rsi	# del
.LVL2:
	.loc 1 20 2 is_stmt 1 view .LVU8
	movq	%rbx, %rdi	# lst,
# ft_lstdelone_bonus.c:21: }
	.loc 1 21 1 is_stmt 0 view .LVU9
	movq	-8(%rbp), %rbx	#,
.LVL3:
	.loc 1 21 1 view .LVU10
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_lstdelone_bonus.c:20: 	free(lst);
	.loc 1 20 2 view .LVU11
	jmp	free@PLT	#
.LVL4:
	.p2align 4,,10
	.p2align 3
.L3:
	.cfi_restore_state
# ft_lstdelone_bonus.c:21: }
	.loc 1 21 1 view .LVU12
	movq	-8(%rbp), %rbx	#,
.LVL5:
	.loc 1 21 1 view .LVU13
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstdelone, .-ft_lstdelone
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x145
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x7
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x8
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x9
	.long	.LASF16
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xaa
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x74
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xaa
	.byte	0x8
	.byte	0
	.uleb128 0x2
	.long	0x84
	.uleb128 0xa
	.long	.LASF17
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x84
	.uleb128 0xb
	.long	.LASF18
	.byte	0x3
	.value	0x2af
	.byte	0xd
	.long	0xce
	.uleb128 0x4
	.long	0x74
	.byte	0
	.uleb128 0xc
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x133
	.uleb128 0x5
	.string	"lst"
	.byte	0x1b
	.long	0x133
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.string	"del"
	.byte	0x27
	.long	0x143
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xd
	.quad	.LVL2
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0xe
	.quad	.LVL4
	.long	0xbb
	.uleb128 0xf
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0
	.byte	0
	.uleb128 0x2
	.long	0xaf
	.uleb128 0x10
	.long	0x143
	.uleb128 0x4
	.long	0x74
	.byte	0
	.uleb128 0x2
	.long	0x138
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x83
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x82
	.uleb128 0x19
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF18:
	.string	"free"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"s_list"
.LASF19:
	.string	"ft_lstdelone"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF17:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_lstdelone_bonus.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/130            0           0     0     644     13256     `
	.file	"ft_lstclear_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstclear_bonus.c"
	.p2align 4
	.globl	ft_lstclear
	.type	ft_lstclear, @function
ft_lstclear:
.LVL0:
.LFB51:
	.file 1 "ft_lstclear_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstclear_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
# ft_lstclear_bonus.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU5
	movq	%rdi, %r12	# tmp89, lst
	movq	%rsi, %r13	# tmp90, del
# ft_lstclear_bonus.c:19: 	if (!lst)
	.loc 1 19 5 view .LVU6
	testq	%rdi, %rdi	# lst
	je	.L13	#,
	.loc 1 21 9 is_stmt 1 view .LVU7
	movq	(%rdi), %rdi	# *lst_7(D), _15
.LVL1:
	.loc 1 21 9 is_stmt 0 view .LVU8
	testq	%rdi, %rdi	# _15
	jne	.L6	#,
	jmp	.L13	#
.LVL2:
	.p2align 4,,10
	.p2align 3
.L15:
	.loc 1 25 4 is_stmt 1 view .LVU9
	movq	%rax, %rdi	# _1,
	call	*%r13	# del
.LVL3:
	.loc 1 26 3 view .LVU10
	movq	(%r12), %rdi	# *lst_7(D), *lst_7(D)
	call	free@PLT	#
.LVL4:
	.loc 1 27 3 view .LVU11
# ft_lstclear_bonus.c:27: 		*lst = next;
	.loc 1 27 8 is_stmt 0 view .LVU12
	movq	%rbx, (%r12)	# next, *lst_7(D)
	.loc 1 21 9 is_stmt 1 view .LVU13
	testq	%rbx, %rbx	# next
	je	.L13	#,
.L5:
# ft_lstclear_bonus.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU14
	movq	%rbx, %rdi	# next, _15
.LVL5:
.L6:
	.loc 1 23 3 is_stmt 1 view .LVU15
# ft_lstclear_bonus.c:24: 		if ((*lst)->content)
	.loc 1 24 13 is_stmt 0 view .LVU16
	movq	(%rdi), %rax	# _16->content, _1
# ft_lstclear_bonus.c:23: 		next = (*lst)->next;
	.loc 1 23 8 view .LVU17
	movq	8(%rdi), %rbx	# _16->next, next
.LVL6:
	.loc 1 24 3 is_stmt 1 view .LVU18
# ft_lstclear_bonus.c:24: 		if ((*lst)->content)
	.loc 1 24 6 is_stmt 0 view .LVU19
	testq	%rax, %rax	# _1
	jne	.L15	#,
	.loc 1 26 3 is_stmt 1 view .LVU20
	call	free@PLT	#
.LVL7:
	.loc 1 27 3 view .LVU21
# ft_lstclear_bonus.c:27: 		*lst = next;
	.loc 1 27 8 is_stmt 0 view .LVU22
	movq	%rbx, (%r12)	# next, *lst_7(D)
	.loc 1 21 9 is_stmt 1 view .LVU23
	testq	%rbx, %rbx	# next
	jne	.L5	#,
.LVL8:
.L13:
# ft_lstclear_bonus.c:30: }
	.loc 1 30 1 is_stmt 0 view .LVU24
	addq	$8, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
.LVL9:
	.loc 1 30 1 view .LVU25
	popq	%r13	#
.LVL10:
	.loc 1 30 1 view .LVU26
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstclear, .-ft_lstclear
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x156
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x8
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x9
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0xa
	.long	.LASF16
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xaa
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x74
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xaa
	.byte	0x8
	.byte	0
	.uleb128 0x2
	.long	0x84
	.uleb128 0xb
	.long	.LASF17
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x84
	.uleb128 0xc
	.long	.LASF18
	.byte	0x3
	.value	0x2af
	.byte	0xd
	.long	0xce
	.uleb128 0x4
	.long	0x74
	.byte	0
	.uleb128 0xd
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x13f
	.uleb128 0x5
	.string	"lst"
	.byte	0x1b
	.long	0x13f
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.string	"del"
	.byte	0x27
	.long	0x154
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xe
	.long	.LASF14
	.byte	0x1
	.byte	0x11
	.byte	0xa
	.long	0x144
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x6
	.quad	.LVL4
	.long	0xbb
	.uleb128 0x6
	.quad	.LVL7
	.long	0xbb
	.byte	0
	.uleb128 0x2
	.long	0x144
	.uleb128 0x2
	.long	0xaf
	.uleb128 0xf
	.long	0x154
	.uleb128 0x4
	.long	0x74
	.byte	0
	.uleb128 0x2
	.long	0x149
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU26
	.uleb128 .LVU26
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU9
	.uleb128 .LVU15
	.uleb128 .LVU18
	.uleb128 .LVU24
.LLST2:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF19:
	.string	"ft_lstclear"
.LASF18:
	.string	"free"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"s_list"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF17:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_lstclear_bonus.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/151            0           0     0     644     10657     `
	.file	"ft_lstiter_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstiter_bonus.c"
	.p2align 4
	.globl	ft_lstiter
	.type	ft_lstiter, @function
ft_lstiter:
.LVL0:
.LFB51:
	.file 1 "ft_lstiter_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstiter_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 17 9 view .LVU4
# ft_lstiter_bonus.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU5
	movq	%rdi, %rbx	# tmp86, lst
	movq	%rsi, %r12	# tmp87, f
# ft_lstiter_bonus.c:17: 	while (lst)
	.loc 1 17 9 view .LVU6
	testq	%rdi, %rdi	# lst
	je	.L8	#,
.LVL1:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 19 3 is_stmt 1 view .LVU7
	movq	(%rbx), %rdi	# lst_11->content, lst_11->content
	call	*%r12	# f
.LVL2:
	.loc 1 20 3 view .LVU8
# ft_lstiter_bonus.c:20: 		lst = lst->next;
	.loc 1 20 7 is_stmt 0 view .LVU9
	movq	8(%rbx), %rbx	# lst_11->next, lst
.LVL3:
	.loc 1 17 9 is_stmt 1 view .LVU10
	testq	%rbx, %rbx	# lst
	jne	.L3	#,
.L8:
# ft_lstiter_bonus.c:22: }
	.loc 1 22 1 is_stmt 0 view .LVU11
	popq	%rbx	#
.LVL4:
	.loc 1 22 1 view .LVU12
	popq	%r12	#
.LVL5:
	.loc 1 22 1 view .LVU13
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_lstiter, .-ft_lstiter
.Letext0:
	.file 2 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x10e
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x5
	.long	.LASF15
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x6
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x7
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x8
	.long	.LASF16
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xaa
	.uleb128 0x3
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x74
	.byte	0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xaa
	.byte	0x8
	.byte	0
	.uleb128 0x2
	.long	0x84
	.uleb128 0x9
	.long	.LASF17
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x84
	.uleb128 0xa
	.long	.LASF18
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0xfc
	.uleb128 0x4
	.string	"lst"
	.byte	0x19
	.long	0xfc
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.string	"f"
	.byte	0x25
	.long	0x10c
	.long	.LLST1
	.long	.LVUS1
	.byte	0
	.uleb128 0x2
	.long	0xaf
	.uleb128 0xb
	.long	0x10c
	.uleb128 0xc
	.long	0x74
	.byte	0
	.uleb128 0x2
	.long	0x101
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU12
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF15:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"s_list"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF18:
	.string	"ft_lstiter"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF17:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"next"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_lstiter_bonus.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/171            0           0     0     644     18597     `
	.file	"ft_lstmap_bonus.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_lstmap_bonus.c"
	.p2align 4
	.globl	ft_lstmap
	.type	ft_lstmap, @function
ft_lstmap:
.LVL0:
.LFB51:
	.file 1 "ft_lstmap_bonus.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$16, %rsp	#,
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# ft_lstmap_bonus.c:16: {
	.loc 1 16 1 view .LVU2
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp100
	movq	%rax, -40(%rbp)	# tmp100, D.5663
	xorl	%eax, %eax	# tmp100
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
# ft_lstmap_bonus.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movq	%rdi, %r14	# tmp94, lst
	movq	%rsi, %r12	# tmp95, f
	movq	%rdx, %r13	# tmp96, del
# ft_lstmap_bonus.c:20: 	if (!lst)
	.loc 1 20 5 view .LVU7
	testq	%rdi, %rdi	# lst
	je	.L7	#,
	.loc 1 22 2 is_stmt 1 view .LVU8
# ft_lstmap_bonus.c:22: 	head = (t_list *)ft_calloc(1, sizeof(t_list));
	.loc 1 22 19 is_stmt 0 view .LVU9
	movl	$16, %esi	#,
.LVL1:
	.loc 1 22 19 view .LVU10
	movl	$1, %edi	#,
.LVL2:
	.loc 1 22 19 view .LVU11
	call	ft_calloc@PLT	#
.LVL3:
# ft_lstmap_bonus.c:22: 	head = (t_list *)ft_calloc(1, sizeof(t_list));
	.loc 1 22 7 discriminator 1 view .LVU12
	movq	%rax, -48(%rbp)	# <retval>, head
	.loc 1 23 2 is_stmt 1 view .LVU13
.LVL4:
	.loc 1 24 2 view .LVU14
	.loc 1 24 9 view .LVU15
# ft_lstmap_bonus.c:22: 	head = (t_list *)ft_calloc(1, sizeof(t_list));
	.loc 1 22 19 is_stmt 0 view .LVU16
	movq	%rax, %rbx	# tmp97, <retval>
# ft_lstmap_bonus.c:24: 	while (current_new)
	.loc 1 24 9 view .LVU17
	testq	%rax, %rax	# <retval>
	je	.L1	#,
.LVL5:
	.p2align 4,,10
	.p2align 3
.L5:
	.loc 1 26 3 is_stmt 1 view .LVU18
# ft_lstmap_bonus.c:26: 		current_new->content = f(lst->content);
	.loc 1 26 26 is_stmt 0 view .LVU19
	movq	(%r14), %rdi	# lst_31->content, lst_31->content
	call	*%r12	# f
.LVL6:
# ft_lstmap_bonus.c:27: 		lst = lst->next;
	.loc 1 27 7 view .LVU20
	movq	8(%r14), %r14	# lst_31->next, lst
# ft_lstmap_bonus.c:26: 		current_new->content = f(lst->content);
	.loc 1 26 24 discriminator 1 view .LVU21
	movq	%rax, (%rbx)	# tmp98, current_new_32->content
	.loc 1 27 3 is_stmt 1 view .LVU22
	.loc 1 28 3 view .LVU23
# ft_lstmap_bonus.c:28: 		if (!lst)
	.loc 1 28 6 is_stmt 0 view .LVU24
	testq	%r14, %r14	# lst
	je	.L12	#,
	.loc 1 30 3 is_stmt 1 view .LVU25
# ft_lstmap_bonus.c:30: 		current_new->next = (t_list *)ft_calloc(1, sizeof(t_list));
	.loc 1 30 33 is_stmt 0 view .LVU26
	movl	$16, %esi	#,
	movl	$1, %edi	#,
	call	ft_calloc@PLT	#
.LVL7:
# ft_lstmap_bonus.c:30: 		current_new->next = (t_list *)ft_calloc(1, sizeof(t_list));
	.loc 1 30 21 discriminator 1 view .LVU27
	movq	%rax, 8(%rbx)	# _4, current_new_32->next
	.loc 1 31 3 is_stmt 1 view .LVU28
.LVL8:
	.loc 1 32 3 view .LVU29
# ft_lstmap_bonus.c:32: 		if (!current_new)
	.loc 1 32 6 is_stmt 0 view .LVU30
	testq	%rax, %rax	# _4
	je	.L14	#,
	movq	%rax, %rbx	# _4, <retval>
	jmp	.L5	#
	.p2align 4,,10
	.p2align 3
.L14:
	.loc 1 33 4 is_stmt 1 view .LVU31
	leaq	-48(%rbp), %rdi	#, tmp91
	movq	%r13, %rsi	# del,
	call	ft_lstclear@PLT	#
.LVL9:
.L12:
	.loc 1 24 9 view .LVU32
# ft_lstmap_bonus.c:35: 	return (head);
	.loc 1 35 9 is_stmt 0 view .LVU33
	movq	-48(%rbp), %rbx	# head, <retval>
	.loc 1 35 2 is_stmt 1 view .LVU34
.LVL10:
.L1:
# ft_lstmap_bonus.c:36: }
	.loc 1 36 1 is_stmt 0 view .LVU35
	movq	-40(%rbp), %rax	# D.5663, tmp101
	subq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp101
	jne	.L15	#,
	addq	$16, %rsp	#,
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
.LVL11:
	.loc 1 36 1 view .LVU36
	popq	%r13	#
.LVL12:
	.loc 1 36 1 view .LVU37
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL13:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
# ft_lstmap_bonus.c:21: 		return (lst);
	.loc 1 21 10 view .LVU38
	xorl	%ebx, %ebx	# <retval>
	jmp	.L1	#
.LVL14:
.L15:
# ft_lstmap_bonus.c:36: }
	.loc 1 36 1 view .LVU39
	call	__stack_chk_fail@PLT	#
.LVL15:
	.cfi_endproc
.LFE51:
	.size	ft_lstmap, .-ft_lstmap
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x20a
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x9
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x7
	.long	.LASF15
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xa
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xb
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0xc
	.long	.LASF18
	.byte	0x10
	.byte	0x2
	.byte	0x4d
	.byte	0x10
	.long	0xb6
	.uleb128 0x8
	.long	.LASF13
	.byte	0x4f
	.byte	0xa
	.long	0x80
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x50
	.byte	0x11
	.long	0xb6
	.byte	0x8
	.byte	0
	.uleb128 0x4
	.long	0x90
	.uleb128 0x7
	.long	.LASF16
	.byte	0x2
	.byte	0x51
	.byte	0x3
	.long	0x90
	.uleb128 0xd
	.long	.LASF19
	.byte	0x2
	.byte	0x59
	.byte	0x6
	.long	0xde
	.uleb128 0x2
	.long	0xde
	.uleb128 0x2
	.long	0xe8
	.byte	0
	.uleb128 0x4
	.long	0xe3
	.uleb128 0x4
	.long	0xbb
	.uleb128 0x4
	.long	0xed
	.uleb128 0xe
	.long	0xf8
	.uleb128 0x2
	.long	0x80
	.byte	0
	.uleb128 0xf
	.long	.LASF20
	.byte	0x2
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0x113
	.uleb128 0x2
	.long	0x35
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x10
	.long	.LASF21
	.byte	0x1
	.byte	0xf
	.byte	0x9
	.long	0xe3
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x1f0
	.uleb128 0x5
	.string	"lst"
	.byte	0x1b
	.long	0xe3
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.string	"f"
	.byte	0x28
	.long	0x1ff
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x5
	.string	"del"
	.byte	0x3b
	.long	0xe8
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x11
	.long	.LASF22
	.byte	0x1
	.byte	0x11
	.byte	0xa
	.long	0xe3
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x12
	.long	.LASF23
	.byte	0x1
	.byte	0x12
	.byte	0xa
	.long	0xe3
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x6
	.quad	.LVL3
	.long	0xf8
	.long	0x1a8
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x40
	.byte	0
	.uleb128 0x6
	.quad	.LVL7
	.long	0xf8
	.long	0x1c4
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x40
	.byte	0
	.uleb128 0x6
	.quad	.LVL9
	.long	0xc7
	.long	0x1e2
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x13
	.quad	.LVL15
	.long	0x204
	.byte	0
	.uleb128 0x14
	.long	0x80
	.long	0x1ff
	.uleb128 0x2
	.long	0x80
	.byte	0
	.uleb128 0x4
	.long	0x1f0
	.uleb128 0x15
	.long	.LASF24
	.long	.LASF24
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU18
	.uleb128 .LVU38
	.uleb128 .LVU39
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS3:
	.uleb128 .LVU14
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU35
.LLST3:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF8:
	.string	"unsigned int"
.LASF13:
	.string	"content"
.LASF15:
	.string	"size_t"
.LASF23:
	.string	"head"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"s_list"
.LASF19:
	.string	"ft_lstclear"
.LASF21:
	.string	"ft_lstmap"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF20:
	.string	"ft_calloc"
.LASF16:
	.string	"t_list"
.LASF10:
	.string	"short int"
.LASF22:
	.string	"current_new"
.LASF14:
	.string	"next"
.LASF24:
	.string	"__stack_chk_fail"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_lstmap_bonus.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/190            0           0     0     644     98084     `
	.file	"get_next_line_utils.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "get_next_line_utils.c"
	.p2align 4
	.globl	cleanup
	.type	cleanup, @function
cleanup:
.LVL0:
.LFB28:
	.file 1 "get_next_line_utils.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line_utils.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
.LVL1:
	.loc 1 20 2 view .LVU5
	.loc 1 20 14 view .LVU6
# get_next_line_utils.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rdi, %rdx	# tmp103, current_file
# get_next_line_utils.c:20: 	while (temp && (temp != current_file))
	.loc 1 20 14 view .LVU8
	cmpq	%rdi, %rsi	# current_file, first_file
	je	.L2	#,
	testq	%rsi, %rsi	# first_file
	je	.L15	#,
# get_next_line_utils.c:19: 	temp = first_file;
	.loc 1 19 7 view .LVU9
	movq	%rsi, %rax	# first_file, temp
.LVL2:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 21 3 is_stmt 1 view .LVU10
# get_next_line_utils.c:21: 		temp = temp->next_file;
	.loc 1 21 8 is_stmt 0 view .LVU11
	movq	48(%rax), %rax	# temp_21->next_file, temp
.LVL3:
	.loc 1 20 14 is_stmt 1 view .LVU12
	testq	%rax, %rax	# temp
	je	.L15	#,
	cmpq	%rax, %rdx	# temp, current_file
	jne	.L3	#,
	.loc 1 22 2 view .LVU13
# get_next_line_utils.c:22: 	if (!temp)
	.loc 1 22 5 is_stmt 0 view .LVU14
	testq	%rax, %rax	# temp
	je	.L15	#,
.LVL4:
	.p2align 4,,10
	.p2align 3
.L9:
	.loc 1 29 28 is_stmt 1 view .LVU15
	movq	%rsi, %rax	# first_file, temp
# get_next_line_utils.c:29: 		while ((temp->next_file) != current_file)
	.loc 1 29 15 is_stmt 0 view .LVU16
	movq	48(%rsi), %rsi	# temp_9->next_file, first_file
.LVL5:
# get_next_line_utils.c:29: 		while ((temp->next_file) != current_file)
	.loc 1 29 28 view .LVU17
	cmpq	%rdx, %rsi	# current_file, first_file
	jne	.L9	#,
	.loc 1 31 3 is_stmt 1 view .LVU18
# get_next_line_utils.c:31: 		temp->next_file = current_file->next_file;
	.loc 1 31 33 is_stmt 0 view .LVU19
	movq	48(%rsi), %rdx	# current_file_13(D)->next_file, _7
.LVL6:
# get_next_line_utils.c:32: 		free(current_file);
	.loc 1 32 3 view .LVU20
	movq	%rsi, %rdi	# first_file,
.LVL7:
# get_next_line_utils.c:31: 		temp->next_file = current_file->next_file;
	.loc 1 31 19 view .LVU21
	movq	%rdx, 48(%rax)	# _7, temp_30->next_file
	.loc 1 32 3 is_stmt 1 view .LVU22
	call	free@PLT	#
.LVL8:
.L15:
# get_next_line_utils.c:35: }
	.loc 1 35 1 is_stmt 0 view .LVU23
	xorl	%eax, %eax	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL9:
.L2:
	.cfi_restore_state
	.loc 1 22 2 is_stmt 1 view .LVU24
# get_next_line_utils.c:22: 	if (!temp)
	.loc 1 22 5 is_stmt 0 view .LVU25
	testq	%rsi, %rsi	# first_file
	je	.L15	#,
	.loc 1 24 2 is_stmt 1 view .LVU26
# get_next_line_utils.c:24: 	current_file->first_file = NULL;
	.loc 1 24 27 is_stmt 0 view .LVU27
	movq	$0, 40(%rdi)	#, current_file_13(D)->first_file
	.loc 1 25 2 is_stmt 1 view .LVU28
# get_next_line_utils.c:25: 	current_file->fd = 0;
	.loc 1 25 19 is_stmt 0 view .LVU29
	movl	$0, 24(%rdi)	#, current_file_13(D)->fd
	.loc 1 26 2 is_stmt 1 view .LVU30
# get_next_line_utils.c:26: 	if (current_file != first_file && current_file)
	.loc 1 26 5 is_stmt 0 view .LVU31
	cmpq	%rdi, %rsi	# current_file, first_file
	jne	.L9	#,
# get_next_line_utils.c:35: }
	.loc 1 35 1 view .LVU32
	xorl	%eax, %eax	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE28:
	.size	cleanup, .-cleanup
	.p2align 4
	.globl	get_current_file
	.type	get_current_file, @function
get_current_file:
.LVL10:
.LFB29:
	.loc 1 38 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 38 1 is_stmt 0 view .LVU34
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line_utils.c:38: {
	.loc 1 38 1 view .LVU35
	.loc 1 39 2 is_stmt 1 view .LVU36
	.loc 1 41 2 view .LVU37
.LVL11:
	.loc 1 42 2 view .LVU38
# get_next_line_utils.c:38: {
	.loc 1 38 1 is_stmt 0 view .LVU39
	movl	%edi, %r12d	# tmp90, fd
	movq	%rsi, %r13	# tmp91, first_file
# get_next_line_utils.c:41: 	current_file = first_file;
	.loc 1 41 15 view .LVU40
	movq	%rsi, %rbx	# first_file, <retval>
# get_next_line_utils.c:42: 	while ((current_file->fd != fd) && (current_file->next_file))
	.loc 1 42 8 view .LVU41
	jmp	.L31	#
.LVL12:
	.p2align 4,,10
	.p2align 3
.L36:
# get_next_line_utils.c:42: 	while ((current_file->fd != fd) && (current_file->next_file))
	.loc 1 42 50 discriminator 1 view .LVU42
	movq	48(%rbx), %rax	# current_file_5->next_file, _2
# get_next_line_utils.c:42: 	while ((current_file->fd != fd) && (current_file->next_file))
	.loc 1 42 34 discriminator 1 view .LVU43
	testq	%rax, %rax	# _2
	je	.L35	#,
# get_next_line_utils.c:43: 		current_file = current_file->next_file;
	.loc 1 43 16 view .LVU44
	movq	%rax, %rbx	# _2, <retval>
.LVL13:
.L31:
	.loc 1 42 34 is_stmt 1 view .LVU45
	cmpl	%r12d, 24(%rbx)	# fd, current_file_5->fd
	jne	.L36	#,
.LVL14:
.L30:
	.loc 1 56 2 view .LVU46
# get_next_line_utils.c:56: 	(current_file->return_now) = 0;
	.loc 1 56 29 is_stmt 0 view .LVU47
	movl	$0, 64(%rbx)	#, current_file_6->return_now
	.loc 1 57 2 is_stmt 1 view .LVU48
# get_next_line_utils.c:57: 	current_file->cur_all_c = 1;
	.loc 1 57 26 is_stmt 0 view .LVU49
	movl	$1, 56(%rbx)	#, current_file_6->cur_all_c
	.loc 1 58 2 is_stmt 1 view .LVU50
# get_next_line_utils.c:58: 	current_file->output = NULL;
	.loc 1 58 23 is_stmt 0 view .LVU51
	movq	$0, 16(%rbx)	#, current_file_6->output
	.loc 1 59 2 is_stmt 1 view .LVU52
# get_next_line_utils.c:59: 	current_file->output_size = 0;
	.loc 1 59 28 is_stmt 0 view .LVU53
	movl	$0, 32(%rbx)	#, current_file_6->output_size
	.loc 1 60 2 is_stmt 1 view .LVU54
.LVL15:
.L29:
# get_next_line_utils.c:61: }
	.loc 1 61 1 is_stmt 0 view .LVU55
	addq	$8, %rsp	#,
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
.LVL16:
	.loc 1 61 1 view .LVU56
	popq	%r13	#
.LVL17:
	.loc 1 61 1 view .LVU57
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL18:
	.p2align 4,,10
	.p2align 3
.L35:
	.cfi_restore_state
	.loc 1 44 2 is_stmt 1 view .LVU58
	.loc 1 46 3 view .LVU59
# get_next_line_utils.c:46: 		current_file->next_file = (t_file *)malloc(sizeof(t_file));
	.loc 1 46 39 is_stmt 0 view .LVU60
	movl	$72, %edi	#,
.LVL19:
	.loc 1 46 39 view .LVU61
	call	malloc@PLT	#
.LVL20:
# get_next_line_utils.c:46: 		current_file->next_file = (t_file *)malloc(sizeof(t_file));
	.loc 1 46 27 discriminator 1 view .LVU62
	movq	%rax, 48(%rbx)	# tmp88, current_file_5->next_file
	.loc 1 47 3 is_stmt 1 view .LVU63
# get_next_line_utils.c:47: 		if (!current_file->next_file)
	.loc 1 47 6 is_stmt 0 view .LVU64
	testq	%rax, %rax	# tmp88
	je	.L34	#,
	.loc 1 49 3 is_stmt 1 view .LVU65
.LVL21:
	.loc 1 50 3 view .LVU66
# get_next_line_utils.c:50: 		current_file->first_file = first_file;
	.loc 1 50 28 is_stmt 0 view .LVU67
	movq	%r13, 40(%rax)	# first_file, MEM[(struct t_file *)_4].first_file
	.loc 1 51 3 is_stmt 1 view .LVU68
# get_next_line_utils.c:49: 		current_file = current_file->next_file;
	.loc 1 49 16 is_stmt 0 view .LVU69
	movq	%rax, %rbx	# tmp88, <retval>
# get_next_line_utils.c:51: 		current_file->next_file = NULL;
	.loc 1 51 27 view .LVU70
	movq	$0, 48(%rax)	#, MEM[(struct t_file *)_4].next_file
	.loc 1 52 3 is_stmt 1 view .LVU71
# get_next_line_utils.c:52: 		current_file->fd = fd;
	.loc 1 52 20 is_stmt 0 view .LVU72
	movl	%r12d, 24(%rax)	# fd, MEM[(struct t_file *)_4].fd
	.loc 1 53 3 is_stmt 1 view .LVU73
# get_next_line_utils.c:53: 		current_file->buffer1_chars = 0;
	.loc 1 53 31 is_stmt 0 view .LVU74
	movl	$0, 28(%rax)	#, MEM[(struct t_file *)_4].buffer1_chars
	.loc 1 54 3 is_stmt 1 view .LVU75
# get_next_line_utils.c:54: 		current_file->buffer1_i = 0;
	.loc 1 54 27 is_stmt 0 view .LVU76
	movl	$0, 60(%rax)	#, MEM[(struct t_file *)_4].buffer1_i
	jmp	.L30	#
.LVL22:
.L34:
# get_next_line_utils.c:48: 			return (NULL);
	.loc 1 48 11 view .LVU77
	xorl	%ebx, %ebx	# <retval>
.LVL23:
	.loc 1 48 11 view .LVU78
	jmp	.L29	#
	.cfi_endproc
.LFE29:
	.size	get_current_file, .-get_current_file
	.p2align 4
	.globl	my_str_cpy
	.type	my_str_cpy, @function
my_str_cpy:
.LVL24:
.LFB30:
	.loc 1 64 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 64 1 is_stmt 0 view .LVU80
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line_utils.c:64: {
	.loc 1 64 1 view .LVU81
	.loc 1 65 2 is_stmt 1 view .LVU82
	.loc 1 66 2 view .LVU83
	.loc 1 68 2 view .LVU84
.LVL25:
	.loc 1 69 2 view .LVU85
	.loc 1 70 2 view .LVU86
	.loc 1 70 9 view .LVU87
# get_next_line_utils.c:64: {
	.loc 1 64 1 is_stmt 0 view .LVU88
	movq	%rdi, %rcx	# tmp126, dest
	movq	%rsi, %r9	# tmp127, src
	movq	%rdx, %rdi	# tmp128, src2
.LVL26:
# get_next_line_utils.c:70: 	while (dest[len])
	.loc 1 70 9 view .LVU89
	cmpb	$0, (%rcx)	#, *dest_28(D)
	je	.L44	#,
	leaq	1(%rcx), %rsi	#, ivtmp.47
.LVL27:
	.loc 1 70 9 view .LVU90
	movq	%rsi, %rax	# ivtmp.47, ivtmp.47
.LVL28:
	.p2align 4,,10
	.p2align 3
.L39:
	.loc 1 71 3 is_stmt 1 view .LVU91
	.loc 1 70 9 view .LVU92
	movq	%rax, %rdx	# ivtmp.47, ivtmp.47
	incq	%rax	# ivtmp.47
	.loc 1 70 9 is_stmt 0 view .LVU93
	cmpb	$0, -1(%rax)	#, MEM[(char *)_16 + -1B]
	jne	.L39	#,
# get_next_line_utils.c:71: 		len++;
	.loc 1 71 6 view .LVU94
	movl	%edx, %eax	# ivtmp.47, tmp114
	subl	%esi, %eax	# ivtmp.47, tmp114
	leal	1(%rax), %r8d	#, <retval>
.LVL29:
.L38:
	.loc 1 72 2 is_stmt 1 view .LVU95
# get_next_line_utils.c:72: 	if (src)
	.loc 1 72 5 is_stmt 0 view .LVU96
	testq	%r9, %r9	# src
	je	.L40	#,
.LVL30:
	.loc 1 74 10 is_stmt 1 view .LVU97
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 is_stmt 0 view .LVU98
	movzbl	(%r9), %esi	# *src_30(D), _9
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 10 view .LVU99
	testb	%sil, %sil	# _9
	je	.L40	#,
	leal	1(%r8), %eax	#, tmp116
	movslq	%r8d, %r8	# <retval>, <retval>
	cltq
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 view .LVU100
	subq	%r8, %r9	# <retval>, tmp118
.LVL31:
	.p2align 4,,10
	.p2align 3
.L41:
	.loc 1 75 4 is_stmt 1 view .LVU101
# get_next_line_utils.c:75: 			dest[len++] = src[i2++];
	.loc 1 75 16 is_stmt 0 view .LVU102
	movb	%sil, -1(%rcx,%rax)	# _9, MEM[(char *)dest_28(D) + -1B + ivtmp.36_47 * 1]
	.loc 1 74 10 is_stmt 1 view .LVU103
	movq	%rax, %rdx	# ivtmp.36, ivtmp.36
	incq	%rax	# ivtmp.36
.LVL32:
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 is_stmt 0 view .LVU104
	movzbl	-1(%r9,%rax), %esi	# MEM[(char *)_26 + -1B + ivtmp.36_46 * 1], _9
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 10 view .LVU105
	testb	%sil, %sil	# _9
	jne	.L41	#,
.LVL33:
# get_next_line_utils.c:75: 			dest[len++] = src[i2++];
	.loc 1 75 12 view .LVU106
	movl	%edx, %r8d	# ivtmp.36, <retval>
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 6 view .LVU107
	movslq	%edx, %rdx	# ivtmp.36, <retval>
.LVL34:
	.loc 1 83 6 view .LVU108
	addq	%rcx, %rdx	# dest, _2
.LVL35:
.L40:
	.loc 1 77 2 is_stmt 1 view .LVU109
# get_next_line_utils.c:77: 	if (src2)
	.loc 1 77 5 is_stmt 0 view .LVU110
	testq	%rdi, %rdi	# src2
	je	.L42	#,
.LVL36:
	.loc 1 80 10 is_stmt 1 view .LVU111
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 14 is_stmt 0 view .LVU112
	movzbl	(%rdi), %esi	# *src2_34(D), _14
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 10 view .LVU113
	testb	%sil, %sil	# _14
	je	.L42	#,
	leal	1(%r8), %eax	#, tmp120
	movslq	%r8d, %r8	# <retval>, <retval>
	cltq
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 14 view .LVU114
	subq	%r8, %rdi	# <retval>, tmp122
.LVL37:
	.p2align 4,,10
	.p2align 3
.L43:
	.loc 1 81 4 is_stmt 1 view .LVU115
# get_next_line_utils.c:81: 			dest[len++] = src2[i2++];
	.loc 1 81 16 is_stmt 0 view .LVU116
	movb	%sil, -1(%rcx,%rax)	# _14, MEM[(char *)dest_28(D) + -1B + ivtmp.25_67 * 1]
	.loc 1 80 10 is_stmt 1 view .LVU117
	movq	%rax, %rdx	# ivtmp.25, ivtmp.25
	incq	%rax	# ivtmp.25
.LVL38:
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 14 is_stmt 0 view .LVU118
	movzbl	-1(%rdi,%rax), %esi	# MEM[(char *)_48 + -1B + ivtmp.25_66 * 1], _14
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 10 view .LVU119
	testb	%sil, %sil	# _14
	jne	.L43	#,
.LVL39:
# get_next_line_utils.c:81: 			dest[len++] = src2[i2++];
	.loc 1 81 12 view .LVU120
	movl	%edx, %r8d	# ivtmp.25, <retval>
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 6 view .LVU121
	movslq	%edx, %rdx	# ivtmp.25, <retval>
.LVL40:
	.loc 1 83 6 view .LVU122
	addq	%rcx, %rdx	# dest, _2
.LVL41:
.L42:
	.loc 1 83 2 is_stmt 1 view .LVU123
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 12 is_stmt 0 view .LVU124
	movb	$0, (%rdx)	#, *prephitmp_85
	.loc 1 84 2 is_stmt 1 view .LVU125
# get_next_line_utils.c:85: }
	.loc 1 85 1 is_stmt 0 view .LVU126
	movl	%r8d, %eax	# <retval>,
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL42:
	.p2align 4,,10
	.p2align 3
.L44:
	.cfi_restore_state
# get_next_line_utils.c:70: 	while (dest[len])
	.loc 1 70 9 view .LVU127
	movq	%rcx, %rdx	# dest, _2
.LVL43:
# get_next_line_utils.c:69: 	len = 0;
	.loc 1 69 6 view .LVU128
	xorl	%r8d, %r8d	# <retval>
	jmp	.L38	#
	.cfi_endproc
.LFE30:
	.size	my_str_cpy, .-my_str_cpy
	.p2align 4
	.globl	sort_buffer
	.type	sort_buffer, @function
sort_buffer:
.LVL44:
.LFB31:
	.loc 1 88 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 88 1 is_stmt 0 view .LVU130
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line_utils.c:88: {
	.loc 1 88 1 view .LVU131
	.loc 1 89 2 is_stmt 1 view .LVU132
	.loc 1 91 2 view .LVU133
.LVL45:
	.loc 1 92 2 view .LVU134
	.loc 1 92 41 view .LVU135
# get_next_line_utils.c:88: {
	.loc 1 88 1 is_stmt 0 view .LVU136
	movq	%rdi, %rax	# tmp147, file
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 28 view .LVU137
	movslq	60(%rdi), %rdi	# file_15(D)->buffer1_i,
.LVL46:
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 view .LVU138
	movzbl	(%rax,%rdi), %esi	# file_15(D)->buffer[_25], _26
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 28 view .LVU139
	movq	%rdi, %rdx	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU140
	testb	%sil, %sil	# _26
	je	.L81	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 discriminator 1 view .LVU141
	cmpl	$1, 64(%rax)	#, file_15(D)->return_now
	je	.L81	#,
	.loc 1 94 3 is_stmt 1 view .LVU142
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 8 is_stmt 0 view .LVU143
	vmovq	28(%rax), %xmm0	# MEM <vector(2) int> [(int *)file_15(D) + 28B], vect__38.56
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU144
	vmovq	.LC2(%rip), %xmm1	#, tmp118
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU145
	leal	1(%rdi), %ecx	#, _45
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU146
	movb	%sil, 6(%rax)	# _26, file_15(D)->buffer_copy[0]
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU147
	vmovq	.LC0(%rip), %xmm3	#, tmp115
	vmovq	.LC1(%rip), %xmm2	#, tmp116
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU148
	movl	%ecx, 60(%rax)	# _45, file_15(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU149
	vpaddd	%xmm1, %xmm0, %xmm1	# tmp118, vect__38.56, vect__39.57
	vpaddd	%xmm3, %xmm0, %xmm3	# tmp115, vect__38.56, vect__79.63
	vpaddd	%xmm2, %xmm0, %xmm2	# tmp116, vect__38.56, vect__59.60
	.loc 1 95 3 is_stmt 1 view .LVU150
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU151
	vmovq	%xmm1, 28(%rax)	# vect__39.57, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU152
	.loc 1 97 3 view .LVU153
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU154
	movb	$0, (%rax,%rdi)	#, file_15(D)->buffer[_25]
	.loc 1 98 3 is_stmt 1 view .LVU155
.LVL47:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU156
	cmpb	$10, %sil	#, _26
	je	.L92	#,
	.loc 1 92 41 is_stmt 1 view .LVU157
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU158
	movslq	%ecx, %rcx	# _45, _45
	movzbl	(%rax,%rcx), %edi	# file_15(D)->buffer[_45], _52
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU159
	testb	%dil, %dil	# _52
	je	.L64	#,
	.loc 1 94 3 is_stmt 1 view .LVU160
	.loc 1 95 3 view .LVU161
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU162
	leal	2(%rdx), %esi	#, _65
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU163
	movb	%dil, 7(%rax)	# _52, file_15(D)->buffer_copy[1]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU164
	movl	%esi, 60(%rax)	# _65, file_15(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU165
	vmovq	%xmm2, 28(%rax)	# vect__59.60, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU166
	.loc 1 97 3 view .LVU167
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU168
	movb	$0, (%rax,%rcx)	#, file_15(D)->buffer[_45]
	.loc 1 98 3 is_stmt 1 view .LVU169
.LVL48:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU170
	cmpb	$10, %dil	#, _52
	je	.L93	#,
	.loc 1 92 41 is_stmt 1 view .LVU171
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU172
	movslq	%esi, %rsi	# _65, _65
	movzbl	(%rax,%rsi), %edi	# file_15(D)->buffer[_65], _72
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU173
	testb	%dil, %dil	# _72
	je	.L68	#,
	.loc 1 94 3 is_stmt 1 view .LVU174
	.loc 1 95 3 view .LVU175
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU176
	leal	3(%rdx), %ecx	#, _85
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU177
	movb	%dil, 8(%rax)	# _72, file_15(D)->buffer_copy[2]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU178
	movl	%ecx, 60(%rax)	# _85, file_15(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU179
	vmovq	%xmm3, 28(%rax)	# vect__79.63, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU180
	.loc 1 97 3 view .LVU181
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU182
	movb	$0, (%rax,%rsi)	#, file_15(D)->buffer[_65]
	.loc 1 98 3 is_stmt 1 view .LVU183
.LVL49:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU184
	cmpb	$10, %dil	#, _72
	je	.L94	#,
	.loc 1 92 41 is_stmt 1 view .LVU185
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU186
	movslq	%ecx, %rcx	# _85, _85
	movzbl	(%rax,%rcx), %edi	# file_15(D)->buffer[_85], _92
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU187
	testb	%dil, %dil	# _92
	je	.L71	#,
	.loc 1 94 3 is_stmt 1 view .LVU188
	.loc 1 95 3 view .LVU189
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU190
	vmovq	.LC3(%rip), %xmm1	#, tmp129
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU191
	leal	4(%rdx), %esi	#, _105
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU192
	movb	%dil, 9(%rax)	# _92, file_15(D)->buffer_copy[3]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU193
	movl	%esi, 60(%rax)	# _105, file_15(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU194
	vpaddd	%xmm1, %xmm0, %xmm1	# tmp129, vect__38.56, vect__99.66
	vmovq	%xmm1, 28(%rax)	# vect__99.66, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU195
	.loc 1 97 3 view .LVU196
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU197
	movb	$0, (%rax,%rcx)	#, file_15(D)->buffer[_85]
	.loc 1 98 3 is_stmt 1 view .LVU198
.LVL50:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU199
	cmpb	$10, %dil	#, _92
	je	.L95	#,
	.loc 1 92 41 is_stmt 1 view .LVU200
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU201
	movslq	%esi, %rsi	# _105, _105
	movzbl	(%rax,%rsi), %edi	# file_15(D)->buffer[_105], _112
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU202
	testb	%dil, %dil	# _112
	je	.L73	#,
	.loc 1 94 3 is_stmt 1 view .LVU203
	.loc 1 95 3 view .LVU204
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU205
	vmovq	.LC4(%rip), %xmm1	#, tmp134
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU206
	leal	5(%rdx), %ecx	#, _125
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU207
	movb	%dil, 10(%rax)	# _112, file_15(D)->buffer_copy[4]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU208
	movl	%ecx, 60(%rax)	# _125, file_15(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU209
	vpaddd	%xmm1, %xmm0, %xmm1	# tmp134, vect__38.56, vect__119.69
	vmovq	%xmm1, 28(%rax)	# vect__119.69, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU210
	.loc 1 97 3 view .LVU211
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU212
	movb	$0, (%rax,%rsi)	#, file_15(D)->buffer[_105]
	.loc 1 98 3 is_stmt 1 view .LVU213
.LVL51:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU214
	cmpb	$10, %dil	#, _112
	je	.L96	#,
	.loc 1 92 41 is_stmt 1 view .LVU215
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU216
	movslq	%ecx, %rcx	# _125, _125
	movzbl	(%rax,%rcx), %esi	# file_15(D)->buffer[_125], _132
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU217
	testb	%sil, %sil	# _132
	je	.L76	#,
	.loc 1 94 3 is_stmt 1 view .LVU218
	.loc 1 95 3 view .LVU219
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU220
	vmovq	.LC5(%rip), %xmm1	#, tmp139
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU221
	addl	$6, %edx	#, _145
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU222
	movb	%sil, 11(%rax)	# _132, file_15(D)->buffer_copy[5]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU223
	movl	%edx, 60(%rax)	# _145, file_15(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU224
	vpaddd	%xmm1, %xmm0, %xmm1	# tmp139, vect__38.56, vect__139.72
	vmovq	%xmm1, 28(%rax)	# vect__139.72, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU225
	.loc 1 97 3 view .LVU226
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU227
	movb	$0, (%rax,%rcx)	#, file_15(D)->buffer[_125]
	.loc 1 98 3 is_stmt 1 view .LVU228
.LVL52:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU229
	cmpb	$10, %sil	#, _132
	je	.L97	#,
	.loc 1 92 41 is_stmt 1 view .LVU230
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU231
	movslq	%edx, %rdx	# _145, _145
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU232
	cmpb	$0, (%rax,%rdx)	#, file_15(D)->buffer[_145]
	je	.L79	#,
	.loc 1 94 3 is_stmt 1 view .LVU233
	.loc 1 95 3 view .LVU234
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU235
	vmovq	.LC6(%rip), %xmm1	#, tmp144
	vpaddd	%xmm1, %xmm0, %xmm0	# tmp144, vect__38.56, vect__2.75
	vmovq	%xmm0, 28(%rax)	# vect__2.75, MEM <vector(2) int> [(int *)file_15(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU236
.LVL53:
	.p2align 4,,10
	.p2align 3
.L94:
	.loc 1 99 4 view .LVU237
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU238
	movl	$1, 64(%rax)	#, file_15(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU239
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU240
	movslq	%ecx, %rcx	# _85, _85
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU241
	movl	$3, %edi	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU242
	cmpb	$0, (%rax,%rcx)	#, file_15(D)->buffer[_85]
	je	.L71	#,
.LVL54:
.L61:
	.loc 1 101 2 is_stmt 1 view .LVU243
# get_next_line_utils.c:101: 	(file->buffer_copy)[i2] = '\0';
	.loc 1 101 26 is_stmt 0 view .LVU244
	movb	$0, 6(%rax,%rdi)	#, file_15(D)->buffer_copy[i2_30]
# get_next_line_utils.c:102: }
	.loc 1 102 1 view .LVU245
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL55:
	.p2align 4,,10
	.p2align 3
.L92:
	.cfi_restore_state
	.loc 1 99 4 is_stmt 1 view .LVU246
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU247
	movl	$1, 64(%rax)	#, file_15(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU248
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU249
	movslq	%ecx, %rcx	# _45, _45
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU250
	movl	$1, %edi	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU251
	cmpb	$0, (%rax,%rcx)	#, file_15(D)->buffer[_45]
	jne	.L61	#,
.L64:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU252
	movl	$1, %edi	#,
	jmp	.L61	#
.LVL56:
	.p2align 4,,10
	.p2align 3
.L93:
	.loc 1 99 4 is_stmt 1 view .LVU253
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU254
	movl	$1, 64(%rax)	#, file_15(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU255
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU256
	movslq	%esi, %rsi	# _65, _65
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU257
	movl	$2, %edi	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU258
	cmpb	$0, (%rax,%rsi)	#, file_15(D)->buffer[_65]
	jne	.L61	#,
.L68:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU259
	movl	$2, %edi	#,
	jmp	.L61	#
.LVL57:
	.p2align 4,,10
	.p2align 3
.L95:
	.loc 1 99 4 is_stmt 1 view .LVU260
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU261
	movl	$1, 64(%rax)	#, file_15(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU262
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU263
	movslq	%esi, %rsi	# _105, _105
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU264
	movl	$4, %edi	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU265
	cmpb	$0, (%rax,%rsi)	#, file_15(D)->buffer[_105]
	jne	.L61	#,
.L73:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU266
	movl	$4, %edi	#,
	jmp	.L61	#
.LVL58:
	.p2align 4,,10
	.p2align 3
.L96:
	.loc 1 99 4 is_stmt 1 view .LVU267
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU268
	movl	$1, 64(%rax)	#, file_15(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU269
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU270
	movslq	%ecx, %rcx	# _125, _125
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU271
	movl	$5, %edi	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU272
	cmpb	$0, (%rax,%rcx)	#, file_15(D)->buffer[_125]
	jne	.L61	#,
.L76:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU273
	movl	$5, %edi	#,
	jmp	.L61	#
.LVL59:
	.p2align 4,,10
	.p2align 3
.L97:
	.loc 1 99 4 is_stmt 1 view .LVU274
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU275
	movl	$1, 64(%rax)	#, file_15(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU276
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU277
	movslq	%edx, %rdx	# _145, _145
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU278
	movl	$6, %edi	#,
	cmpb	$0, (%rax,%rdx)	#, file_15(D)->buffer[_145]
	jne	.L61	#,
.L79:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU279
	movl	$6, %edi	#,
	jmp	.L61	#
.LVL60:
	.p2align 4,,10
	.p2align 3
.L81:
# get_next_line_utils.c:91: 	i2 = 0;
	.loc 1 91 5 view .LVU280
	xorl	%edi, %edi	#
	.loc 1 101 2 is_stmt 1 view .LVU281
# get_next_line_utils.c:101: 	(file->buffer_copy)[i2] = '\0';
	.loc 1 101 26 is_stmt 0 view .LVU282
	movb	$0, 6(%rax,%rdi)	#, file_15(D)->buffer_copy[i2_30]
# get_next_line_utils.c:102: }
	.loc 1 102 1 view .LVU283
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL61:
.L71:
	.cfi_restore_state
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU284
	movl	$3, %edi	#,
	jmp	.L61	#
	.cfi_endproc
.LFE31:
	.size	sort_buffer, .-sort_buffer
	.p2align 4
	.globl	append_buffer
	.type	append_buffer, @function
append_buffer:
.LVL62:
.LFB32:
	.loc 1 105 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 105 1 is_stmt 0 view .LVU286
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line_utils.c:105: {
	.loc 1 105 1 view .LVU287
	.loc 1 106 2 is_stmt 1 view .LVU288
	.loc 1 108 2 view .LVU289
.LVL63:
.LBB10:
.LBI10:
	.loc 1 87 6 view .LVU290
.LBB11:
	.loc 1 89 2 view .LVU291
	.loc 1 91 2 view .LVU292
	.loc 1 92 2 view .LVU293
	.loc 1 92 41 view .LVU294
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 28 is_stmt 0 view .LVU295
	movslq	60(%rdi), %r9	# current_file_14(D)->buffer1_i,
.LBE11:
.LBE10:
# get_next_line_utils.c:105: {
	.loc 1 105 1 view .LVU296
	movq	%rdi, %rbx	# tmp206, current_file
.LBB17:
.LBB12:
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 view .LVU297
	movzbl	(%rdi,%r9), %r8d	# current_file_14(D)->buffer[_111], _112
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 28 view .LVU298
	movq	%r9, %rdx	#,
.LBE12:
.LBE17:
# get_next_line_utils.c:109: 	if ((current_file->cur_all_c) > (current_file->output_size))
	.loc 1 109 47 view .LVU299
	movl	32(%rdi), %edi	# current_file_14(D)->output_size, pretmp_165
.LVL64:
.LBB18:
.LBB13:
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU300
	testb	%r8b, %r8b	# _112
	je	.L132	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 discriminator 1 view .LVU301
	cmpl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	je	.L132	#,
	.loc 1 94 3 is_stmt 1 view .LVU302
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 8 is_stmt 0 view .LVU303
	movl	28(%rbx), %ecx	# current_file_14(D)->buffer1_chars, _85
	vmovq	28(%rbx), %xmm1	# MEM <long unsigned int> [(int *)current_file_14(D) + 28B], MEM <long unsigned int> [(int *)current_file_14(D) + 28B]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU304
	leal	1(%r9), %esi	#, _66
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU305
	movb	%r8b, 6(%rbx)	# _112, current_file_14(D)->buffer_copy[0]
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU306
	movl	%esi, 60(%rbx)	# _66, current_file_14(D)->buffer1_i
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU307
	leal	-1(%rcx), %eax	#, tmp162
	movl	%eax, 28(%rbx)	# tmp162, current_file_14(D)->buffer1_chars
	.loc 1 95 3 is_stmt 1 view .LVU308
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 is_stmt 0 view .LVU309
	leal	1(%rdi), %eax	#, _74
	movl	%eax, 32(%rbx)	# _74, current_file_14(D)->output_size
	.loc 1 96 3 is_stmt 1 view .LVU310
	.loc 1 97 3 view .LVU311
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 is_stmt 0 view .LVU312
	movb	$0, (%rbx,%r9)	#, current_file_14(D)->buffer[_111]
	.loc 1 98 3 is_stmt 1 view .LVU313
.LVL65:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU314
	cmpb	$10, %r8b	#, _112
	je	.L155	#,
	.loc 1 92 41 is_stmt 1 view .LVU315
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU316
	movslq	%esi, %rsi	# _66, _66
	movzbl	(%rbx,%rsi), %r9d	# current_file_14(D)->buffer[_66], _42
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU317
	testb	%r9b, %r9b	# _42
	je	.L102	#,
	.loc 1 94 3 is_stmt 1 view .LVU318
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU319
	leal	-2(%rcx), %eax	#, tmp166
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU320
	leal	2(%rdx), %r8d	#, _48
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU321
	movb	%r9b, 7(%rbx)	# _42, current_file_14(D)->buffer_copy[1]
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU322
	movl	%eax, 28(%rbx)	# tmp166, current_file_14(D)->buffer1_chars
	.loc 1 95 3 is_stmt 1 view .LVU323
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 is_stmt 0 view .LVU324
	leal	2(%rdi), %eax	#, _74
	movl	%eax, 32(%rbx)	# _74, current_file_14(D)->output_size
	.loc 1 96 3 is_stmt 1 view .LVU325
	.loc 1 97 3 view .LVU326
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU327
	movl	%r8d, 60(%rbx)	# _48, current_file_14(D)->buffer1_i
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 view .LVU328
	movb	$0, (%rbx,%rsi)	#, current_file_14(D)->buffer[_66]
	.loc 1 98 3 is_stmt 1 view .LVU329
.LVL66:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU330
	cmpb	$10, %r9b	#, _42
	je	.L156	#,
	.loc 1 92 41 is_stmt 1 view .LVU331
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU332
	movslq	%r8d, %r8	# _48, _48
	movzbl	(%rbx,%r8), %r9d	# current_file_14(D)->buffer[_48], _166
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU333
	testb	%r9b, %r9b	# _166
	je	.L104	#,
	.loc 1 94 3 is_stmt 1 view .LVU334
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU335
	leal	-3(%rcx), %eax	#, tmp170
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU336
	leal	3(%rdx), %esi	#, _179
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU337
	movb	%r9b, 8(%rbx)	# _166, current_file_14(D)->buffer_copy[2]
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU338
	movl	%eax, 28(%rbx)	# tmp170, current_file_14(D)->buffer1_chars
	.loc 1 95 3 is_stmt 1 view .LVU339
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 is_stmt 0 view .LVU340
	leal	3(%rdi), %eax	#, _74
	movl	%eax, 32(%rbx)	# _74, current_file_14(D)->output_size
	.loc 1 96 3 is_stmt 1 view .LVU341
	.loc 1 97 3 view .LVU342
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU343
	movl	%esi, 60(%rbx)	# _179, current_file_14(D)->buffer1_i
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 view .LVU344
	movb	$0, (%rbx,%r8)	#, current_file_14(D)->buffer[_48]
	.loc 1 98 3 is_stmt 1 view .LVU345
.LVL67:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU346
	cmpb	$10, %r9b	#, _166
	je	.L157	#,
	.loc 1 92 41 is_stmt 1 view .LVU347
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU348
	movslq	%esi, %rsi	# _179, _179
	movzbl	(%rbx,%rsi), %r9d	# current_file_14(D)->buffer[_179], _186
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU349
	testb	%r9b, %r9b	# _186
	je	.L108	#,
	.loc 1 94 3 is_stmt 1 view .LVU350
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU351
	leal	-4(%rcx), %eax	#, tmp174
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU352
	leal	4(%rdx), %r8d	#, _199
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU353
	movb	%r9b, 9(%rbx)	# _186, current_file_14(D)->buffer_copy[3]
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU354
	movl	%eax, 28(%rbx)	# tmp174, current_file_14(D)->buffer1_chars
	.loc 1 95 3 is_stmt 1 view .LVU355
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 is_stmt 0 view .LVU356
	leal	4(%rdi), %eax	#, _74
	movl	%eax, 32(%rbx)	# _74, current_file_14(D)->output_size
	.loc 1 96 3 is_stmt 1 view .LVU357
	.loc 1 97 3 view .LVU358
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU359
	movl	%r8d, 60(%rbx)	# _199, current_file_14(D)->buffer1_i
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 view .LVU360
	movb	$0, (%rbx,%rsi)	#, current_file_14(D)->buffer[_179]
	.loc 1 98 3 is_stmt 1 view .LVU361
.LVL68:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU362
	cmpb	$10, %r9b	#, _186
	je	.L158	#,
	.loc 1 92 41 is_stmt 1 view .LVU363
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU364
	movslq	%r8d, %r8	# _199, _199
	movzbl	(%rbx,%r8), %r9d	# current_file_14(D)->buffer[_199], _206
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU365
	testb	%r9b, %r9b	# _206
	je	.L111	#,
	.loc 1 94 3 is_stmt 1 view .LVU366
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU367
	leal	-5(%rcx), %eax	#, tmp178
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU368
	leal	5(%rdx), %esi	#, _219
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU369
	movb	%r9b, 10(%rbx)	# _206, current_file_14(D)->buffer_copy[4]
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU370
	movl	%eax, 28(%rbx)	# tmp178, current_file_14(D)->buffer1_chars
	.loc 1 95 3 is_stmt 1 view .LVU371
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 is_stmt 0 view .LVU372
	leal	5(%rdi), %eax	#, _74
	movl	%eax, 32(%rbx)	# _74, current_file_14(D)->output_size
	.loc 1 96 3 is_stmt 1 view .LVU373
	.loc 1 97 3 view .LVU374
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU375
	movl	%esi, 60(%rbx)	# _219, current_file_14(D)->buffer1_i
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 view .LVU376
	movb	$0, (%rbx,%r8)	#, current_file_14(D)->buffer[_199]
	.loc 1 98 3 is_stmt 1 view .LVU377
.LVL69:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU378
	cmpb	$10, %r9b	#, _206
	je	.L159	#,
	.loc 1 92 41 is_stmt 1 view .LVU379
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU380
	movslq	%esi, %rsi	# _219, _219
	movzbl	(%rbx,%rsi), %r8d	# current_file_14(D)->buffer[_219], _226
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU381
	testb	%r8b, %r8b	# _226
	je	.L114	#,
	.loc 1 94 3 is_stmt 1 view .LVU382
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU383
	subl	$6, %ecx	#, tmp182
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 view .LVU384
	leal	6(%rdi), %eax	#, _74
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 view .LVU385
	addl	$6, %edx	#, _239
# get_next_line_utils.c:96: 		(file->buffer_copy)[i2] = (file->buffer)[file->buffer1_i];
	.loc 1 96 27 view .LVU386
	movb	%r8b, 11(%rbx)	# _226, current_file_14(D)->buffer_copy[5]
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 view .LVU387
	movl	%ecx, 28(%rbx)	# tmp182, current_file_14(D)->buffer1_chars
	.loc 1 95 3 is_stmt 1 view .LVU388
# get_next_line_utils.c:95: 		(file->output_size)++;
	.loc 1 95 22 is_stmt 0 view .LVU389
	movl	%eax, 32(%rbx)	# _74, current_file_14(D)->output_size
	.loc 1 96 3 is_stmt 1 view .LVU390
	.loc 1 97 3 view .LVU391
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 36 is_stmt 0 view .LVU392
	movl	%edx, 60(%rbx)	# _239, current_file_14(D)->buffer1_i
# get_next_line_utils.c:97: 		(file->buffer)[((file->buffer1_i)++)] = 0;
	.loc 1 97 41 view .LVU393
	movb	$0, (%rbx,%rsi)	#, current_file_14(D)->buffer[_219]
	.loc 1 98 3 is_stmt 1 view .LVU394
.LVL70:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 6 is_stmt 0 view .LVU395
	cmpb	$10, %r8b	#, _226
	je	.L160	#,
	.loc 1 92 41 is_stmt 1 view .LVU396
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU397
	movslq	%edx, %rdx	# _239, _239
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU398
	cmpb	$0, (%rbx,%rdx)	#, current_file_14(D)->buffer[_239]
	je	.L117	#,
	.loc 1 94 3 is_stmt 1 view .LVU399
	.loc 1 95 3 view .LVU400
# get_next_line_utils.c:94: 		(file->buffer1_chars)--;
	.loc 1 94 24 is_stmt 0 view .LVU401
	vmovq	.LC6(%rip), %xmm0	#, tmp187
	vpaddd	%xmm1, %xmm0, %xmm0	# MEM <long unsigned int> [(int *)current_file_14(D) + 28B], tmp187, vect__47.87
	vmovq	%xmm0, 28(%rbx)	# vect__47.87, MEM <vector(2) int> [(int *)current_file_14(D) + 28B]
	.loc 1 96 3 is_stmt 1 view .LVU402
.LVL71:
	.p2align 4,,10
	.p2align 3
.L157:
	.loc 1 99 4 view .LVU403
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU404
	movl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU405
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU406
	movslq	%esi, %rsi	# _179, _179
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU407
	movl	$3, %ecx	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU408
	cmpb	$0, (%rbx,%rsi)	#, current_file_14(D)->buffer[_179]
	je	.L108	#,
.LVL72:
	.p2align 4,,10
	.p2align 3
.L99:
	.loc 1 101 2 is_stmt 1 view .LVU409
# get_next_line_utils.c:101: 	(file->buffer_copy)[i2] = '\0';
	.loc 1 101 26 is_stmt 0 view .LVU410
	movb	$0, 6(%rbx,%rcx)	#, current_file_14(D)->buffer_copy[i2_123]
.LVL73:
	.loc 1 101 26 view .LVU411
.LBE13:
.LBE18:
	.loc 1 109 2 is_stmt 1 view .LVU412
# get_next_line_utils.c:109: 	if ((current_file->cur_all_c) > (current_file->output_size))
	.loc 1 109 19 is_stmt 0 view .LVU413
	movl	56(%rbx), %edx	# current_file_14(D)->cur_all_c, _1
# get_next_line_utils.c:109: 	if ((current_file->cur_all_c) > (current_file->output_size))
	.loc 1 109 5 view .LVU414
	cmpl	%eax, %edx	# _74, _1
	jle	.L119	#,
	.loc 1 110 3 is_stmt 1 view .LVU415
	movq	16(%rbx), %rsi	# current_file_14(D)->output, _4
.LVL74:
.LBB19:
.LBI19:
	.loc 1 63 5 view .LVU416
.LBB20:
	.loc 1 65 2 view .LVU417
	.loc 1 66 2 view .LVU418
	.loc 1 68 2 view .LVU419
	.loc 1 69 2 view .LVU420
	.loc 1 70 2 view .LVU421
	.loc 1 70 9 view .LVU422
	cmpb	$0, (%rsi)	#, *_4
	je	.L140	#,
	leaq	1(%rsi), %rcx	#, ivtmp.104
	movq	%rcx, %rax	# ivtmp.104, ivtmp.104
.LVL75:
	.p2align 4,,10
	.p2align 3
.L121:
	.loc 1 71 3 view .LVU423
	.loc 1 70 9 view .LVU424
	movq	%rax, %rdx	# ivtmp.104, ivtmp.104
	incq	%rax	# ivtmp.104
	cmpb	$0, -1(%rax)	#, MEM[(char *)_202 + -1B]
	jne	.L121	#,
# get_next_line_utils.c:71: 		len++;
	.loc 1 71 6 is_stmt 0 view .LVU425
	movl	%edx, %eax	# ivtmp.104, tmp189
	subl	%ecx, %eax	# ivtmp.104, tmp189
# get_next_line_utils.c:70: 	while (dest[len])
	.loc 1 70 13 view .LVU426
	movq	%rdx, %rcx	# ivtmp.104, _29
# get_next_line_utils.c:71: 		len++;
	.loc 1 71 6 view .LVU427
	leal	1(%rax), %edi	#, len
.LVL76:
.L120:
	.loc 1 74 10 is_stmt 1 view .LVU428
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 is_stmt 0 view .LVU429
	movzbl	6(%rbx), %edx	# MEM[(char *)current_file_14(D) + 6B], _37
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 10 view .LVU430
	testb	%dl, %dl	# _37
	je	.L122	#,
	leal	1(%rdi), %eax	#, tmp191
	movslq	%edi, %rcx	# len, len
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 view .LVU431
	movq	%rbx, %rdi	# current_file, tmp193
	cltq
	subq	%rcx, %rdi	# len, tmp193
.LVL77:
	.p2align 4,,10
	.p2align 3
.L123:
	.loc 1 75 4 is_stmt 1 view .LVU432
# get_next_line_utils.c:75: 			dest[len++] = src[i2++];
	.loc 1 75 16 is_stmt 0 view .LVU433
	movb	%dl, -1(%rsi,%rax)	# _37, MEM[(char *)_4 + -1B + ivtmp.93_93 * 1]
	.loc 1 74 10 is_stmt 1 view .LVU434
	movq	%rax, %rcx	# ivtmp.93, ivtmp.93
	incq	%rax	# ivtmp.93
.LVL78:
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 is_stmt 0 view .LVU435
	movzbl	5(%rdi,%rax), %edx	# MEM[(char *)_168 + 5B + ivtmp.93_92 * 1], _37
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 10 view .LVU436
	testb	%dl, %dl	# _37
	jne	.L123	#,
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 6 view .LVU437
	movslq	%ecx, %rcx	# ivtmp.93, ivtmp.93
.LVL79:
	.loc 1 83 6 view .LVU438
	addq	%rsi, %rcx	# _4, _29
.LVL80:
.L122:
	.loc 1 77 2 is_stmt 1 view .LVU439
	.loc 1 83 2 view .LVU440
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 12 is_stmt 0 view .LVU441
	movb	$0, (%rcx)	#, *prephitmp_160
	.loc 1 84 2 is_stmt 1 view .LVU442
.LVL81:
	.loc 1 84 2 is_stmt 0 view .LVU443
.LBE20:
.LBE19:
# get_next_line_utils.c:126: 	return (current_file->output);
	.loc 1 126 22 view .LVU444
	movq	16(%rbx), %r12	# current_file_14(D)->output, <retval>
.L98:
# get_next_line_utils.c:127: }
	.loc 1 127 1 view .LVU445
	popq	%rbx	#
.LVL82:
	.loc 1 127 1 view .LVU446
	movq	%r12, %rax	# <retval>,
	popq	%r12	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL83:
	.p2align 4,,10
	.p2align 3
.L119:
	.cfi_restore_state
	.loc 1 113 3 is_stmt 1 view .LVU447
# get_next_line_utils.c:113: 		(current_file->cur_all_c) += (current_file->output_size);
	.loc 1 113 29 is_stmt 0 view .LVU448
	addl	%eax, %edx	# _74, _5
	movl	%edx, 56(%rbx)	# _5, current_file_14(D)->cur_all_c
	.loc 1 114 3 is_stmt 1 view .LVU449
# get_next_line_utils.c:114: 		temp = (char *)malloc(sizeof(char) * (current_file->cur_all_c));
	.loc 1 114 18 is_stmt 0 view .LVU450
	movslq	%edx, %rdi	# _5, _5
	call	malloc@PLT	#
.LVL84:
	movq	%rax, %r12	# tmp207, <retval>
.LVL85:
	.loc 1 115 3 is_stmt 1 view .LVU451
# get_next_line_utils.c:115: 		if (!temp)
	.loc 1 115 6 is_stmt 0 view .LVU452
	testq	%rax, %rax	# <retval>
	je	.L161	#,
	.loc 1 121 3 is_stmt 1 view .LVU453
# get_next_line_utils.c:122: 		my_str_cpy(temp, current_file->output, current_file->buffer_copy);
	.loc 1 122 3 is_stmt 0 view .LVU454
	movq	16(%rbx), %rdi	# current_file_14(D)->output, _9
# get_next_line_utils.c:121: 		*temp = 0;
	.loc 1 121 9 view .LVU455
	movb	$0, (%rax)	#, *temp_18
	.loc 1 122 3 is_stmt 1 view .LVU456
.LVL86:
.LBB22:
.LBI22:
	.loc 1 63 5 view .LVU457
.LBB23:
	.loc 1 65 2 view .LVU458
	.loc 1 66 2 view .LVU459
	.loc 1 68 2 view .LVU460
	.loc 1 69 2 view .LVU461
	.loc 1 70 2 view .LVU462
	.loc 1 70 9 view .LVU463
	.loc 1 72 2 view .LVU464
# get_next_line_utils.c:72: 	if (src)
	.loc 1 72 5 is_stmt 0 view .LVU465
	testq	%rdi, %rdi	# _9
	je	.L141	#,
	.loc 1 74 10 is_stmt 1 view .LVU466
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 is_stmt 0 view .LVU467
	movzbl	(%rdi), %edx	# *_9, _69
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 10 view .LVU468
	movl	$1, %eax	#, ivtmp.119
.LVL87:
	.loc 1 74 10 view .LVU469
	testb	%dl, %dl	# _69
	je	.L141	#,
.LVL88:
	.p2align 4,,10
	.p2align 3
.L128:
	.loc 1 75 4 is_stmt 1 view .LVU470
# get_next_line_utils.c:75: 			dest[len++] = src[i2++];
	.loc 1 75 16 is_stmt 0 view .LVU471
	movb	%dl, -1(%r12,%rax)	# _69, MEM[(char *)temp_18 + -1B + ivtmp.119_228 * 1]
	.loc 1 74 10 is_stmt 1 view .LVU472
	movq	%rax, %rcx	# ivtmp.119, ivtmp.119
	incq	%rax	# ivtmp.119
.LVL89:
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 13 is_stmt 0 view .LVU473
	movzbl	-1(%rdi,%rax), %edx	# MEM[(char *)_9 + -1B + ivtmp.119_229 * 1], _69
# get_next_line_utils.c:74: 		while (src[i2])
	.loc 1 74 10 view .LVU474
	testb	%dl, %dl	# _69
	jne	.L128	#,
# get_next_line_utils.c:75: 			dest[len++] = src[i2++];
	.loc 1 75 24 view .LVU475
	movl	%ecx, %esi	# ivtmp.119, i2
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 6 view .LVU476
	addq	%r12, %rcx	# <retval>, _138
.LVL90:
.L127:
	.loc 1 80 10 is_stmt 1 view .LVU477
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 14 is_stmt 0 view .LVU478
	movzbl	6(%rbx), %edx	# MEM[(char *)current_file_14(D) + 6B], _78
	leal	1(%rsi), %eax	#, tmp198
	movslq	%esi, %r8	# i2, i2
	movq	%rbx, %rsi	# current_file, tmp200
	cltq
	subq	%r8, %rsi	# i2, tmp200
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 10 view .LVU479
	testb	%dl, %dl	# _78
	je	.L130	#,
.LVL91:
	.p2align 4,,10
	.p2align 3
.L131:
	.loc 1 81 4 is_stmt 1 view .LVU480
# get_next_line_utils.c:81: 			dest[len++] = src2[i2++];
	.loc 1 81 16 is_stmt 0 view .LVU481
	movb	%dl, -1(%r12,%rax)	# _78, MEM[(char *)temp_18 + -1B + ivtmp.109_207 * 1]
	.loc 1 80 10 is_stmt 1 view .LVU482
	movq	%rax, %rcx	# ivtmp.109, ivtmp.109
	incq	%rax	# ivtmp.109
.LVL92:
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 14 is_stmt 0 view .LVU483
	movzbl	5(%rsi,%rax), %edx	# MEM[(char *)_227 + 5B + ivtmp.109_208 * 1], _78
# get_next_line_utils.c:80: 		while (src2[i2])
	.loc 1 80 10 view .LVU484
	testb	%dl, %dl	# _78
	jne	.L131	#,
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 6 view .LVU485
	movslq	%ecx, %rcx	# ivtmp.109, ivtmp.109
.LVL93:
	.loc 1 83 6 view .LVU486
	addq	%r12, %rcx	# <retval>, _138
.LVL94:
.L130:
	.loc 1 83 2 is_stmt 1 view .LVU487
# get_next_line_utils.c:83: 	dest[len] = 0;
	.loc 1 83 12 is_stmt 0 view .LVU488
	movb	$0, (%rcx)	#, *prephitmp_147
	.loc 1 84 2 is_stmt 1 view .LVU489
.LVL95:
	.loc 1 84 2 is_stmt 0 view .LVU490
.LBE23:
.LBE22:
	.loc 1 123 3 is_stmt 1 view .LVU491
	call	free@PLT	#
.LVL96:
	.loc 1 124 3 view .LVU492
# get_next_line_utils.c:124: 		current_file->output = temp;
	.loc 1 124 24 is_stmt 0 view .LVU493
	movq	%r12, 16(%rbx)	# <retval>, current_file_14(D)->output
	.loc 1 126 2 is_stmt 1 view .LVU494
# get_next_line_utils.c:127: }
	.loc 1 127 1 is_stmt 0 view .LVU495
	movq	%r12, %rax	# <retval>,
	popq	%rbx	#
.LVL97:
	.loc 1 127 1 view .LVU496
	popq	%r12	#
.LVL98:
	.loc 1 127 1 view .LVU497
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL99:
	.p2align 4,,10
	.p2align 3
.L155:
	.cfi_restore_state
.LBB25:
.LBB14:
	.loc 1 99 4 is_stmt 1 view .LVU498
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU499
	movl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU500
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU501
	movslq	%esi, %rsi	# _66, _66
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU502
	movl	$1, %ecx	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU503
	cmpb	$0, (%rbx,%rsi)	#, current_file_14(D)->buffer[_66]
	jne	.L99	#,
.L102:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU504
	movl	$1, %ecx	#,
	jmp	.L99	#
.LVL100:
	.p2align 4,,10
	.p2align 3
.L156:
	.loc 1 99 4 is_stmt 1 view .LVU505
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU506
	movl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU507
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU508
	movslq	%r8d, %r8	# _48, _48
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU509
	movl	$2, %ecx	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU510
	cmpb	$0, (%rbx,%r8)	#, current_file_14(D)->buffer[_48]
	jne	.L99	#,
.L104:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU511
	movl	$2, %ecx	#,
	jmp	.L99	#
.LVL101:
	.p2align 4,,10
	.p2align 3
.L158:
	.loc 1 99 4 is_stmt 1 view .LVU512
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU513
	movl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU514
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU515
	movslq	%r8d, %r8	# _199, _199
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU516
	movl	$4, %ecx	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU517
	cmpb	$0, (%rbx,%r8)	#, current_file_14(D)->buffer[_199]
	jne	.L99	#,
.L111:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU518
	movl	$4, %ecx	#,
	jmp	.L99	#
.LVL102:
	.p2align 4,,10
	.p2align 3
.L159:
	.loc 1 99 4 is_stmt 1 view .LVU519
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU520
	movl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU521
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU522
	movslq	%esi, %rsi	# _219, _219
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU523
	movl	$5, %ecx	#,
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU524
	cmpb	$0, (%rbx,%rsi)	#, current_file_14(D)->buffer[_219]
	jne	.L99	#,
.L114:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU525
	movl	$5, %ecx	#,
	jmp	.L99	#
.LVL103:
	.p2align 4,,10
	.p2align 3
.L160:
	.loc 1 99 4 is_stmt 1 view .LVU526
# get_next_line_utils.c:99: 			(file->return_now) = 1;
	.loc 1 99 23 is_stmt 0 view .LVU527
	movl	$1, 64(%rbx)	#, current_file_14(D)->return_now
	.loc 1 92 41 is_stmt 1 view .LVU528
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 23 is_stmt 0 view .LVU529
	movslq	%edx, %rdx	# _239, _239
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU530
	movl	$6, %ecx	#,
	cmpb	$0, (%rbx,%rdx)	#, current_file_14(D)->buffer[_239]
	jne	.L99	#,
.L117:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU531
	movl	$6, %ecx	#,
	jmp	.L99	#
.LVL104:
	.p2align 4,,10
	.p2align 3
.L141:
	.loc 1 98 29 view .LVU532
.LBE14:
.LBE25:
.LBB26:
.LBB24:
	movq	%r12, %rcx	# <retval>, _138
	xorl	%esi, %esi	# i2
	jmp	.L127	#
.LVL105:
	.p2align 4,,10
	.p2align 3
.L132:
	.loc 1 98 29 view .LVU533
.LBE24:
.LBE26:
.LBB27:
.LBB15:
# get_next_line_utils.c:92: 	while ((file->buffer)[file->buffer1_i] && (file->return_now) != 1)
	.loc 1 92 41 view .LVU534
	movl	%edi, %eax	# pretmp_165, _74
# get_next_line_utils.c:91: 	i2 = 0;
	.loc 1 91 5 view .LVU535
	xorl	%ecx, %ecx	#
	jmp	.L99	#
.LVL106:
.L140:
	.loc 1 91 5 view .LVU536
.LBE15:
.LBE27:
.LBB28:
.LBB21:
# get_next_line_utils.c:70: 	while (dest[len])
	.loc 1 70 9 view .LVU537
	movq	%rsi, %rcx	# _4, _29
# get_next_line_utils.c:69: 	len = 0;
	.loc 1 69 6 view .LVU538
	xorl	%edi, %edi	# len
	jmp	.L120	#
.LVL107:
.L108:
	.loc 1 69 6 view .LVU539
.LBE21:
.LBE28:
.LBB29:
.LBB16:
# get_next_line_utils.c:98: 		if ((file->buffer_copy)[i2++] == '\n')
	.loc 1 98 29 view .LVU540
	movl	$3, %ecx	#,
	jmp	.L99	#
.LVL108:
.L161:
	.loc 1 98 29 view .LVU541
.LBE16:
.LBE29:
	.loc 1 117 4 is_stmt 1 view .LVU542
# get_next_line_utils.c:117: 			current_file->buffer1_chars = -1;
	.loc 1 117 32 is_stmt 0 view .LVU543
	movl	$-1, 28(%rbx)	#, current_file_14(D)->buffer1_chars
	.loc 1 118 4 is_stmt 1 view .LVU544
	movq	16(%rbx), %rdi	# current_file_14(D)->output, current_file_14(D)->output
	call	free@PLT	#
.LVL109:
	.loc 1 119 4 view .LVU545
# get_next_line_utils.c:119: 			return (NULL);
	.loc 1 119 11 is_stmt 0 view .LVU546
	jmp	.L98	#
	.cfi_endproc
.LFE32:
	.size	append_buffer, .-append_buffer
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC0:
	.long	-3
	.long	3
	.align 8
.LC1:
	.long	-2
	.long	2
	.align 8
.LC2:
	.long	-1
	.long	1
	.align 8
.LC3:
	.long	-4
	.long	4
	.align 8
.LC4:
	.long	-5
	.long	5
	.align 8
.LC5:
	.long	-6
	.long	6
	.align 8
.LC6:
	.long	-7
	.long	7
	.text
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "get_next_line.h"
	.file 4 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x4a3
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x10
	.long	.LASF36
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0xd
	.long	.LASF12
	.byte	0x2
	.byte	0xd6
	.long	0x39
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF2
	.uleb128 0x11
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.long	.LASF3
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.long	.LASF5
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.long	.LASF6
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.long	.LASF7
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.long	.LASF8
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.long	.LASF9
	.uleb128 0x12
	.byte	0x8
	.uleb128 0xe
	.long	0x7f
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.long	.LASF10
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF11
	.uleb128 0xd
	.long	.LASF13
	.byte	0x3
	.byte	0x19
	.long	0x98
	.uleb128 0x13
	.long	.LASF37
	.byte	0x48
	.byte	0x3
	.byte	0x1c
	.byte	0x8
	.long	0x12a
	.uleb128 0x3
	.long	.LASF14
	.byte	0x1e
	.byte	0x7
	.long	0x12a
	.byte	0
	.uleb128 0x3
	.long	.LASF15
	.byte	0x1f
	.byte	0x7
	.long	0x12a
	.byte	0x6
	.uleb128 0x3
	.long	.LASF16
	.byte	0x20
	.byte	0x8
	.long	0x7a
	.byte	0x10
	.uleb128 0x14
	.string	"fd"
	.byte	0x3
	.byte	0x21
	.byte	0x7
	.long	0x40
	.byte	0x18
	.uleb128 0x3
	.long	.LASF17
	.byte	0x22
	.byte	0x7
	.long	0x40
	.byte	0x1c
	.uleb128 0x3
	.long	.LASF18
	.byte	0x23
	.byte	0x7
	.long	0x40
	.byte	0x20
	.uleb128 0x3
	.long	.LASF19
	.byte	0x24
	.byte	0xa
	.long	0x13a
	.byte	0x28
	.uleb128 0x3
	.long	.LASF20
	.byte	0x25
	.byte	0xa
	.long	0x13a
	.byte	0x30
	.uleb128 0x3
	.long	.LASF21
	.byte	0x26
	.byte	0x7
	.long	0x40
	.byte	0x38
	.uleb128 0x3
	.long	.LASF22
	.byte	0x27
	.byte	0x7
	.long	0x40
	.byte	0x3c
	.uleb128 0x3
	.long	.LASF23
	.byte	0x28
	.byte	0x7
	.long	0x40
	.byte	0x40
	.byte	0
	.uleb128 0x15
	.long	0x7f
	.long	0x13a
	.uleb128 0x16
	.long	0x39
	.byte	0x5
	.byte	0
	.uleb128 0xe
	.long	0x8d
	.uleb128 0x17
	.long	.LASF26
	.byte	0x4
	.value	0x2a0
	.byte	0xe
	.long	0x78
	.long	0x156
	.uleb128 0xf
	.long	0x2e
	.byte	0
	.uleb128 0x18
	.long	.LASF24
	.byte	0x4
	.value	0x2af
	.byte	0xd
	.long	0x169
	.uleb128 0xf
	.long	0x78
	.byte	0
	.uleb128 0x7
	.long	.LASF31
	.byte	0x68
	.byte	0x7
	.long	0x7a
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.uleb128 0x1
	.byte	0x9c
	.long	0x2d4
	.uleb128 0x5
	.long	.LASF33
	.byte	0x68
	.byte	0x1d
	.long	0x13a
	.long	.LLST13
	.long	.LVUS13
	.uleb128 0x8
	.long	.LASF34
	.byte	0x6a
	.byte	0x8
	.long	0x7a
	.long	.LLST14
	.long	.LVUS14
	.uleb128 0x9
	.long	0x2d4
	.quad	.LBI10
	.value	.LVU290
	.long	.LLRL15
	.byte	0x6c
	.byte	0x2
	.long	0x1ea
	.uleb128 0x1
	.long	0x2e1
	.long	.LLST16
	.long	.LVUS16
	.uleb128 0xa
	.long	.LLRL15
	.uleb128 0x4
	.long	0x2ec
	.long	.LLST17
	.long	.LVUS17
	.byte	0
	.byte	0
	.uleb128 0x9
	.long	0x2f7
	.quad	.LBI19
	.value	.LVU416
	.long	.LLRL18
	.byte	0x6e
	.byte	0x3
	.long	0x24b
	.uleb128 0x1
	.long	0x31f
	.long	.LLST19
	.long	.LVUS19
	.uleb128 0x1
	.long	0x313
	.long	.LLST20
	.long	.LVUS20
	.uleb128 0x1
	.long	0x308
	.long	.LLST21
	.long	.LVUS21
	.uleb128 0xa
	.long	.LLRL18
	.uleb128 0x4
	.long	0x32a
	.long	.LLST22
	.long	.LVUS22
	.uleb128 0x4
	.long	0x335
	.long	.LLST23
	.long	.LVUS23
	.byte	0
	.byte	0
	.uleb128 0x9
	.long	0x2f7
	.quad	.LBI22
	.value	.LVU457
	.long	.LLRL24
	.byte	0x7a
	.byte	0x3
	.long	0x2ac
	.uleb128 0x1
	.long	0x31f
	.long	.LLST25
	.long	.LVUS25
	.uleb128 0x1
	.long	0x313
	.long	.LLST26
	.long	.LVUS26
	.uleb128 0x1
	.long	0x308
	.long	.LLST27
	.long	.LVUS27
	.uleb128 0xa
	.long	.LLRL24
	.uleb128 0x4
	.long	0x32a
	.long	.LLST28
	.long	.LVUS28
	.uleb128 0x4
	.long	0x335
	.long	.LLST29
	.long	.LVUS29
	.byte	0
	.byte	0
	.uleb128 0x6
	.quad	.LVL84
	.long	0x13f
	.uleb128 0x6
	.quad	.LVL96
	.long	0x156
	.uleb128 0x6
	.quad	.LVL109
	.long	0x156
	.byte	0
	.uleb128 0x19
	.long	.LASF25
	.byte	0x1
	.byte	0x57
	.byte	0x6
	.byte	0x1
	.long	0x2f7
	.uleb128 0xb
	.long	.LASF28
	.byte	0x57
	.byte	0x1a
	.long	0x13a
	.uleb128 0xc
	.string	"i2"
	.byte	0x59
	.byte	0x7
	.long	0x40
	.byte	0
	.uleb128 0x1a
	.long	.LASF27
	.byte	0x1
	.byte	0x3f
	.byte	0x5
	.long	0x40
	.byte	0x1
	.long	0x340
	.uleb128 0xb
	.long	.LASF29
	.byte	0x3f
	.byte	0x16
	.long	0x7a
	.uleb128 0x1b
	.string	"src"
	.byte	0x1
	.byte	0x3f
	.byte	0x22
	.long	0x7a
	.uleb128 0xb
	.long	.LASF30
	.byte	0x3f
	.byte	0x2d
	.long	0x7a
	.uleb128 0xc
	.string	"len"
	.byte	0x41
	.byte	0x6
	.long	0x40
	.uleb128 0xc
	.string	"i2"
	.byte	0x42
	.byte	0x6
	.long	0x40
	.byte	0
	.uleb128 0x7
	.long	.LASF32
	.byte	0x25
	.byte	0x9
	.long	0x13a
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.long	0x3af
	.uleb128 0x1c
	.string	"fd"
	.byte	0x1
	.byte	0x25
	.byte	0x1e
	.long	0x40
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x5
	.long	.LASF19
	.byte	0x25
	.byte	0x2a
	.long	0x13a
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x8
	.long	.LASF33
	.byte	0x27
	.byte	0xa
	.long	0x13a
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x1d
	.quad	.LVL20
	.long	0x13f
	.uleb128 0x1e
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x8
	.byte	0x48
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	.LASF35
	.byte	0xf
	.byte	0x7
	.long	0x7a
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x417
	.uleb128 0x5
	.long	.LASF33
	.byte	0xf
	.byte	0x17
	.long	0x13a
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.long	.LASF19
	.byte	0xf
	.byte	0x2d
	.long	0x13a
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x8
	.long	.LASF34
	.byte	0x11
	.byte	0xb
	.long	0x13a
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x6
	.quad	.LVL8
	.long	0x156
	.byte	0
	.uleb128 0x1f
	.long	0x2f7
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x474
	.uleb128 0x1
	.long	0x308
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x1
	.long	0x313
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x1
	.long	0x31f
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x4
	.long	0x32a
	.long	.LLST9
	.long	.LVUS9
	.uleb128 0x4
	.long	0x335
	.long	.LLST10
	.long	.LVUS10
	.byte	0
	.uleb128 0x20
	.long	0x2d4
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x1
	.long	0x2e1
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0x4
	.long	0x2ec
	.long	.LLST12
	.long	.LVUS12
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 3
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0x5
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 23
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS13:
	.uleb128 0
	.uleb128 .LVU300
	.uleb128 .LVU300
	.uleb128 .LVU446
	.uleb128 .LVU446
	.uleb128 .LVU447
	.uleb128 .LVU447
	.uleb128 .LVU496
	.uleb128 .LVU496
	.uleb128 .LVU498
	.uleb128 .LVU498
	.uleb128 0
.LLST13:
	.byte	0x4
	.uleb128 .LVL62-.Ltext0
	.uleb128 .LVL64-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL64-.Ltext0
	.uleb128 .LVL82-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL82-.Ltext0
	.uleb128 .LVL83-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL83-.Ltext0
	.uleb128 .LVL97-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL97-.Ltext0
	.uleb128 .LVL99-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL99-.Ltext0
	.uleb128 .LFE32-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS14:
	.uleb128 .LVU451
	.uleb128 .LVU469
	.uleb128 .LVU469
	.uleb128 .LVU497
	.uleb128 .LVU497
	.uleb128 .LVU498
	.uleb128 .LVU532
	.uleb128 .LVU533
	.uleb128 .LVU541
	.uleb128 .LVU545
	.uleb128 .LVU545
	.uleb128 0
.LLST14:
	.byte	0x4
	.uleb128 .LVL85-.Ltext0
	.uleb128 .LVL87-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL87-.Ltext0
	.uleb128 .LVL98-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL98-.Ltext0
	.uleb128 .LVL99-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL104-.Ltext0
	.uleb128 .LVL105-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL108-.Ltext0
	.uleb128 .LVL109-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL109-1-.Ltext0
	.uleb128 .LFE32-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS16:
	.uleb128 .LVU290
	.uleb128 .LVU300
	.uleb128 .LVU300
	.uleb128 .LVU411
	.uleb128 .LVU498
	.uleb128 .LVU532
	.uleb128 .LVU533
	.uleb128 .LVU536
	.uleb128 .LVU539
	.uleb128 .LVU541
.LLST16:
	.byte	0x4
	.uleb128 .LVL63-.Ltext0
	.uleb128 .LVL64-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL64-.Ltext0
	.uleb128 .LVL73-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL99-.Ltext0
	.uleb128 .LVL104-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL105-.Ltext0
	.uleb128 .LVL106-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL107-.Ltext0
	.uleb128 .LVL108-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS17:
	.uleb128 .LVU293
	.uleb128 .LVU314
	.uleb128 .LVU314
	.uleb128 .LVU330
	.uleb128 .LVU330
	.uleb128 .LVU346
	.uleb128 .LVU346
	.uleb128 .LVU362
	.uleb128 .LVU362
	.uleb128 .LVU378
	.uleb128 .LVU378
	.uleb128 .LVU395
	.uleb128 .LVU395
	.uleb128 .LVU403
	.uleb128 .LVU403
	.uleb128 .LVU409
	.uleb128 .LVU498
	.uleb128 .LVU505
	.uleb128 .LVU505
	.uleb128 .LVU512
	.uleb128 .LVU512
	.uleb128 .LVU519
	.uleb128 .LVU519
	.uleb128 .LVU526
	.uleb128 .LVU526
	.uleb128 .LVU532
	.uleb128 .LVU533
	.uleb128 .LVU536
	.uleb128 .LVU539
	.uleb128 .LVU541
.LLST17:
	.byte	0x4
	.uleb128 .LVL63-.Ltext0
	.uleb128 .LVL65-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL65-.Ltext0
	.uleb128 .LVL66-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL66-.Ltext0
	.uleb128 .LVL67-.Ltext0
	.uleb128 0x2
	.byte	0x32
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL67-.Ltext0
	.uleb128 .LVL68-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL68-.Ltext0
	.uleb128 .LVL69-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL69-.Ltext0
	.uleb128 .LVL70-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL70-.Ltext0
	.uleb128 .LVL71-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL71-.Ltext0
	.uleb128 .LVL72-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL99-.Ltext0
	.uleb128 .LVL100-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL100-.Ltext0
	.uleb128 .LVL101-.Ltext0
	.uleb128 0x2
	.byte	0x32
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL101-.Ltext0
	.uleb128 .LVL102-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL102-.Ltext0
	.uleb128 .LVL103-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL103-.Ltext0
	.uleb128 .LVL104-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL105-.Ltext0
	.uleb128 .LVL106-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL107-.Ltext0
	.uleb128 .LVL108-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0
.LVUS19:
	.uleb128 .LVU416
	.uleb128 .LVU443
	.uleb128 .LVU536
	.uleb128 .LVU539
.LLST19:
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL81-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL106-.Ltext0
	.uleb128 .LVL107-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS20:
	.uleb128 .LVU416
	.uleb128 .LVU443
	.uleb128 .LVU536
	.uleb128 .LVU539
.LLST20:
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL81-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL106-.Ltext0
	.uleb128 .LVL107-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 6
	.byte	0x9f
	.byte	0
.LVUS21:
	.uleb128 .LVU416
	.uleb128 .LVU443
	.uleb128 .LVU536
	.uleb128 .LVU539
.LLST21:
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL81-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL106-.Ltext0
	.uleb128 .LVL107-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS22:
	.uleb128 .LVU421
	.uleb128 .LVU423
	.uleb128 .LVU432
	.uleb128 .LVU433
	.uleb128 .LVU433
	.uleb128 .LVU435
	.uleb128 .LVU435
	.uleb128 .LVU438
	.uleb128 .LVU438
	.uleb128 .LVU439
	.uleb128 .LVU536
	.uleb128 .LVU539
.LLST22:
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL75-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL77-.Ltext0
	.uleb128 .LVL77-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL77-.Ltext0
	.uleb128 .LVL78-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL78-.Ltext0
	.uleb128 .LVL79-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL79-.Ltext0
	.uleb128 .LVL80-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL106-.Ltext0
	.uleb128 .LVL107-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS23:
	.uleb128 .LVU420
	.uleb128 .LVU432
	.uleb128 .LVU536
	.uleb128 .LVU539
.LLST23:
	.byte	0x4
	.uleb128 .LVL74-.Ltext0
	.uleb128 .LVL77-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL106-.Ltext0
	.uleb128 .LVL107-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS25:
	.uleb128 .LVU457
	.uleb128 .LVU490
	.uleb128 .LVU532
	.uleb128 .LVU533
.LLST25:
	.byte	0x4
	.uleb128 .LVL86-.Ltext0
	.uleb128 .LVL95-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 6
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL104-.Ltext0
	.uleb128 .LVL105-.Ltext0
	.uleb128 0x3
	.byte	0x73
	.sleb128 6
	.byte	0x9f
	.byte	0
.LVUS26:
	.uleb128 .LVU457
	.uleb128 .LVU490
	.uleb128 .LVU532
	.uleb128 .LVU533
.LLST26:
	.byte	0x4
	.uleb128 .LVL86-.Ltext0
	.uleb128 .LVL95-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL104-.Ltext0
	.uleb128 .LVL105-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS27:
	.uleb128 .LVU457
	.uleb128 .LVU469
	.uleb128 .LVU469
	.uleb128 .LVU490
	.uleb128 .LVU532
	.uleb128 .LVU533
.LLST27:
	.byte	0x4
	.uleb128 .LVL86-.Ltext0
	.uleb128 .LVL87-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL87-.Ltext0
	.uleb128 .LVL95-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL104-.Ltext0
	.uleb128 .LVL105-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS28:
	.uleb128 .LVU462
	.uleb128 .LVU470
	.uleb128 .LVU470
	.uleb128 .LVU471
	.uleb128 .LVU471
	.uleb128 .LVU473
	.uleb128 .LVU473
	.uleb128 .LVU477
	.uleb128 .LVU480
	.uleb128 .LVU481
	.uleb128 .LVU481
	.uleb128 .LVU483
	.uleb128 .LVU483
	.uleb128 .LVU486
	.uleb128 .LVU486
	.uleb128 .LVU487
	.uleb128 .LVU532
	.uleb128 .LVU533
.LLST28:
	.byte	0x4
	.uleb128 .LVL86-.Ltext0
	.uleb128 .LVL88-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL88-.Ltext0
	.uleb128 .LVL88-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL88-.Ltext0
	.uleb128 .LVL89-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL89-.Ltext0
	.uleb128 .LVL90-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL91-.Ltext0
	.uleb128 .LVL91-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL91-.Ltext0
	.uleb128 .LVL92-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL92-.Ltext0
	.uleb128 .LVL93-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL93-.Ltext0
	.uleb128 .LVL94-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL104-.Ltext0
	.uleb128 .LVL105-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS29:
	.uleb128 .LVU461
	.uleb128 .LVU470
	.uleb128 .LVU470
	.uleb128 .LVU471
	.uleb128 .LVU471
	.uleb128 .LVU473
	.uleb128 .LVU473
	.uleb128 .LVU477
	.uleb128 .LVU477
	.uleb128 .LVU480
	.uleb128 .LVU532
	.uleb128 .LVU533
.LLST29:
	.byte	0x4
	.uleb128 .LVL86-.Ltext0
	.uleb128 .LVL88-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL88-.Ltext0
	.uleb128 .LVL88-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL88-.Ltext0
	.uleb128 .LVL89-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL89-.Ltext0
	.uleb128 .LVL90-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL90-.Ltext0
	.uleb128 .LVL91-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL104-.Ltext0
	.uleb128 .LVL105-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 0
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU56
	.uleb128 .LVU56
	.uleb128 .LVU58
	.uleb128 .LVU58
	.uleb128 .LVU61
	.uleb128 .LVU61
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LFE29-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS4:
	.uleb128 0
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU58
	.uleb128 .LVU58
	.uleb128 .LVU62
	.uleb128 .LVU62
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL20-1-.Ltext0
	.uleb128 .LFE29-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS5:
	.uleb128 .LVU38
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU55
	.uleb128 .LVU58
	.uleb128 .LVU66
	.uleb128 .LVU66
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU78
.LLST5:
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE28-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE28-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS2:
	.uleb128 .LVU5
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU23
	.uleb128 .LVU24
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL8-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE28-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS6:
	.uleb128 0
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS7:
	.uleb128 0
	.uleb128 .LVU90
	.uleb128 .LVU90
	.uleb128 .LVU101
	.uleb128 .LVU101
	.uleb128 .LVU127
	.uleb128 .LVU127
	.uleb128 0
.LLST7:
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x1
	.byte	0x59
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS8:
	.uleb128 0
	.uleb128 .LVU91
	.uleb128 .LVU91
	.uleb128 .LVU115
	.uleb128 .LVU115
	.uleb128 .LVU127
	.uleb128 .LVU127
	.uleb128 .LVU128
	.uleb128 .LVU128
	.uleb128 0
.LLST8:
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL42-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS9:
	.uleb128 .LVU86
	.uleb128 .LVU91
	.uleb128 .LVU101
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU104
	.uleb128 .LVU104
	.uleb128 .LVU108
	.uleb128 .LVU108
	.uleb128 .LVU109
	.uleb128 .LVU115
	.uleb128 .LVU116
	.uleb128 .LVU116
	.uleb128 .LVU118
	.uleb128 .LVU118
	.uleb128 .LVU122
	.uleb128 .LVU122
	.uleb128 .LVU123
	.uleb128 .LVU127
	.uleb128 0
.LLST9:
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL31-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS10:
	.uleb128 .LVU85
	.uleb128 .LVU101
	.uleb128 .LVU106
	.uleb128 .LVU108
	.uleb128 .LVU108
	.uleb128 .LVU109
	.uleb128 .LVU111
	.uleb128 .LVU115
	.uleb128 .LVU120
	.uleb128 .LVU122
	.uleb128 .LVU122
	.uleb128 .LVU123
	.uleb128 .LVU127
	.uleb128 0
.LLST10:
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x7
	.byte	0x78
	.sleb128 0
	.byte	0x20
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x7
	.byte	0x78
	.sleb128 0
	.byte	0x20
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS11:
	.uleb128 0
	.uleb128 .LVU138
	.uleb128 .LVU138
	.uleb128 0
.LLST11:
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LFE31-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS12:
	.uleb128 .LVU134
	.uleb128 .LVU156
	.uleb128 .LVU156
	.uleb128 .LVU170
	.uleb128 .LVU170
	.uleb128 .LVU184
	.uleb128 .LVU184
	.uleb128 .LVU199
	.uleb128 .LVU199
	.uleb128 .LVU214
	.uleb128 .LVU214
	.uleb128 .LVU229
	.uleb128 .LVU229
	.uleb128 .LVU237
	.uleb128 .LVU237
	.uleb128 .LVU243
	.uleb128 .LVU246
	.uleb128 .LVU253
	.uleb128 .LVU253
	.uleb128 .LVU260
	.uleb128 .LVU260
	.uleb128 .LVU267
	.uleb128 .LVU267
	.uleb128 .LVU274
	.uleb128 .LVU274
	.uleb128 .LVU280
	.uleb128 .LVU280
	.uleb128 .LVU284
	.uleb128 .LVU284
	.uleb128 0
.LLST12:
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL47-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x2
	.byte	0x32
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL51-.Ltext0
	.uleb128 .LVL52-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL53-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL53-.Ltext0
	.uleb128 .LVL54-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL55-.Ltext0
	.uleb128 .LVL56-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LVL57-.Ltext0
	.uleb128 0x2
	.byte	0x32
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL57-.Ltext0
	.uleb128 .LVL58-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL58-.Ltext0
	.uleb128 .LVL59-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL59-.Ltext0
	.uleb128 .LVL60-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL60-.Ltext0
	.uleb128 .LVL61-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL61-.Ltext0
	.uleb128 .LFE31-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL15:
	.byte	0x4
	.uleb128 .LBB10-.Ltext0
	.uleb128 .LBE10-.Ltext0
	.byte	0x4
	.uleb128 .LBB17-.Ltext0
	.uleb128 .LBE17-.Ltext0
	.byte	0x4
	.uleb128 .LBB18-.Ltext0
	.uleb128 .LBE18-.Ltext0
	.byte	0x4
	.uleb128 .LBB25-.Ltext0
	.uleb128 .LBE25-.Ltext0
	.byte	0x4
	.uleb128 .LBB27-.Ltext0
	.uleb128 .LBE27-.Ltext0
	.byte	0x4
	.uleb128 .LBB29-.Ltext0
	.uleb128 .LBE29-.Ltext0
	.byte	0
.LLRL18:
	.byte	0x4
	.uleb128 .LBB19-.Ltext0
	.uleb128 .LBE19-.Ltext0
	.byte	0x4
	.uleb128 .LBB28-.Ltext0
	.uleb128 .LBE28-.Ltext0
	.byte	0
.LLRL24:
	.byte	0x4
	.uleb128 .LBB22-.Ltext0
	.uleb128 .LBE22-.Ltext0
	.byte	0x4
	.uleb128 .LBB26-.Ltext0
	.uleb128 .LBE26-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF35:
	.string	"cleanup"
.LASF8:
	.string	"signed char"
.LASF12:
	.string	"size_t"
.LASF21:
	.string	"cur_all_c"
.LASF14:
	.string	"buffer"
.LASF19:
	.string	"first_file"
.LASF25:
	.string	"sort_buffer"
.LASF17:
	.string	"buffer1_chars"
.LASF31:
	.string	"append_buffer"
.LASF28:
	.string	"file"
.LASF5:
	.string	"unsigned char"
.LASF2:
	.string	"long unsigned int"
.LASF34:
	.string	"temp"
.LASF6:
	.string	"short unsigned int"
.LASF29:
	.string	"dest"
.LASF37:
	.string	"s_file"
.LASF20:
	.string	"next_file"
.LASF7:
	.string	"unsigned int"
.LASF11:
	.string	"long long unsigned int"
.LASF18:
	.string	"output_size"
.LASF32:
	.string	"get_current_file"
.LASF22:
	.string	"buffer1_i"
.LASF15:
	.string	"buffer_copy"
.LASF33:
	.string	"current_file"
.LASF24:
	.string	"free"
.LASF4:
	.string	"long long int"
.LASF10:
	.string	"char"
.LASF13:
	.string	"t_file"
.LASF9:
	.string	"short int"
.LASF16:
	.string	"output"
.LASF23:
	.string	"return_now"
.LASF3:
	.string	"long int"
.LASF30:
	.string	"src2"
.LASF27:
	.string	"my_str_cpy"
.LASF36:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF26:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"get_next_line_utils.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
get_next_line.o/0           0     0     644     46988     `
	.file	"get_next_line.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "get_next_line.c"
	.p2align 4
	.globl	reading
	.type	reading, @function
reading:
.LVL0:
.LFB28:
	.file 1 "get_next_line.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# get_next_line.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU4
	movq	%rdi, %rbx	# tmp96, file
# get_next_line.c:17: 	while (!(file->return_now))
	.loc 1 17 8 view .LVU5
	jmp	.L2	#
.LVL1:
	.p2align 4,,10
	.p2align 3
.L8:
	.loc 1 19 3 is_stmt 1 view .LVU6
# get_next_line.c:19: 		if (!(file->buffer1_chars))
	.loc 1 19 6 is_stmt 0 view .LVU7
	movl	28(%rbx), %edx	# file_13(D)->buffer1_chars,
	testl	%edx, %edx	#
	jne	.L3	#,
	.loc 1 21 4 is_stmt 1 view .LVU8
.LVL2:
.LBB4:
.LBI4:
	.file 2 "/usr/include/x86_64-linux-gnu/bits/unistd.h"
	.loc 2 26 1 view .LVU9
.LBB5:
	.loc 2 28 3 view .LVU10
# /usr/include/x86_64-linux-gnu/bits/unistd.h:28:   return __glibc_fortify (read, __nbytes, sizeof (char),
	.loc 2 28 10 is_stmt 0 discriminator 7 view .LVU11
	movl	24(%rbx), %edi	# file_13(D)->fd, file_13(D)->fd
	movl	$1, %edx	#,
	movq	%rbx, %rsi	# file,
	call	read@PLT	#
.LVL3:
	.loc 2 28 10 discriminator 7 view .LVU12
.LBE5:
.LBE4:
# get_next_line.c:22: 			file->buffer1_i = 0;
	.loc 1 22 20 view .LVU13
	movl	$0, 60(%rbx)	#, file_13(D)->buffer1_i
# get_next_line.c:21: 			(file->buffer1_chars) = read(file->fd, file->buffer, BUFFER_SIZE);
	.loc 1 21 26 discriminator 1 view .LVU14
	movl	%eax, 28(%rbx)	# iftmp.0_27, file_13(D)->buffer1_chars
	.loc 1 22 4 is_stmt 1 view .LVU15
	.loc 1 23 4 view .LVU16
# get_next_line.c:23: 			if ((file->buffer1_chars) < 0)
	.loc 1 23 7 is_stmt 0 view .LVU17
	testl	%eax, %eax	# iftmp.0_27
	js	.L12	#,
	.loc 1 28 9 is_stmt 1 view .LVU18
# get_next_line.c:28: 			else if (!(file->buffer1_chars))
	.loc 1 28 12 is_stmt 0 view .LVU19
	je	.L10	#,
	.loc 1 30 9 is_stmt 1 view .LVU20
	.loc 1 32 4 view .LVU21
# get_next_line.c:32: 			file->buffer[(file->buffer1_chars)] = 0;
	.loc 1 32 40 is_stmt 0 view .LVU22
	cltq
	movb	$0, (%rbx,%rax)	#, file_13(D)->buffer[_4]
.L3:
	.loc 1 34 3 is_stmt 1 view .LVU23
# get_next_line.c:34: 		if (!append_buffer(file))
	.loc 1 34 8 is_stmt 0 view .LVU24
	movq	%rbx, %rdi	# file,
	call	append_buffer@PLT	#
.LVL4:
# get_next_line.c:34: 		if (!append_buffer(file))
	.loc 1 34 6 discriminator 1 view .LVU25
	testq	%rax, %rax	# tmp98
	je	.L5	#,
.L2:
	.loc 1 17 9 is_stmt 1 view .LVU26
	movl	64(%rbx), %eax	# file_13(D)->return_now,
	testl	%eax, %eax	#
	je	.L8	#,
.L10:
	.loc 1 37 2 view .LVU27
# get_next_line.c:37: 	return (file->output);
	.loc 1 37 14 is_stmt 0 view .LVU28
	movq	16(%rbx), %rax	# file_13(D)->output, <retval>
# get_next_line.c:38: }
	.loc 1 38 1 view .LVU29
	movq	-8(%rbp), %rbx	#,
.LVL5:
	.loc 1 38 1 view .LVU30
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL6:
	.p2align 4,,10
	.p2align 3
.L12:
	.cfi_restore_state
	.loc 1 25 5 is_stmt 1 view .LVU31
	movq	16(%rbx), %rdi	# file_13(D)->output, file_13(D)->output
	call	free@PLT	#
.LVL7:
	.loc 1 26 5 view .LVU32
.L5:
# get_next_line.c:38: }
	.loc 1 38 1 is_stmt 0 view .LVU33
	movq	-8(%rbp), %rbx	#,
.LVL8:
# get_next_line.c:26: 				return (NULL);
	.loc 1 26 12 view .LVU34
	xorl	%eax, %eax	# <retval>
# get_next_line.c:38: }
	.loc 1 38 1 view .LVU35
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE28:
	.size	reading, .-reading
	.p2align 4
	.globl	shrink_out
	.type	shrink_out, @function
shrink_out:
.LVL9:
.LFB29:
	.loc 1 41 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 41 1 is_stmt 0 view .LVU37
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line.c:41: {
	.loc 1 41 1 view .LVU38
	.loc 1 42 2 is_stmt 1 view .LVU39
	.loc 1 43 2 view .LVU40
	.loc 1 44 2 view .LVU41
	.loc 1 45 2 view .LVU42
	.loc 1 47 2 view .LVU43
# get_next_line.c:41: {
	.loc 1 41 1 is_stmt 0 view .LVU44
	movq	%rsi, %r13	# tmp96, first_file
# get_next_line.c:47: 	current_file = get_current_file(fd, first_file);
	.loc 1 47 17 view .LVU45
	call	get_current_file@PLT	#
.LVL10:
	.loc 1 47 17 view .LVU46
	movq	%rax, %rbx	# tmp97, current_file
.LVL11:
	.loc 1 48 2 is_stmt 1 view .LVU47
# get_next_line.c:48: 	if (!current_file)
	.loc 1 48 5 is_stmt 0 view .LVU48
	testq	%rax, %rax	# current_file
	je	.L17	#,
	.loc 1 50 2 is_stmt 1 view .LVU49
# get_next_line.c:50: 	output = reading(current_file);
	.loc 1 50 11 is_stmt 0 view .LVU50
	movq	%rax, %rdi	# current_file,
	call	reading	#
.LVL12:
# get_next_line.c:51: 	size = current_file->output_size;
	.loc 1 51 7 view .LVU51
	movl	32(%rbx), %r12d	# current_file_11->output_size, size
# get_next_line.c:50: 	output = reading(current_file);
	.loc 1 50 11 view .LVU52
	movq	%rax, %r14	# tmp98, output
.LVL13:
	.loc 1 51 2 is_stmt 1 view .LVU53
	.loc 1 52 2 view .LVU54
# get_next_line.c:52: 	if (current_file->buffer1_chars <= 0)
	.loc 1 52 5 is_stmt 0 view .LVU55
	movl	28(%rbx), %eax	# current_file_11->buffer1_chars,
.LVL14:
	.loc 1 52 5 view .LVU56
	testl	%eax, %eax	#
	jle	.L22	#,
.L16:
	.loc 1 54 2 is_stmt 1 view .LVU57
# get_next_line.c:54: 	if (!output)
	.loc 1 54 5 is_stmt 0 view .LVU58
	testq	%r14, %r14	# output
	je	.L17	#,
	.loc 1 56 2 is_stmt 1 view .LVU59
# get_next_line.c:56: 	new_output = (char *)malloc(sizeof(char) * (size + 1));
	.loc 1 56 51 is_stmt 0 view .LVU60
	leal	1(%r12), %edi	#, tmp91
# get_next_line.c:56: 	new_output = (char *)malloc(sizeof(char) * (size + 1));
	.loc 1 56 23 view .LVU61
	movslq	%edi, %rdi	# tmp91, tmp92
	call	malloc@PLT	#
.LVL15:
	movq	%rax, %r12	# tmp99, <retval>
.LVL16:
	.loc 1 57 2 is_stmt 1 view .LVU62
# get_next_line.c:57: 	if (!new_output)
	.loc 1 57 5 is_stmt 0 view .LVU63
	testq	%rax, %rax	# <retval>
	je	.L23	#,
	.loc 1 62 2 is_stmt 1 view .LVU64
# get_next_line.c:62: 	*new_output = 0;
	.loc 1 62 14 is_stmt 0 view .LVU65
	movb	$0, (%rax)	#, *new_output_17
	.loc 1 63 2 is_stmt 1 view .LVU66
	movq	%r14, %rsi	# output,
	xorl	%edx, %edx	#
	movq	%rax, %rdi	# <retval>,
	call	my_str_cpy@PLT	#
.LVL17:
	.loc 1 64 2 view .LVU67
	movq	%r14, %rdi	# output,
	call	free@PLT	#
.LVL18:
	.loc 1 65 2 view .LVU68
# get_next_line.c:66: }
	.loc 1 66 1 is_stmt 0 view .LVU69
	popq	%rbx	#
.LVL19:
	.loc 1 66 1 view .LVU70
	movq	%r12, %rax	# <retval>,
	popq	%r12	#
.LVL20:
	.loc 1 66 1 view .LVU71
	popq	%r13	#
.LVL21:
	.loc 1 66 1 view .LVU72
	popq	%r14	#
.LVL22:
	.loc 1 66 1 view .LVU73
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL23:
	.p2align 4,,10
	.p2align 3
.L17:
	.cfi_restore_state
	.loc 1 66 1 view .LVU74
	popq	%rbx	#
.LVL24:
# get_next_line.c:49: 		return (NULL);
	.loc 1 49 10 view .LVU75
	xorl	%r12d, %r12d	# <retval>
# get_next_line.c:66: }
	.loc 1 66 1 view .LVU76
	movq	%r12, %rax	# <retval>,
	popq	%r12	#
	popq	%r13	#
.LVL25:
	.loc 1 66 1 view .LVU77
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL26:
	.p2align 4,,10
	.p2align 3
.L22:
	.cfi_restore_state
	.loc 1 53 3 is_stmt 1 view .LVU78
	movq	%r13, %rsi	# first_file,
	movq	%rbx, %rdi	# current_file,
	call	cleanup@PLT	#
.LVL27:
	jmp	.L16	#
.LVL28:
.L23:
	.loc 1 59 3 view .LVU79
	movq	%r14, %rdi	# output,
	call	free@PLT	#
.LVL29:
	.loc 1 60 3 view .LVU80
# get_next_line.c:60: 		return (cleanup(current_file, first_file));
	.loc 1 60 11 is_stmt 0 view .LVU81
	movq	%rbx, %rdi	# current_file,
# get_next_line.c:66: }
	.loc 1 66 1 view .LVU82
	popq	%rbx	#
.LVL30:
# get_next_line.c:60: 		return (cleanup(current_file, first_file));
	.loc 1 60 11 view .LVU83
	movq	%r13, %rsi	# first_file,
# get_next_line.c:66: }
	.loc 1 66 1 view .LVU84
	popq	%r12	#
.LVL31:
	.loc 1 66 1 view .LVU85
	popq	%r13	#
.LVL32:
	.loc 1 66 1 view .LVU86
	popq	%r14	#
.LVL33:
	.loc 1 66 1 view .LVU87
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# get_next_line.c:60: 		return (cleanup(current_file, first_file));
	.loc 1 60 11 view .LVU88
	jmp	cleanup@PLT	#
.LVL34:
	.loc 1 60 11 view .LVU89
	.cfi_endproc
.LFE29:
	.size	shrink_out, .-shrink_out
	.p2align 4
	.globl	get_next_line
	.type	get_next_line, @function
get_next_line:
.LVL35:
.LFB30:
	.loc 1 69 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 69 1 is_stmt 0 view .LVU91
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
# get_next_line.c:69: {
	.loc 1 69 1 view .LVU92
	.loc 1 70 2 is_stmt 1 view .LVU93
	.loc 1 71 2 view .LVU94
	.loc 1 73 2 view .LVU95
	.loc 1 75 2 view .LVU96
# get_next_line.c:75: 	if (!(first_file.first_file))
	.loc 1 75 5 is_stmt 0 view .LVU97
	cmpq	$0, 40+first_file.0(%rip)	#, first_file.first_file
# get_next_line.c:75: 	if (!(first_file.first_file))
	.loc 1 75 18 view .LVU98
	leaq	first_file.0(%rip), %r12	#, tmp107
# get_next_line.c:75: 	if (!(first_file.first_file))
	.loc 1 75 5 view .LVU99
	je	.L38	#,
.L26:
	.loc 1 89 2 is_stmt 1 view .LVU100
.LVL36:
.LBB8:
.LBI8:
	.loc 1 40 7 view .LVU101
.LBB9:
	.loc 1 42 2 view .LVU102
	.loc 1 43 2 view .LVU103
	.loc 1 44 2 view .LVU104
	.loc 1 45 2 view .LVU105
	.loc 1 47 2 view .LVU106
# get_next_line.c:47: 	current_file = get_current_file(fd, first_file);
	.loc 1 47 17 is_stmt 0 view .LVU107
	movq	%r12, %rsi	# tmp107,
	call	get_current_file@PLT	#
.LVL37:
	.loc 1 47 17 view .LVU108
	movq	%rax, %rbx	# tmp109, current_file
.LVL38:
	.loc 1 48 2 is_stmt 1 view .LVU109
# get_next_line.c:48: 	if (!current_file)
	.loc 1 48 5 is_stmt 0 view .LVU110
	testq	%rax, %rax	# current_file
	je	.L32	#,
	.loc 1 50 2 is_stmt 1 view .LVU111
# get_next_line.c:50: 	output = reading(current_file);
	.loc 1 50 11 is_stmt 0 view .LVU112
	movq	%rax, %rdi	# current_file,
	call	reading	#
.LVL39:
# get_next_line.c:51: 	size = current_file->output_size;
	.loc 1 51 7 view .LVU113
	movl	32(%rbx), %r13d	# current_file_16->output_size, size
# get_next_line.c:50: 	output = reading(current_file);
	.loc 1 50 11 view .LVU114
	movq	%rax, %r14	# tmp110, output
.LVL40:
	.loc 1 51 2 is_stmt 1 view .LVU115
	.loc 1 52 2 view .LVU116
# get_next_line.c:52: 	if (current_file->buffer1_chars <= 0)
	.loc 1 52 5 is_stmt 0 view .LVU117
	movl	28(%rbx), %eax	# current_file_16->buffer1_chars,
.LVL41:
	.loc 1 52 5 view .LVU118
	testl	%eax, %eax	#
	jle	.L39	#,
.L31:
	.loc 1 54 2 is_stmt 1 view .LVU119
# get_next_line.c:54: 	if (!output)
	.loc 1 54 5 is_stmt 0 view .LVU120
	testq	%r14, %r14	# output
	je	.L32	#,
	.loc 1 56 2 is_stmt 1 view .LVU121
# get_next_line.c:56: 	new_output = (char *)malloc(sizeof(char) * (size + 1));
	.loc 1 56 51 is_stmt 0 view .LVU122
	leal	1(%r13), %edi	#, tmp96
# get_next_line.c:56: 	new_output = (char *)malloc(sizeof(char) * (size + 1));
	.loc 1 56 23 view .LVU123
	movslq	%edi, %rdi	# tmp96, tmp97
	call	malloc@PLT	#
.LVL42:
	movq	%rax, %r13	# tmp111, <retval>
.LVL43:
	.loc 1 57 2 is_stmt 1 view .LVU124
# get_next_line.c:57: 	if (!new_output)
	.loc 1 57 5 is_stmt 0 view .LVU125
	testq	%rax, %rax	# <retval>
	je	.L40	#,
	.loc 1 62 2 is_stmt 1 view .LVU126
# get_next_line.c:62: 	*new_output = 0;
	.loc 1 62 14 is_stmt 0 view .LVU127
	movb	$0, (%rax)	#, *new_output_22
	.loc 1 63 2 is_stmt 1 view .LVU128
	movq	%r14, %rsi	# output,
	xorl	%edx, %edx	#
	movq	%rax, %rdi	# <retval>,
	call	my_str_cpy@PLT	#
.LVL44:
	.loc 1 64 2 view .LVU129
	movq	%r14, %rdi	# output,
	call	free@PLT	#
.LVL45:
	.loc 1 65 2 view .LVU130
	.loc 1 65 2 is_stmt 0 view .LVU131
.LBE9:
.LBE8:
# get_next_line.c:90: }
	.loc 1 90 1 view .LVU132
	popq	%rbx	#
	movq	%r13, %rax	# <retval>,
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL46:
	.p2align 4,,10
	.p2align 3
.L38:
	.cfi_restore_state
# get_next_line.c:77: 		current_file = &first_file;
	.loc 1 77 16 view .LVU133
	movq	%r12, %rax	# tmp107, current_file
	.p2align 4,,10
	.p2align 3
.L25:
.LVL47:
# get_next_line.c:78: 		while (current_file && (current_file->fd) != fd)
	.loc 1 78 23 discriminator 1 view .LVU134
	cmpl	%edi, 24(%rax)	# fd, current_file_37->fd
	je	.L26	#,
	.loc 1 79 4 is_stmt 1 view .LVU135
# get_next_line.c:79: 			current_file = current_file->next_file;
	.loc 1 79 17 is_stmt 0 view .LVU136
	movq	48(%rax), %rax	# current_file_37->next_file, current_file
.LVL48:
	.loc 1 78 23 is_stmt 1 view .LVU137
	testq	%rax, %rax	# current_file
	jne	.L25	#,
	.loc 1 80 3 view .LVU138
	.loc 1 82 4 view .LVU139
	.loc 1 83 4 view .LVU140
# get_next_line.c:85: 			first_file.first_file = &first_file;
	.loc 1 85 26 is_stmt 0 view .LVU141
	leaq	first_file.0(%rip), %rax	#, tmp113
.LVL49:
# get_next_line.c:83: 			first_file.fd = fd;
	.loc 1 83 18 view .LVU142
	movl	%edi, 24+first_file.0(%rip)	# fd, first_file.fd
	.loc 1 84 4 is_stmt 1 view .LVU143
# get_next_line.c:84: 			first_file.buffer1_chars = 0;
	.loc 1 84 29 is_stmt 0 view .LVU144
	movl	$0, 28+first_file.0(%rip)	#, first_file.buffer1_chars
	.loc 1 85 4 is_stmt 1 view .LVU145
# get_next_line.c:85: 			first_file.first_file = &first_file;
	.loc 1 85 26 is_stmt 0 view .LVU146
	movq	%rax, 40+first_file.0(%rip)	# tmp113, first_file.first_file
	.loc 1 86 4 is_stmt 1 view .LVU147
# get_next_line.c:86: 			first_file.cur_all_c = 1;
	.loc 1 86 25 is_stmt 0 view .LVU148
	movq	$1, 56+first_file.0(%rip)	#, MEM <vector(2) int> [(int *)&first_file + 56B]
	jmp	.L26	#
.LVL50:
	.p2align 4,,10
	.p2align 3
.L32:
# get_next_line.c:90: }
	.loc 1 90 1 view .LVU149
	popq	%rbx	#
.LVL51:
.LBB14:
.LBB10:
# get_next_line.c:49: 		return (NULL);
	.loc 1 49 10 view .LVU150
	xorl	%r13d, %r13d	# <retval>
.LBE10:
.LBE14:
# get_next_line.c:90: }
	.loc 1 90 1 view .LVU151
	popq	%r12	#
	movq	%r13, %rax	# <retval>,
	popq	%r13	#
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL52:
	.p2align 4,,10
	.p2align 3
.L39:
	.cfi_restore_state
.LBB15:
.LBB11:
	.loc 1 53 3 is_stmt 1 view .LVU152
	movq	%r12, %rsi	# tmp107,
	movq	%rbx, %rdi	# current_file,
	call	cleanup@PLT	#
.LVL53:
	jmp	.L31	#
.LVL54:
.L40:
	.loc 1 59 3 view .LVU153
	movq	%r14, %rdi	# output,
	call	free@PLT	#
.LVL55:
	.loc 1 60 3 view .LVU154
# get_next_line.c:60: 		return (cleanup(current_file, first_file));
	.loc 1 60 11 is_stmt 0 view .LVU155
	movq	%rbx, %rdi	# current_file,
.LBE11:
.LBE15:
# get_next_line.c:90: }
	.loc 1 90 1 view .LVU156
	popq	%rbx	#
.LVL56:
.LBB16:
.LBB12:
# get_next_line.c:60: 		return (cleanup(current_file, first_file));
	.loc 1 60 11 view .LVU157
	movq	%r12, %rsi	# tmp107,
.LBE12:
.LBE16:
# get_next_line.c:90: }
	.loc 1 90 1 view .LVU158
	popq	%r12	#
	popq	%r13	#
.LVL57:
	.loc 1 90 1 view .LVU159
	popq	%r14	#
.LVL58:
	.loc 1 90 1 view .LVU160
	popq	%rbp	#
	.cfi_def_cfa 7, 8
.LBB17:
.LBB13:
# get_next_line.c:60: 		return (cleanup(current_file, first_file));
	.loc 1 60 11 view .LVU161
	jmp	cleanup@PLT	#
.LVL59:
	.loc 1 60 11 view .LVU162
.LBE13:
.LBE17:
	.cfi_endproc
.LFE30:
	.size	get_next_line, .-get_next_line
	.local	first_file.0
	.comm	first_file.0,72,32
.Letext0:
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 5 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 6 "get_next_line.h"
	.file 7 "/usr/include/stdlib.h"
	.file 8 "/usr/include/x86_64-linux-gnu/bits/unistd-decl.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x68f
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x10
	.long	.LASF45
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x9
	.long	.LASF10
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x3a
	.uleb128 0x4
	.byte	0x8
	.byte	0x7
	.long	.LASF2
	.uleb128 0x11
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x4
	.byte	0x8
	.byte	0x5
	.long	.LASF3
	.uleb128 0x4
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x4
	.byte	0x1
	.byte	0x8
	.long	.LASF5
	.uleb128 0x4
	.byte	0x2
	.byte	0x7
	.long	.LASF6
	.uleb128 0x4
	.byte	0x4
	.byte	0x7
	.long	.LASF7
	.uleb128 0x4
	.byte	0x1
	.byte	0x6
	.long	.LASF8
	.uleb128 0x4
	.byte	0x2
	.byte	0x5
	.long	.LASF9
	.uleb128 0x12
	.byte	0x8
	.uleb128 0x9
	.long	.LASF11
	.byte	0x4
	.byte	0xc2
	.byte	0x1b
	.long	0x48
	.uleb128 0xc
	.long	0x8c
	.uleb128 0x4
	.byte	0x1
	.byte	0x6
	.long	.LASF12
	.uleb128 0x9
	.long	.LASF13
	.byte	0x5
	.byte	0x6c
	.byte	0x13
	.long	0x7b
	.uleb128 0x4
	.byte	0x8
	.byte	0x7
	.long	.LASF14
	.uleb128 0x9
	.long	.LASF15
	.byte	0x6
	.byte	0x19
	.byte	0x17
	.long	0xb2
	.uleb128 0x13
	.long	.LASF46
	.byte	0x48
	.byte	0x6
	.byte	0x1c
	.byte	0x8
	.long	0x144
	.uleb128 0x5
	.long	.LASF16
	.byte	0x1e
	.byte	0x7
	.long	0x144
	.byte	0
	.uleb128 0x5
	.long	.LASF17
	.byte	0x1f
	.byte	0x7
	.long	0x144
	.byte	0x6
	.uleb128 0x5
	.long	.LASF18
	.byte	0x20
	.byte	0x8
	.long	0x87
	.byte	0x10
	.uleb128 0x14
	.string	"fd"
	.byte	0x6
	.byte	0x21
	.byte	0x7
	.long	0x41
	.byte	0x18
	.uleb128 0x5
	.long	.LASF19
	.byte	0x22
	.byte	0x7
	.long	0x41
	.byte	0x1c
	.uleb128 0x5
	.long	.LASF20
	.byte	0x23
	.byte	0x7
	.long	0x41
	.byte	0x20
	.uleb128 0x5
	.long	.LASF21
	.byte	0x24
	.byte	0xa
	.long	0x154
	.byte	0x28
	.uleb128 0x5
	.long	.LASF22
	.byte	0x25
	.byte	0xa
	.long	0x154
	.byte	0x30
	.uleb128 0x5
	.long	.LASF23
	.byte	0x26
	.byte	0x7
	.long	0x41
	.byte	0x38
	.uleb128 0x5
	.long	.LASF24
	.byte	0x27
	.byte	0x7
	.long	0x41
	.byte	0x3c
	.uleb128 0x5
	.long	.LASF25
	.byte	0x28
	.byte	0x7
	.long	0x41
	.byte	0x40
	.byte	0
	.uleb128 0x15
	.long	0x8c
	.long	0x154
	.uleb128 0x16
	.long	0x3a
	.byte	0x5
	.byte	0
	.uleb128 0xc
	.long	0xa6
	.uleb128 0x8
	.long	.LASF26
	.byte	0x6
	.byte	0x2d
	.byte	0x6
	.long	0x41
	.long	0x179
	.uleb128 0x2
	.long	0x87
	.uleb128 0x2
	.long	0x87
	.uleb128 0x2
	.long	0x87
	.byte	0
	.uleb128 0x17
	.long	.LASF27
	.byte	0x7
	.value	0x2a0
	.byte	0xe
	.long	0x79
	.long	0x190
	.uleb128 0x2
	.long	0x2e
	.byte	0
	.uleb128 0x8
	.long	.LASF28
	.byte	0x6
	.byte	0x2b
	.byte	0x7
	.long	0x87
	.long	0x1ab
	.uleb128 0x2
	.long	0x154
	.uleb128 0x2
	.long	0x154
	.byte	0
	.uleb128 0x8
	.long	.LASF29
	.byte	0x6
	.byte	0x2c
	.byte	0x9
	.long	0x154
	.long	0x1c6
	.uleb128 0x2
	.long	0x41
	.uleb128 0x2
	.long	0x154
	.byte	0
	.uleb128 0x8
	.long	.LASF30
	.byte	0x8
	.byte	0x1a
	.byte	0x10
	.long	0x93
	.long	0x1eb
	.uleb128 0x2
	.long	0x41
	.uleb128 0x2
	.long	0x79
	.uleb128 0x2
	.long	0x2e
	.uleb128 0x2
	.long	0x2e
	.byte	0
	.uleb128 0xd
	.long	.LASF31
	.byte	0x20
	.long	.LASF30
	.long	0x93
	.long	0x212
	.uleb128 0x2
	.long	0x41
	.uleb128 0x2
	.long	0x79
	.uleb128 0x2
	.long	0x2e
	.uleb128 0x2
	.long	0x2e
	.byte	0
	.uleb128 0xd
	.long	.LASF32
	.byte	0x1d
	.long	.LASF33
	.long	0x93
	.long	0x234
	.uleb128 0x2
	.long	0x41
	.uleb128 0x2
	.long	0x79
	.uleb128 0x2
	.long	0x2e
	.byte	0
	.uleb128 0x8
	.long	.LASF34
	.byte	0x6
	.byte	0x2f
	.byte	0x7
	.long	0x87
	.long	0x24a
	.uleb128 0x2
	.long	0x154
	.byte	0
	.uleb128 0x18
	.long	.LASF47
	.byte	0x7
	.value	0x2af
	.byte	0xd
	.long	0x25d
	.uleb128 0x2
	.long	0x79
	.byte	0
	.uleb128 0xe
	.long	.LASF39
	.byte	0x44
	.long	0x87
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.uleb128 0x1
	.byte	0x9c
	.long	0x406
	.uleb128 0x19
	.string	"fd"
	.byte	0x1
	.byte	0x44
	.byte	0x19
	.long	0x41
	.long	.LLST10
	.long	.LVUS10
	.uleb128 0x1a
	.long	.LASF21
	.byte	0x1
	.byte	0x46
	.byte	0x10
	.long	0xa6
	.uleb128 0x9
	.byte	0x3
	.quad	first_file.0
	.uleb128 0x1b
	.long	.LASF37
	.byte	0x1
	.byte	0x47
	.byte	0xc
	.long	0x154
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0x1c
	.long	0x406
	.quad	.LBI8
	.byte	.LVU101
	.long	.LLRL12
	.byte	0x1
	.byte	0x59
	.byte	0xa
	.uleb128 0x7
	.long	0x422
	.long	.LLST13
	.long	.LVUS13
	.uleb128 0x7
	.long	0x417
	.long	.LLST14
	.long	.LVUS14
	.uleb128 0x1d
	.long	.LLRL12
	.uleb128 0x6
	.long	0x42e
	.long	.LLST15
	.long	.LVUS15
	.uleb128 0x6
	.long	0x439
	.long	.LLST16
	.long	.LVUS16
	.uleb128 0x6
	.long	0x444
	.long	.LLST17
	.long	.LVUS17
	.uleb128 0x6
	.long	0x44f
	.long	.LLST18
	.long	.LVUS18
	.uleb128 0x3
	.quad	.LVL37
	.long	0x1ab
	.long	0x341
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL39
	.long	0x45b
	.long	0x359
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL42
	.long	0x179
	.long	0x377
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x7d
	.sleb128 1
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x3
	.quad	.LVL44
	.long	0x159
	.long	0x39a
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x3
	.quad	.LVL45
	.long	0x24a
	.long	0x3b2
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL53
	.long	0x190
	.long	0x3d0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL55
	.long	0x24a
	.long	0x3e8
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.uleb128 0xf
	.quad	.LVL59
	.long	0x190
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	first_file.0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x1e
	.long	.LASF35
	.byte	0x1
	.byte	0x28
	.byte	0x7
	.long	0x87
	.byte	0x1
	.long	0x45b
	.uleb128 0x1f
	.string	"fd"
	.byte	0x1
	.byte	0x28
	.byte	0x16
	.long	0x41
	.uleb128 0xa
	.long	.LASF21
	.byte	0x1
	.byte	0x28
	.byte	0x22
	.long	0x154
	.uleb128 0xb
	.long	.LASF36
	.byte	0x2a
	.byte	0x8
	.long	0x87
	.uleb128 0xb
	.long	.LASF18
	.byte	0x2b
	.byte	0x8
	.long	0x87
	.uleb128 0xb
	.long	.LASF37
	.byte	0x2c
	.byte	0xa
	.long	0x154
	.uleb128 0xb
	.long	.LASF38
	.byte	0x2d
	.byte	0x7
	.long	0x41
	.byte	0
	.uleb128 0xe
	.long	.LASF40
	.byte	0xf
	.long	0x87
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.uleb128 0x1
	.byte	0x9c
	.long	0x51b
	.uleb128 0x20
	.long	.LASF41
	.byte	0x1
	.byte	0xf
	.byte	0x17
	.long	0x154
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x21
	.long	0x51b
	.quad	.LBI4
	.byte	.LVU9
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.byte	0x1
	.byte	0x15
	.byte	0x1c
	.long	0x4f5
	.uleb128 0x7
	.long	0x544
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x7
	.long	0x538
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x7
	.long	0x52c
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x22
	.quad	.LVL3
	.long	0x212
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.byte	0
	.uleb128 0x3
	.quad	.LVL4
	.long	0x234
	.long	0x50d
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x23
	.quad	.LVL7
	.long	0x24a
	.byte	0
	.uleb128 0x24
	.long	.LASF33
	.byte	0x2
	.byte	0x1a
	.byte	0x1
	.long	0x93
	.byte	0x3
	.long	0x551
	.uleb128 0xa
	.long	.LASF42
	.byte	0x2
	.byte	0x1a
	.byte	0xb
	.long	0x41
	.uleb128 0xa
	.long	.LASF43
	.byte	0x2
	.byte	0x1a
	.byte	0x17
	.long	0x79
	.uleb128 0xa
	.long	.LASF44
	.byte	0x2
	.byte	0x1a
	.byte	0x25
	.long	0x2e
	.byte	0
	.uleb128 0x25
	.long	0x406
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x7
	.long	0x417
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x7
	.long	0x422
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x6
	.long	0x42e
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x6
	.long	0x439
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x6
	.long	0x444
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x6
	.long	0x44f
	.long	.LLST9
	.long	.LVUS9
	.uleb128 0x3
	.quad	.LVL10
	.long	0x1ab
	.long	0x5d5
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL12
	.long	0x45b
	.long	0x5ed
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL15
	.long	0x179
	.long	0x60b
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x7c
	.sleb128 1
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x3
	.quad	.LVL17
	.long	0x159
	.long	0x62e
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x3
	.quad	.LVL18
	.long	0x24a
	.long	0x646
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL27
	.long	0x190
	.long	0x664
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x3
	.quad	.LVL29
	.long	0x24a
	.long	0x67c
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.uleb128 0xf
	.quad	.LVL34
	.long	0x190
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 16
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x82
	.uleb128 0x19
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS10:
	.uleb128 0
	.uleb128 .LVU108
	.uleb128 .LVU108
	.uleb128 .LVU133
	.uleb128 .LVU133
	.uleb128 .LVU149
	.uleb128 .LVU149
	.uleb128 0
.LLST10:
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL37-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL37-1-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS11:
	.uleb128 .LVU134
	.uleb128 .LVU142
.LLST11:
	.byte	0x4
	.uleb128 .LVL47-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS13:
	.uleb128 .LVU101
	.uleb128 .LVU131
	.uleb128 .LVU149
	.uleb128 0
.LLST13:
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0xa
	.byte	0x3
	.quad	first_file.0
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0xa
	.byte	0x3
	.quad	first_file.0
	.byte	0x9f
	.byte	0
.LVUS14:
	.uleb128 .LVU101
	.uleb128 .LVU108
	.uleb128 .LVU108
	.uleb128 .LVU131
	.uleb128 .LVU149
	.uleb128 0
.LLST14:
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL37-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL37-1-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE30-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS15:
	.uleb128 .LVU124
	.uleb128 .LVU129
	.uleb128 .LVU129
	.uleb128 .LVU131
	.uleb128 .LVU153
	.uleb128 .LVU154
	.uleb128 .LVU154
	.uleb128 .LVU159
.LLST15:
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL44-1-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL54-.Ltext0
	.uleb128 .LVL55-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL55-1-.Ltext0
	.uleb128 .LVL57-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS16:
	.uleb128 .LVU115
	.uleb128 .LVU118
	.uleb128 .LVU118
	.uleb128 .LVU131
	.uleb128 .LVU152
	.uleb128 .LVU160
.LLST16:
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL58-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS17:
	.uleb128 .LVU109
	.uleb128 .LVU113
	.uleb128 .LVU113
	.uleb128 .LVU131
	.uleb128 .LVU149
	.uleb128 .LVU150
	.uleb128 .LVU152
	.uleb128 .LVU157
	.uleb128 .LVU157
	.uleb128 .LVU162
.LLST17:
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL39-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL39-1-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL56-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL56-.Ltext0
	.uleb128 .LVL59-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS18:
	.uleb128 .LVU116
	.uleb128 .LVU124
	.uleb128 .LVU152
	.uleb128 .LVU153
.LLST18:
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL54-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LFE28-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 .LVU9
	.uleb128 .LVU12
.LLST1:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU9
	.uleb128 .LVU12
.LLST2:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS3:
	.uleb128 .LVU9
	.uleb128 .LVU12
.LLST3:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x2
	.byte	0x73
	.sleb128 24
	.byte	0
.LVUS4:
	.uleb128 0
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 .LFE29-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS5:
	.uleb128 0
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU72
	.uleb128 .LVU72
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU78
	.uleb128 .LVU78
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL34-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL34-1-.Ltext0
	.uleb128 .LFE29-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU62
	.uleb128 .LVU67
	.uleb128 .LVU67
	.uleb128 .LVU71
	.uleb128 .LVU71
	.uleb128 .LVU74
	.uleb128 .LVU79
	.uleb128 .LVU80
	.uleb128 .LVU80
	.uleb128 .LVU85
.LLST6:
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL17-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL17-1-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL29-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL29-1-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS7:
	.uleb128 .LVU53
	.uleb128 .LVU56
	.uleb128 .LVU56
	.uleb128 .LVU73
	.uleb128 .LVU78
	.uleb128 .LVU87
.LLST7:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS8:
	.uleb128 .LVU47
	.uleb128 .LVU51
	.uleb128 .LVU51
	.uleb128 .LVU70
	.uleb128 .LVU74
	.uleb128 .LVU75
	.uleb128 .LVU78
	.uleb128 .LVU83
	.uleb128 .LVU83
	.uleb128 .LVU89
.LLST8:
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL34-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS9:
	.uleb128 .LVU54
	.uleb128 .LVU62
	.uleb128 .LVU78
	.uleb128 .LVU79
.LLST9:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL12:
	.byte	0x4
	.uleb128 .LBB8-.Ltext0
	.uleb128 .LBE8-.Ltext0
	.byte	0x4
	.uleb128 .LBB14-.Ltext0
	.uleb128 .LBE14-.Ltext0
	.byte	0x4
	.uleb128 .LBB15-.Ltext0
	.uleb128 .LBE15-.Ltext0
	.byte	0x4
	.uleb128 .LBB16-.Ltext0
	.uleb128 .LBE16-.Ltext0
	.byte	0x4
	.uleb128 .LBB17-.Ltext0
	.uleb128 .LBE17-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF28:
	.string	"cleanup"
.LASF8:
	.string	"signed char"
.LASF10:
	.string	"size_t"
.LASF24:
	.string	"buffer1_i"
.LASF23:
	.string	"cur_all_c"
.LASF16:
	.string	"buffer"
.LASF21:
	.string	"first_file"
.LASF42:
	.string	"__fd"
.LASF19:
	.string	"buffer1_chars"
.LASF40:
	.string	"reading"
.LASF39:
	.string	"get_next_line"
.LASF34:
	.string	"append_buffer"
.LASF41:
	.string	"file"
.LASF38:
	.string	"size"
.LASF2:
	.string	"long unsigned int"
.LASF6:
	.string	"short unsigned int"
.LASF5:
	.string	"unsigned char"
.LASF46:
	.string	"s_file"
.LASF33:
	.string	"read"
.LASF22:
	.string	"next_file"
.LASF26:
	.string	"my_str_cpy"
.LASF7:
	.string	"unsigned int"
.LASF14:
	.string	"long long unsigned int"
.LASF20:
	.string	"output_size"
.LASF29:
	.string	"get_current_file"
.LASF35:
	.string	"shrink_out"
.LASF17:
	.string	"buffer_copy"
.LASF37:
	.string	"current_file"
.LASF31:
	.string	"__read_chk_warn"
.LASF47:
	.string	"free"
.LASF4:
	.string	"long long int"
.LASF43:
	.string	"__buf"
.LASF12:
	.string	"char"
.LASF15:
	.string	"t_file"
.LASF30:
	.string	"__read_chk"
.LASF11:
	.string	"__ssize_t"
.LASF9:
	.string	"short int"
.LASF13:
	.string	"ssize_t"
.LASF18:
	.string	"output"
.LASF25:
	.string	"return_now"
.LASF3:
	.string	"long int"
.LASF36:
	.string	"new_output"
.LASF32:
	.string	"__read_alias"
.LASF45:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF27:
	.string	"malloc"
.LASF44:
	.string	"__nbytes"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"get_next_line.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_printf.o/    0           0     0     644     52777     `
	.file	"ft_printf.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf.c"
	.p2align 4
	.globl	logic_part
	.type	logic_part, @function
logic_part:
.LVL0:
.LFB51:
	.file 1 "ft_printf.c"
	.loc 1 17 1 view -0
	.cfi_startproc
	.loc 1 17 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf.c:17: {
	.loc 1 17 1 view .LVU2
	.loc 1 18 2 is_stmt 1 view .LVU3
# ft_printf.c:18: 	if (!(*format_str))
	.loc 1 18 8 is_stmt 0 view .LVU4
	movq	(%rsi), %rax	# *format_str_7(D), _1
# ft_printf.c:17: {
	.loc 1 17 1 view .LVU5
	movq	%rdi, %r8	# tmp100, arg
	movq	%rdx, %rdi	# tmp102, written_bytes
.LVL1:
	.loc 1 17 1 view .LVU6
	movl	%ecx, %edx	# tmp103, fd
.LVL2:
# ft_printf.c:18: 	if (!(*format_str))
	.loc 1 18 5 view .LVU7
	testq	%rax, %rax	# _1
	je	.L13	#,
	.loc 1 20 2 is_stmt 1 view .LVU8
# ft_printf.c:20: 	if (**format_str == 'c')
	.loc 1 20 6 is_stmt 0 view .LVU9
	movzbl	(%rax), %eax	# *_1, _3
	cmpb	$37, %al	#, _3
	je	.L3	#,
	subl	$88, %eax	#, tmp91
	cmpb	$32, %al	#, tmp91
	ja	.L4	#,
	leaq	.L6(%rip), %rcx	#, tmp94
.LVL3:
	.loc 1 20 6 view .LVU10
	movzbl	%al, %eax	# tmp91, tmp93
	movslq	(%rcx,%rax,4), %rax	#, tmp96
	addq	%rcx, %rax	# tmp94, tmp97
	notrack jmp	*%rax	# tmp97
	.section	.rodata
	.align 4
	.align 4
.L6:
	.long	.L12-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L11-.L6
	.long	.L10-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L10-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L9-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L8-.L6
	.long	.L4-.L6
	.long	.L7-.L6
	.long	.L4-.L6
	.long	.L4-.L6
	.long	.L5-.L6
	.text
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 36 2 is_stmt 1 view .LVU11
# ft_printf.c:36: 	*written_bytes = -1;
	.loc 1 36 17 is_stmt 0 view .LVU12
	movl	$-1, (%rdi)	#, *written_bytes_8(D)
	.loc 1 37 2 is_stmt 1 view .LVU13
.L13:
# ft_printf.c:38: }
	.loc 1 38 1 is_stmt 0 view .LVU14
	movl	$-1, %eax	#,
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
	.p2align 4,,10
	.p2align 3
.L10:
	.cfi_restore_state
	.loc 1 27 3 is_stmt 1 view .LVU15
# ft_printf.c:27: 		return (ft_printf_handle_di(arg, written_bytes, fd));
	.loc 1 27 11 is_stmt 0 view .LVU16
	movq	%rdi, %rsi	# written_bytes,
.LVL4:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU17
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:27: 		return (ft_printf_handle_di(arg, written_bytes, fd));
	.loc 1 27 11 view .LVU18
	movq	%r8, %rdi	# arg,
.LVL5:
	.loc 1 27 11 view .LVU19
	jmp	ft_printf_handle_di@PLT	#
.LVL6:
	.p2align 4,,10
	.p2align 3
.L9:
	.cfi_restore_state
	.loc 1 25 3 is_stmt 1 view .LVU20
# ft_printf.c:25: 		return (ft_printf_handle_p(arg, written_bytes, fd));
	.loc 1 25 11 is_stmt 0 view .LVU21
	movq	%rdi, %rsi	# written_bytes,
.LVL7:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU22
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:25: 		return (ft_printf_handle_p(arg, written_bytes, fd));
	.loc 1 25 11 view .LVU23
	movq	%r8, %rdi	# arg,
.LVL8:
	.loc 1 25 11 view .LVU24
	jmp	ft_printf_handle_p@PLT	#
.LVL9:
	.p2align 4,,10
	.p2align 3
.L8:
	.cfi_restore_state
	.loc 1 23 3 is_stmt 1 view .LVU25
# ft_printf.c:23: 		return (ft_printf_handle_s(arg, written_bytes, fd));
	.loc 1 23 11 is_stmt 0 view .LVU26
	movq	%rdi, %rsi	# written_bytes,
.LVL10:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU27
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:23: 		return (ft_printf_handle_s(arg, written_bytes, fd));
	.loc 1 23 11 view .LVU28
	movq	%r8, %rdi	# arg,
.LVL11:
	.loc 1 23 11 view .LVU29
	jmp	ft_printf_handle_s@PLT	#
.LVL12:
	.p2align 4,,10
	.p2align 3
.L12:
	.cfi_restore_state
	.loc 1 33 3 is_stmt 1 view .LVU30
# ft_printf.c:33: 		return (ft_printf_handle_xx(arg, written_bytes, fd));
	.loc 1 33 11 is_stmt 0 view .LVU31
	movq	%rdi, %rsi	# written_bytes,
.LVL13:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU32
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:33: 		return (ft_printf_handle_xx(arg, written_bytes, fd));
	.loc 1 33 11 view .LVU33
	movq	%r8, %rdi	# arg,
.LVL14:
	.loc 1 33 11 view .LVU34
	jmp	ft_printf_handle_xx@PLT	#
.LVL15:
	.p2align 4,,10
	.p2align 3
.L11:
	.cfi_restore_state
	.loc 1 21 3 is_stmt 1 view .LVU35
# ft_printf.c:21: 		return (ft_printf_handle_c(arg, written_bytes, fd));
	.loc 1 21 11 is_stmt 0 view .LVU36
	movq	%rdi, %rsi	# written_bytes,
.LVL16:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU37
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:21: 		return (ft_printf_handle_c(arg, written_bytes, fd));
	.loc 1 21 11 view .LVU38
	movq	%r8, %rdi	# arg,
.LVL17:
	.loc 1 21 11 view .LVU39
	jmp	ft_printf_handle_c@PLT	#
.LVL18:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
	.loc 1 29 3 is_stmt 1 view .LVU40
# ft_printf.c:29: 		return (ft_printf_handle_u(arg, written_bytes, fd));
	.loc 1 29 11 is_stmt 0 view .LVU41
	movq	%rdi, %rsi	# written_bytes,
.LVL19:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU42
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:29: 		return (ft_printf_handle_u(arg, written_bytes, fd));
	.loc 1 29 11 view .LVU43
	movq	%r8, %rdi	# arg,
.LVL20:
	.loc 1 29 11 view .LVU44
	jmp	ft_printf_handle_u@PLT	#
.LVL21:
	.p2align 4,,10
	.p2align 3
.L5:
	.cfi_restore_state
	.loc 1 31 3 is_stmt 1 view .LVU45
# ft_printf.c:31: 		return (ft_printf_handle_x(arg, written_bytes, fd));
	.loc 1 31 11 is_stmt 0 view .LVU46
	movq	%rdi, %rsi	# written_bytes,
.LVL22:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU47
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_printf.c:31: 		return (ft_printf_handle_x(arg, written_bytes, fd));
	.loc 1 31 11 view .LVU48
	movq	%r8, %rdi	# arg,
.LVL23:
	.loc 1 31 11 view .LVU49
	jmp	ft_printf_handle_x@PLT	#
.LVL24:
	.p2align 4,,10
	.p2align 3
.L3:
	.cfi_restore_state
	.loc 1 35 3 is_stmt 1 view .LVU50
# ft_printf.c:35: 		return (ft_printf_handle_percent(written_bytes, fd));
	.loc 1 35 11 is_stmt 0 view .LVU51
	movl	%ecx, %esi	# fd,
.LVL25:
# ft_printf.c:38: }
	.loc 1 38 1 view .LVU52
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_printf.c:35: 		return (ft_printf_handle_percent(written_bytes, fd));
	.loc 1 35 11 view .LVU53
	jmp	ft_printf_handle_percent@PLT	#
.LVL26:
	.loc 1 35 11 view .LVU54
	.cfi_endproc
.LFE51:
	.size	logic_part, .-logic_part
	.p2align 4
	.globl	ft_fprintf
	.type	ft_fprintf, @function
ft_fprintf:
.LVL27:
.LFB52:
	.loc 1 41 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 41 1 is_stmt 0 view .LVU56
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$248, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
	movq	%rsi, -280(%rbp)	# format_str, format_str
	movl	%edi, %r12d	# tmp121, fd
	movq	%rdx, -208(%rbp)	#,
	movq	%rcx, -200(%rbp)	#,
	movq	%r8, -192(%rbp)	#,
	movq	%r9, -184(%rbp)	#,
	testb	%al, %al	#
	je	.L19	#,
	vmovaps	%xmm0, -176(%rbp)	#,
	vmovaps	%xmm1, -160(%rbp)	#,
	vmovaps	%xmm2, -144(%rbp)	#,
	vmovaps	%xmm3, -128(%rbp)	#,
	vmovaps	%xmm4, -112(%rbp)	#,
	vmovaps	%xmm5, -96(%rbp)	#,
	vmovaps	%xmm6, -80(%rbp)	#,
	vmovaps	%xmm7, -64(%rbp)	#,
.L19:
# ft_printf.c:41: {
	.loc 1 41 1 view .LVU57
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp124
	movq	%rax, -232(%rbp)	# tmp124, D.5746
	xorl	%eax, %eax	# tmp124
	.loc 1 42 2 is_stmt 1 view .LVU58
	.loc 1 43 2 view .LVU59
	.loc 1 44 2 view .LVU60
	.loc 1 46 2 view .LVU61
# ft_printf.c:48: 	while (*format_str && written_bytes >= 0)
	.loc 1 48 9 is_stmt 0 view .LVU62
	movq	-280(%rbp), %r14	# format_str, _17
# ft_printf.c:46: 	va_start(arg, format_str);
	.loc 1 46 2 view .LVU63
	leaq	16(%rbp), %rax	#, tmp127
	movl	$16, -256(%rbp)	#, MEM[(struct [1] *)&arg].gp_offset
	movq	%rax, -248(%rbp)	# tmp127, MEM[(struct [1] *)&arg].overflow_arg_area
	leaq	-224(%rbp), %rax	#, tmp128
# ft_printf.c:48: 	while (*format_str && written_bytes >= 0)
	.loc 1 48 21 view .LVU64
	xorl	%ebx, %ebx	# <retval>
# ft_printf.c:48: 	while (*format_str && written_bytes >= 0)
	.loc 1 48 9 view .LVU65
	movzbl	(%r14), %edx	# *format_str.10_44, _19
# ft_printf.c:46: 	va_start(arg, format_str);
	.loc 1 46 2 view .LVU66
	movl	$48, -252(%rbp)	#, MEM[(struct [1] *)&arg].fp_offset
	movq	%rax, -240(%rbp)	# tmp128, MEM[(struct [1] *)&arg].reg_save_area
	.loc 1 47 2 is_stmt 1 view .LVU67
# ft_printf.c:47: 	written_bytes = 0;
	.loc 1 47 16 is_stmt 0 view .LVU68
	movl	$0, -260(%rbp)	#, written_bytes
	.loc 1 48 2 is_stmt 1 view .LVU69
	.loc 1 48 21 view .LVU70
	testb	%dl, %dl	# _19
	je	.L18	#,
# ft_printf.c:61: 		if (logic_part(&arg, &format_str, &written_bytes, fd) == -1)
	.loc 1 61 7 is_stmt 0 view .LVU71
	leaq	-260(%rbp), %r13	#, tmp120
.LVL28:
	.p2align 4,,10
	.p2align 3
.L20:
	.loc 1 51 26 is_stmt 1 view .LVU72
	movl	$1, %eax	#, ivtmp.36
	cmpb	$37, %dl	#, _19
	je	.L43	#,
.LVL29:
	.p2align 4,,10
	.p2align 3
.L22:
	.loc 1 52 4 view .LVU73
	.loc 1 51 26 view .LVU74
# ft_printf.c:51: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 51 20 is_stmt 0 view .LVU75
	movzbl	(%r14,%rax), %edx	# MEM[(const char *)format_str.10_70 + ivtmp.36_72 * 1], _3
	movq	%rax, %rbx	# ivtmp.36, ivtmp.36
# ft_printf.c:51: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 51 26 view .LVU76
	incq	%rax	# ivtmp.36
.LVL30:
	.loc 1 51 26 view .LVU77
	testb	%dl, %dl	# _3
	je	.L33	#,
	cmpb	$37, %dl	#, _3
	jne	.L22	#,
.L33:
	.loc 1 53 3 is_stmt 1 view .LVU78
# ft_printf.c:53: 		if (len && write(fd, format_str, len) == -1)
	.loc 1 53 14 is_stmt 0 discriminator 1 view .LVU79
	movq	%rbx, %rdx	# ivtmp.36,
	movq	%r14, %rsi	# _17,
	movl	%r12d, %edi	# fd,
	call	write@PLT	#
.LVL31:
# ft_printf.c:53: 		if (len && write(fd, format_str, len) == -1)
	.loc 1 53 11 discriminator 1 view .LVU80
	cmpq	$-1, %rax	#, tmp122
	je	.L31	#,
# ft_printf.c:51: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 51 20 view .LVU81
	leaq	(%r14,%rbx), %r15	#, _2
# ft_printf.c:55: 		written_bytes += len;
	.loc 1 55 17 view .LVU82
	addl	-260(%rbp), %ebx	# written_bytes, <retval>
.LVL32:
	.loc 1 55 17 view .LVU83
	movl	%ebx, -260(%rbp)	# <retval>, written_bytes
# ft_printf.c:57: 		if (!*format_str || written_bytes < 0)
	.loc 1 57 8 view .LVU84
	movzbl	(%r15), %eax	# *_2, pretmp_95
	.loc 1 55 3 is_stmt 1 view .LVU85
	.loc 1 56 3 view .LVU86
# ft_printf.c:56: 		format_str += len;
	.loc 1 56 14 is_stmt 0 view .LVU87
	movq	%r15, -280(%rbp)	# _2, format_str
	.loc 1 57 3 is_stmt 1 view .LVU88
# ft_printf.c:57: 		if (!*format_str || written_bytes < 0)
	.loc 1 57 20 is_stmt 0 discriminator 1 view .LVU89
	js	.L18	#,
	testb	%al, %al	# pretmp_95
	je	.L18	#,
	.loc 1 59 3 is_stmt 1 view .LVU90
# ft_printf.c:59: 		if (*format_str == '%')
	.loc 1 59 6 is_stmt 0 view .LVU91
	cmpb	$37, %al	#, pretmp_95
	je	.L28	#,
.LVL33:
.L25:
	.loc 1 61 3 is_stmt 1 view .LVU92
# ft_printf.c:61: 		if (logic_part(&arg, &format_str, &written_bytes, fd) == -1)
	.loc 1 61 7 is_stmt 0 view .LVU93
	leaq	-280(%rbp), %rsi	#, tmp116
	leaq	-256(%rbp), %rdi	#, tmp117
	movl	%r12d, %ecx	# fd,
	movq	%r13, %rdx	# tmp120,
	call	logic_part	#
.LVL34:
# ft_printf.c:61: 		if (logic_part(&arg, &format_str, &written_bytes, fd) == -1)
	.loc 1 61 6 discriminator 1 view .LVU94
	cmpl	$-1, %eax	#, tmp123
	je	.L44	#,
	.loc 1 63 3 is_stmt 1 view .LVU95
# ft_printf.c:48: 	while (*format_str && written_bytes >= 0)
	.loc 1 48 9 is_stmt 0 view .LVU96
	movzbl	1(%r15), %edx	# MEM[(const char *)prephitmp_97 + 1B], _19
# ft_printf.c:63: 		format_str++;
	.loc 1 63 13 view .LVU97
	leaq	1(%r15), %r14	#, _17
# ft_printf.c:66: 	return (written_bytes);
	.loc 1 66 9 view .LVU98
	movl	-260(%rbp), %ebx	# written_bytes, <retval>
# ft_printf.c:63: 		format_str++;
	.loc 1 63 13 view .LVU99
	movq	%r14, -280(%rbp)	# _17, format_str
	.loc 1 48 21 is_stmt 1 view .LVU100
	testb	%dl, %dl	# _19
	je	.L18	#,
# ft_printf.c:48: 	while (*format_str && written_bytes >= 0)
	.loc 1 48 21 is_stmt 0 discriminator 1 view .LVU101
	testl	%ebx, %ebx	# <retval>
	jns	.L20	#,
	.p2align 4,,10
	.p2align 3
.L18:
# ft_printf.c:67: }
	.loc 1 67 1 view .LVU102
	movq	-232(%rbp), %rax	# D.5746, tmp125
	subq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp125
	jne	.L45	#,
	addq	$248, %rsp	#,
	movl	%ebx, %eax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
.LVL35:
	.loc 1 67 1 view .LVU103
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL36:
	.p2align 4,,10
	.p2align 3
.L43:
	.cfi_restore_state
	.loc 1 55 3 is_stmt 1 view .LVU104
# ft_printf.c:55: 		written_bytes += len;
	.loc 1 55 17 is_stmt 0 view .LVU105
	movl	%ebx, -260(%rbp)	# <retval>, written_bytes
	.loc 1 56 3 is_stmt 1 view .LVU106
	.loc 1 57 3 view .LVU107
# ft_printf.c:51: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 51 20 is_stmt 0 view .LVU108
	movq	%r14, %r15	# _17, _2
.LVL37:
.L28:
	.loc 1 60 4 is_stmt 1 view .LVU109
# ft_printf.c:60: 			format_str++;
	.loc 1 60 14 is_stmt 0 view .LVU110
	incq	%r15	# _2
	movq	%r15, -280(%rbp)	# _2, format_str
	jmp	.L25	#
.L44:
# ft_printf.c:66: 	return (written_bytes);
	.loc 1 66 9 view .LVU111
	movl	-260(%rbp), %ebx	# written_bytes, <retval>
	jmp	.L18	#
.LVL38:
.L31:
# ft_printf.c:54: 			return (-1);
	.loc 1 54 11 view .LVU112
	movl	$-1, %ebx	#, <retval>
.LVL39:
	.loc 1 54 11 view .LVU113
	jmp	.L18	#
.LVL40:
.L45:
# ft_printf.c:67: }
	.loc 1 67 1 view .LVU114
	call	__stack_chk_fail@PLT	#
.LVL41:
	.cfi_endproc
.LFE52:
	.size	ft_fprintf, .-ft_fprintf
	.p2align 4
	.globl	ft_printf
	.type	ft_printf, @function
ft_printf:
.LVL42:
.LFB53:
	.loc 1 70 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 70 1 is_stmt 0 view .LVU116
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$240, %rsp	#,
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
1:	call	*mcount@GOTPCREL(%rip)
	movq	%rdi, -264(%rbp)	# format_str, format_str
	movq	%rsi, -200(%rbp)	#,
	movq	%rdx, -192(%rbp)	#,
	movq	%rcx, -184(%rbp)	#,
	movq	%r8, -176(%rbp)	#,
	movq	%r9, -168(%rbp)	#,
	testb	%al, %al	#
	je	.L47	#,
	vmovaps	%xmm0, -160(%rbp)	#,
	vmovaps	%xmm1, -144(%rbp)	#,
	vmovaps	%xmm2, -128(%rbp)	#,
	vmovaps	%xmm3, -112(%rbp)	#,
	vmovaps	%xmm4, -96(%rbp)	#,
	vmovaps	%xmm5, -80(%rbp)	#,
	vmovaps	%xmm6, -64(%rbp)	#,
	vmovaps	%xmm7, -48(%rbp)	#,
.L47:
# ft_printf.c:70: {
	.loc 1 70 1 view .LVU117
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp122
	movq	%rax, -216(%rbp)	# tmp122, D.5761
	xorl	%eax, %eax	# tmp122
	.loc 1 71 2 is_stmt 1 view .LVU118
	.loc 1 72 2 view .LVU119
	.loc 1 73 2 view .LVU120
	.loc 1 75 2 view .LVU121
# ft_printf.c:77: 	while (*format_str && written_bytes >= 0)
	.loc 1 77 9 is_stmt 0 view .LVU122
	movq	-264(%rbp), %r13	# format_str, _17
# ft_printf.c:75: 	va_start(arg, format_str);
	.loc 1 75 2 view .LVU123
	leaq	16(%rbp), %rax	#, tmp125
	movl	$8, -240(%rbp)	#, MEM[(struct [1] *)&arg].gp_offset
	movq	%rax, -232(%rbp)	# tmp125, MEM[(struct [1] *)&arg].overflow_arg_area
	leaq	-208(%rbp), %rax	#, tmp126
# ft_printf.c:77: 	while (*format_str && written_bytes >= 0)
	.loc 1 77 21 view .LVU124
	xorl	%ebx, %ebx	# <retval>
# ft_printf.c:77: 	while (*format_str && written_bytes >= 0)
	.loc 1 77 9 view .LVU125
	movzbl	0(%r13), %edx	# *format_str.22_43, _19
# ft_printf.c:75: 	va_start(arg, format_str);
	.loc 1 75 2 view .LVU126
	movl	$48, -236(%rbp)	#, MEM[(struct [1] *)&arg].fp_offset
	movq	%rax, -224(%rbp)	# tmp126, MEM[(struct [1] *)&arg].reg_save_area
	.loc 1 76 2 is_stmt 1 view .LVU127
# ft_printf.c:76: 	written_bytes = 0;
	.loc 1 76 16 is_stmt 0 view .LVU128
	movl	$0, -244(%rbp)	#, written_bytes
	.loc 1 77 2 is_stmt 1 view .LVU129
	.loc 1 77 21 view .LVU130
	testb	%dl, %dl	# _19
	je	.L46	#,
# ft_printf.c:90: 		if (logic_part(&arg, &format_str, &written_bytes, 1) == -1)
	.loc 1 90 7 is_stmt 0 view .LVU131
	leaq	-244(%rbp), %r12	#, tmp119
.LVL43:
	.p2align 4,,10
	.p2align 3
.L48:
	.loc 1 80 26 is_stmt 1 view .LVU132
	movl	$1, %eax	#, ivtmp.48
	cmpb	$37, %dl	#, _19
	je	.L71	#,
.LVL44:
	.p2align 4,,10
	.p2align 3
.L50:
	.loc 1 81 4 view .LVU133
	.loc 1 80 26 view .LVU134
# ft_printf.c:80: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 80 20 is_stmt 0 view .LVU135
	movzbl	0(%r13,%rax), %edx	# MEM[(const char *)format_str.22_69 + ivtmp.48_71 * 1], _3
	movq	%rax, %rbx	# ivtmp.48, ivtmp.48
# ft_printf.c:80: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 80 26 view .LVU136
	incq	%rax	# ivtmp.48
.LVL45:
	.loc 1 80 26 view .LVU137
	testb	%dl, %dl	# _3
	je	.L61	#,
	cmpb	$37, %dl	#, _3
	jne	.L50	#,
.L61:
	.loc 1 82 3 is_stmt 1 view .LVU138
# ft_printf.c:82: 		if (len && write(1, format_str, len) == -1)
	.loc 1 82 14 is_stmt 0 discriminator 1 view .LVU139
	movq	%rbx, %rdx	# ivtmp.48,
	movq	%r13, %rsi	# _17,
	movl	$1, %edi	#,
	call	write@PLT	#
.LVL46:
# ft_printf.c:82: 		if (len && write(1, format_str, len) == -1)
	.loc 1 82 11 discriminator 1 view .LVU140
	cmpq	$-1, %rax	#, tmp120
	je	.L59	#,
# ft_printf.c:80: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 80 20 view .LVU141
	leaq	0(%r13,%rbx), %r14	#, _2
# ft_printf.c:84: 		written_bytes += len;
	.loc 1 84 17 view .LVU142
	addl	-244(%rbp), %ebx	# written_bytes, <retval>
.LVL47:
	.loc 1 84 17 view .LVU143
	movl	%ebx, -244(%rbp)	# <retval>, written_bytes
# ft_printf.c:86: 		if (!(*format_str) || written_bytes < 0)
	.loc 1 86 9 view .LVU144
	movzbl	(%r14), %eax	# *_2, pretmp_94
	.loc 1 84 3 is_stmt 1 view .LVU145
	.loc 1 85 3 view .LVU146
# ft_printf.c:85: 		format_str += len;
	.loc 1 85 14 is_stmt 0 view .LVU147
	movq	%r14, -264(%rbp)	# _2, format_str
	.loc 1 86 3 is_stmt 1 view .LVU148
# ft_printf.c:86: 		if (!(*format_str) || written_bytes < 0)
	.loc 1 86 22 is_stmt 0 discriminator 1 view .LVU149
	js	.L46	#,
	testb	%al, %al	# pretmp_94
	je	.L46	#,
	.loc 1 88 3 is_stmt 1 view .LVU150
# ft_printf.c:88: 		if (*format_str == '%')
	.loc 1 88 6 is_stmt 0 view .LVU151
	cmpb	$37, %al	#, pretmp_94
	je	.L56	#,
.LVL48:
.L53:
	.loc 1 90 3 is_stmt 1 view .LVU152
# ft_printf.c:90: 		if (logic_part(&arg, &format_str, &written_bytes, 1) == -1)
	.loc 1 90 7 is_stmt 0 view .LVU153
	leaq	-264(%rbp), %rsi	#, tmp115
	leaq	-240(%rbp), %rdi	#, tmp116
	movl	$1, %ecx	#,
	movq	%r12, %rdx	# tmp119,
	call	logic_part	#
.LVL49:
# ft_printf.c:90: 		if (logic_part(&arg, &format_str, &written_bytes, 1) == -1)
	.loc 1 90 6 discriminator 1 view .LVU154
	cmpl	$-1, %eax	#, tmp121
	je	.L72	#,
	.loc 1 92 3 is_stmt 1 view .LVU155
# ft_printf.c:77: 	while (*format_str && written_bytes >= 0)
	.loc 1 77 9 is_stmt 0 view .LVU156
	movzbl	1(%r14), %edx	# MEM[(const char *)prephitmp_96 + 1B], _19
# ft_printf.c:92: 		format_str++;
	.loc 1 92 13 view .LVU157
	leaq	1(%r14), %r13	#, _17
# ft_printf.c:95: 	return (written_bytes);
	.loc 1 95 9 view .LVU158
	movl	-244(%rbp), %ebx	# written_bytes, <retval>
# ft_printf.c:92: 		format_str++;
	.loc 1 92 13 view .LVU159
	movq	%r13, -264(%rbp)	# _17, format_str
	.loc 1 77 21 is_stmt 1 view .LVU160
	testb	%dl, %dl	# _19
	je	.L46	#,
# ft_printf.c:77: 	while (*format_str && written_bytes >= 0)
	.loc 1 77 21 is_stmt 0 discriminator 1 view .LVU161
	testl	%ebx, %ebx	# <retval>
	jns	.L48	#,
	.p2align 4,,10
	.p2align 3
.L46:
# ft_printf.c:96: }
	.loc 1 96 1 view .LVU162
	movq	-216(%rbp), %rax	# D.5761, tmp123
	subq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp123
	jne	.L73	#,
	addq	$240, %rsp	#,
	movl	%ebx, %eax	# <retval>,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL50:
	.p2align 4,,10
	.p2align 3
.L71:
	.cfi_restore_state
	.loc 1 84 3 is_stmt 1 view .LVU163
# ft_printf.c:84: 		written_bytes += len;
	.loc 1 84 17 is_stmt 0 view .LVU164
	movl	%ebx, -244(%rbp)	# <retval>, written_bytes
	.loc 1 85 3 is_stmt 1 view .LVU165
	.loc 1 86 3 view .LVU166
# ft_printf.c:80: 		while (format_str[len] && format_str[len] != '%')
	.loc 1 80 20 is_stmt 0 view .LVU167
	movq	%r13, %r14	# _17, _2
.LVL51:
.L56:
	.loc 1 89 4 is_stmt 1 view .LVU168
# ft_printf.c:89: 			format_str++;
	.loc 1 89 14 is_stmt 0 view .LVU169
	incq	%r14	# _2
	movq	%r14, -264(%rbp)	# _2, format_str
	jmp	.L53	#
.L72:
# ft_printf.c:95: 	return (written_bytes);
	.loc 1 95 9 view .LVU170
	movl	-244(%rbp), %ebx	# written_bytes, <retval>
	jmp	.L46	#
.LVL52:
.L59:
# ft_printf.c:83: 			return (-1);
	.loc 1 83 11 view .LVU171
	movl	$-1, %ebx	#, <retval>
.LVL53:
	.loc 1 83 11 view .LVU172
	jmp	.L46	#
.LVL54:
.L73:
# ft_printf.c:96: }
	.loc 1 96 1 view .LVU173
	call	__stack_chk_fail@PLT	#
.LVL55:
	.cfi_endproc
.LFE53:
	.size	ft_printf, .-ft_printf
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.file 8 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x530
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x12
	.long	.LASF36
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x3
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x6
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x3
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x13
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x3
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x3
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x3
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x3
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x3
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x3
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x3
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x14
	.byte	0x8
	.uleb128 0x6
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x3
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x15
	.long	0x8e
	.uleb128 0x6
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x3
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x7
	.long	0xb2
	.uleb128 0x16
	.uleb128 0x6
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xbf
	.uleb128 0x17
	.long	.LASF37
	.long	0xc8
	.uleb128 0x18
	.long	0xd8
	.long	0xd8
	.uleb128 0x19
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x1a
	.long	.LASF38
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x10d
	.uleb128 0x8
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x8
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x8
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x8
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x6
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb3
	.uleb128 0x7
	.long	0x95
	.uleb128 0x1b
	.long	.LASF22
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x9a
	.long	0x13f
	.uleb128 0x2
	.long	0x48
	.uleb128 0x2
	.long	0xad
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x4
	.long	.LASF23
	.byte	0x65
	.long	0x48
	.long	0x158
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x7
	.long	0x48
	.uleb128 0x4
	.long	.LASF24
	.byte	0x69
	.long	0x48
	.long	0x17b
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x7
	.long	0x10d
	.uleb128 0x4
	.long	.LASF25
	.byte	0x68
	.long	0x48
	.long	0x19e
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x4
	.long	.LASF26
	.byte	0x67
	.long	0x48
	.long	0x1bc
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x4
	.long	.LASF27
	.byte	0x63
	.long	0x48
	.long	0x1da
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x4
	.long	.LASF28
	.byte	0x64
	.long	0x48
	.long	0x1f8
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x4
	.long	.LASF29
	.byte	0x66
	.long	0x48
	.long	0x216
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0x4
	.long	.LASF30
	.byte	0x62
	.long	0x48
	.long	0x234
	.uleb128 0x2
	.long	0x17b
	.uleb128 0x2
	.long	0x158
	.uleb128 0x2
	.long	0x48
	.byte	0
	.uleb128 0xb
	.long	.LASF32
	.byte	0x45
	.long	0x48
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x2f2
	.uleb128 0x9
	.long	.LASF34
	.byte	0x45
	.byte	0x1b
	.long	0x119
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0xd
	.uleb128 0xe
	.string	"arg"
	.byte	0x47
	.long	0x10d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0xf
	.long	.LASF31
	.byte	0x48
	.long	0x48
	.uleb128 0x3
	.byte	0x91
	.sleb128 -260
	.uleb128 0x10
	.string	"len"
	.byte	0x49
	.long	0x48
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0xa
	.quad	.LVL46
	.long	0x11e
	.long	0x2b9
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0xa
	.quad	.LVL49
	.long	0x3c4
	.long	0x2e4
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x52
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x11
	.quad	.LVL55
	.long	0x52a
	.byte	0
	.uleb128 0xb
	.long	.LASF33
	.byte	0x28
	.long	0x48
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x3c4
	.uleb128 0xc
	.string	"fd"
	.byte	0x28
	.byte	0x14
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x9
	.long	.LASF34
	.byte	0x28
	.byte	0x24
	.long	0x119
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0xd
	.uleb128 0xe
	.string	"arg"
	.byte	0x2a
	.long	0x10d
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0xf
	.long	.LASF31
	.byte	0x2b
	.long	0x48
	.uleb128 0x3
	.byte	0x91
	.sleb128 -276
	.uleb128 0x10
	.string	"len"
	.byte	0x2c
	.long	0x48
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0xa
	.quad	.LVL31
	.long	0x11e
	.long	0x38a
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0xa
	.quad	.LVL34
	.long	0x3c4
	.long	0x3b6
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x52
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x11
	.quad	.LVL41
	.long	0x52a
	.byte	0
	.uleb128 0xb
	.long	.LASF35
	.byte	0xf
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x525
	.uleb128 0xc
	.string	"arg"
	.byte	0xf
	.byte	0x19
	.long	0x17b
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x9
	.long	.LASF34
	.byte	0xf
	.byte	0x2b
	.long	0x525
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x9
	.long	.LASF31
	.byte	0x10
	.byte	0x8
	.long	0x158
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xc
	.string	"fd"
	.byte	0x10
	.byte	0x1b
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x5
	.quad	.LVL6
	.long	0x1bc
	.long	0x44f
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x5
	.quad	.LVL9
	.long	0x1da
	.long	0x46f
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x5
	.quad	.LVL12
	.long	0x1f8
	.long	0x48f
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x5
	.quad	.LVL15
	.long	0x15d
	.long	0x4af
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x5
	.quad	.LVL18
	.long	0x216
	.long	0x4cf
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x5
	.quad	.LVL21
	.long	0x19e
	.long	0x4ef
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x5
	.quad	.LVL24
	.long	0x180
	.long	0x50f
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0
	.uleb128 0x1c
	.quad	.LVL26
	.long	0x13f
	.uleb128 0x1
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0
	.byte	0
	.uleb128 0x7
	.long	0x119
	.uleb128 0x1d
	.long	.LASF39
	.long	.LASF39
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x82
	.uleb128 0x19
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 5
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 11
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x82
	.uleb128 0x19
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS7:
	.uleb128 0
	.uleb128 .LVU132
.LLST7:
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS8:
	.uleb128 .LVU132
	.uleb128 .LVU133
	.uleb128 .LVU133
	.uleb128 .LVU134
	.uleb128 .LVU134
	.uleb128 .LVU137
	.uleb128 .LVU137
	.uleb128 .LVU143
	.uleb128 .LVU163
	.uleb128 .LVU168
	.uleb128 .LVU171
	.uleb128 .LVU172
.LLST8:
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL52-.Ltext0
	.uleb128 .LVL53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS4:
	.uleb128 0
	.uleb128 .LVU72
	.uleb128 .LVU72
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 .LVU104
	.uleb128 .LVU104
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS5:
	.uleb128 0
	.uleb128 .LVU72
.LLST5:
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS6:
	.uleb128 .LVU72
	.uleb128 .LVU73
	.uleb128 .LVU73
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU77
	.uleb128 .LVU77
	.uleb128 .LVU83
	.uleb128 .LVU104
	.uleb128 .LVU109
	.uleb128 .LVU112
	.uleb128 .LVU113
.LLST6:
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL32-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL38-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL15-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL15-1-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL21-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL21-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-1-.Ltext0
	.uleb128 0x1
	.byte	0x58
	.byte	0x4
	.uleb128 .LVL26-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL15-1-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL21-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL21-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL26-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU50
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL9-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL12-1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL15-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL15-1-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL18-1-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL21-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL21-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL24-1-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL26-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF23:
	.string	"ft_printf_handle_percent"
.LASF11:
	.string	"size_t"
.LASF37:
	.string	"__builtin_va_list"
.LASF27:
	.string	"ft_printf_handle_di"
.LASF2:
	.string	"long int"
.LASF35:
	.string	"logic_part"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF7:
	.string	"short unsigned int"
.LASF21:
	.string	"va_list"
.LASF39:
	.string	"__stack_chk_fail"
.LASF32:
	.string	"ft_printf"
.LASF34:
	.string	"format_str"
.LASF17:
	.string	"gp_offset"
.LASF22:
	.string	"write"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF5:
	.string	"long double"
.LASF4:
	.string	"long long int"
.LASF30:
	.string	"ft_printf_handle_c"
.LASF13:
	.string	"char"
.LASF24:
	.string	"ft_printf_handle_xx"
.LASF38:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF28:
	.string	"ft_printf_handle_p"
.LASF29:
	.string	"ft_printf_handle_s"
.LASF26:
	.string	"ft_printf_handle_u"
.LASF25:
	.string	"ft_printf_handle_x"
.LASF33:
	.string	"ft_fprintf"
.LASF9:
	.string	"signed char"
.LASF31:
	.string	"written_bytes"
.LASF36:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"fp_offset"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/213            0           0     0     644     17054     `
	.file	"ft_printf_handle_c.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_c.c"
	.p2align 4
	.globl	ft_printf_handle_c
	.type	ft_printf_handle_c, @function
ft_printf_handle_c:
.LVL0:
.LFB51:
	.file 1 "ft_printf_handle_c.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_c.c:16: {
	.loc 1 16 1 view .LVU2
	movq	%rdi, %rax	# tmp106, arg
	movl	%edx, %edi	# tmp108, fd
.LVL1:
	.loc 1 16 1 view .LVU3
	movq	%rsi, %rbx	# tmp107, written_bytes
# ft_printf_handle_c.c:19: 	c = (char)va_arg(*(arg), int);
	.loc 1 19 12 view .LVU4
	movq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], D.5654
	movq	%rdx, -24(%rbp)	# D.5654, D.5663
	movl	(%rax), %edx	# MEM[(struct  *)arg_9(D)].gp_offset, D.5654
.LVL2:
	.loc 1 19 12 view .LVU5
	cmpl	$47, %edx	#, D.5654
	ja	.L2	#,
	movl	%edx, %ecx	# D.5654, D.5657
	addl	$8, %edx	#, tmp100
	movl	%edx, (%rax)	# tmp100, MEM[(struct  *)arg_9(D)].gp_offset
	addq	16(%rax), %rcx	# MEM[(struct  *)arg_9(D)].reg_save_area, D.5659
.L3:
# ft_printf_handle_c.c:19: 	c = (char)va_arg(*(arg), int);
	.loc 1 19 6 discriminator 1 view .LVU6
	movl	(%rcx), %eax	# MEM[(int * {ref-all})addr.2_18], MEM[(int * {ref-all})addr.2_18]
.LVL3:
# ft_printf_handle_c.c:20: 	if (write(fd, &c, 1) == -1)
	.loc 1 20 6 view .LVU7
	leaq	-25(%rbp), %rsi	#, tmp103
.LVL4:
	.loc 1 20 6 view .LVU8
	movl	$1, %edx	#,
# ft_printf_handle_c.c:19: 	c = (char)va_arg(*(arg), int);
	.loc 1 19 6 discriminator 1 view .LVU9
	movb	%al, -25(%rbp)	# MEM[(int * {ref-all})addr.2_18], c
	.loc 1 20 2 is_stmt 1 view .LVU10
# ft_printf_handle_c.c:20: 	if (write(fd, &c, 1) == -1)
	.loc 1 20 6 is_stmt 0 view .LVU11
	call	write@PLT	#
.LVL5:
# ft_printf_handle_c.c:20: 	if (write(fd, &c, 1) == -1)
	.loc 1 20 5 discriminator 1 view .LVU12
	cmpq	$-1, %rax	#, tmp109
	je	.L6	#,
	.loc 1 22 2 is_stmt 1 view .LVU13
# ft_printf_handle_c.c:22: 	(*written_bytes)++;
	.loc 1 22 18 is_stmt 0 view .LVU14
	incl	(%rbx)	# *written_bytes_14(D)
	.loc 1 23 2 is_stmt 1 view .LVU15
# ft_printf_handle_c.c:23: 	return (0);
	.loc 1 23 9 is_stmt 0 view .LVU16
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_c.c:24: }
	.loc 1 24 1 view .LVU17
	movq	-24(%rbp), %rdx	# D.5663, tmp111
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp111
	jne	.L8	#,
	movq	-8(%rbp), %rbx	#,
.LVL6:
	.loc 1 24 1 view .LVU18
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL7:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_printf_handle_c.c:19: 	c = (char)va_arg(*(arg), int);
	.loc 1 19 12 view .LVU19
	movq	8(%rax), %rcx	# MEM[(struct  *)arg_9(D)].overflow_arg_area, D.5659
	leaq	8(%rcx), %rdx	#, tmp101
	movq	%rdx, 8(%rax)	# tmp101, MEM[(struct  *)arg_9(D)].overflow_arg_area
	jmp	.L3	#
.LVL8:
.L6:
# ft_printf_handle_c.c:21: 		return (-1);
	.loc 1 21 10 view .LVU20
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
.L8:
# ft_printf_handle_c.c:24: }
	.loc 1 24 1 view .LVU21
	call	__stack_chk_fail@PLT	#
.LVL9:
	.cfi_endproc
.LFE51:
	.size	ft_printf_handle_c, .-ft_printf_handle_c
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x1d6
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x8
	.long	.LASF23
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x2
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x9
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xa
	.byte	0x8
	.uleb128 0x2
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x2
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x4
	.long	0xad
	.uleb128 0xb
	.uleb128 0x2
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xba
	.uleb128 0xc
	.long	.LASF24
	.long	0xc3
	.uleb128 0xd
	.long	0xd3
	.long	0xd3
	.uleb128 0xe
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0xf
	.long	.LASF25
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x108
	.uleb128 0x3
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x3
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x3
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x3
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x2
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xae
	.uleb128 0x10
	.long	.LASF26
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x95
	.long	0x135
	.uleb128 0x5
	.long	0x48
	.uleb128 0x5
	.long	0xa8
	.uleb128 0x5
	.long	0x35
	.byte	0
	.uleb128 0x11
	.long	.LASF27
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x1c6
	.uleb128 0x6
	.string	"arg"
	.byte	0x21
	.long	0x1c6
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x12
	.long	.LASF22
	.byte	0x1
	.byte	0xf
	.byte	0x2b
	.long	0x1cb
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x6
	.string	"fd"
	.byte	0x3e
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x13
	.string	"c"
	.byte	0x1
	.byte	0x11
	.byte	0x7
	.long	0x8e
	.uleb128 0x2
	.byte	0x91
	.sleb128 -41
	.uleb128 0x14
	.quad	.LVL5
	.long	0x114
	.long	0x1b8
	.uleb128 0x7
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x91
	.sleb128 -41
	.uleb128 0x7
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x15
	.quad	.LVL9
	.long	0x1d0
	.byte	0
	.uleb128 0x4
	.long	0x108
	.uleb128 0x4
	.long	0x48
	.uleb128 0x16
	.long	.LASF28
	.long	.LASF28
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU3
	.uleb128 .LVU3
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU5
	.uleb128 .LVU5
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL5-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL5-1-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF24:
	.string	"__builtin_va_list"
.LASF18:
	.string	"fp_offset"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF7:
	.string	"short unsigned int"
.LASF26:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF28:
	.string	"__stack_chk_fail"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF4:
	.string	"long long int"
.LASF27:
	.string	"ft_printf_handle_c"
.LASF13:
	.string	"char"
.LASF25:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF22:
	.string	"written_bytes"
.LASF23:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf_handle_c.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/235            0           0     0     644     32873     `
	.file	"ft_printf_handle_di.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_di.c"
	.p2align 4
	.globl	ft_printf_handle_di
	.type	ft_printf_handle_di, @function
ft_printf_handle_di:
.LVL0:
.LFB53:
	.file 1 "ft_printf_handle_di.c"
	.loc 1 40 1 view -0
	.cfi_startproc
	.loc 1 40 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_di.c:40: {
	.loc 1 40 1 view .LVU2
# ft_printf_handle_di.c:46: 	n = va_arg(*arg, int);
	.loc 1 46 6 view .LVU3
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], D.5692
	movq	%rax, -40(%rbp)	# D.5692, D.5713
	movl	(%rdi), %eax	# MEM[(struct  *)arg_21(D)].gp_offset, D.5692
# ft_printf_handle_di.c:40: {
	.loc 1 40 1 view .LVU4
	movq	%rsi, %rbx	# tmp196, written_bytes
	movl	%edx, %r12d	# tmp197, fd
# ft_printf_handle_di.c:46: 	n = va_arg(*arg, int);
	.loc 1 46 6 view .LVU5
	cmpl	$47, %eax	#, D.5692
	ja	.L2	#,
	movl	%eax, %edx	# D.5692, D.5695
.LVL1:
	.loc 1 46 6 view .LVU6
	addl	$8, %eax	#, tmp130
	movl	%eax, (%rdi)	# tmp130, MEM[(struct  *)arg_21(D)].gp_offset
	addq	16(%rdi), %rdx	# MEM[(struct  *)arg_21(D)].reg_save_area, D.5697
.L3:
	movl	(%rdx), %edx	# MEM[(int * {ref-all})addr.16_15], _1
	.loc 1 47 2 is_stmt 1 view .LVU7
.LVL2:
	.loc 1 48 2 view .LVU8
# ft_printf_handle_di.c:49: 		sign = '-';
	.loc 1 49 8 is_stmt 0 view .LVU9
	movl	$45, %r9d	#, sign
# ft_printf_handle_di.c:51: 	result[i--] = 0;
	.loc 1 51 14 view .LVU10
	movb	$0, -45(%rbp)	#, result[19]
# ft_printf_handle_di.c:48: 	if (n < 0)
	.loc 1 48 5 view .LVU11
	testl	%edx, %edx	# _1
	js	.L5	#,
	.loc 1 50 2 is_stmt 1 view .LVU12
	.loc 1 51 2 view .LVU13
.LVL3:
	.loc 1 52 2 view .LVU14
# ft_printf_handle_di.c:52: 	if (!n)
	.loc 1 52 5 is_stmt 0 view .LVU15
	jne	.L12	#,
	.loc 1 53 3 is_stmt 1 view .LVU16
.LVL4:
# ft_printf_handle_di.c:53: 		result[i--] = '0';
	.loc 1 53 15 is_stmt 0 view .LVU17
	movb	$48, -46(%rbp)	#, result[18]
.LVL5:
.LBB8:
.LBB9:
	.loc 1 27 9 is_stmt 1 view .LVU18
.LBE9:
.LBE8:
	.loc 1 55 2 view .LVU19
# ft_printf_handle_di.c:53: 		result[i--] = '0';
	.loc 1 53 15 is_stmt 0 view .LVU20
	leaq	-46(%rbp), %r13	#, _29
.LVL6:
.L6:
	.loc 1 57 2 is_stmt 1 view .LVU21
	.loc 1 58 2 view .LVU22
# ft_printf_handle_di.c:58: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 58 6 is_stmt 0 view .LVU23
	movq	%r13, %rdi	# _29,
	call	ft_strlen@PLT	#
.LVL7:
# ft_printf_handle_di.c:58: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 58 6 discriminator 1 view .LVU24
	movq	%r13, %rsi	# _29,
	movl	%r12d, %edi	# fd,
# ft_printf_handle_di.c:58: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 58 6 view .LVU25
	movq	%rax, %rdx	# tmp198, _8
# ft_printf_handle_di.c:58: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 58 6 discriminator 1 view .LVU26
	call	write@PLT	#
.LVL8:
# ft_printf_handle_di.c:58: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 58 5 discriminator 2 view .LVU27
	cmpq	$-1, %rax	#, tmp199
	je	.L14	#,
	.loc 1 60 2 is_stmt 1 view .LVU28
# ft_printf_handle_di.c:60: 	*written_bytes += ft_strlen(result + i);
	.loc 1 60 20 is_stmt 0 view .LVU29
	movq	%r13, %rdi	# _29,
	call	ft_strlen@PLT	#
.LVL9:
# ft_printf_handle_di.c:60: 	*written_bytes += ft_strlen(result + i);
	.loc 1 60 17 discriminator 1 view .LVU30
	addl	%eax, (%rbx)	# tmp200, *written_bytes_37(D)
	.loc 1 61 2 is_stmt 1 view .LVU31
# ft_printf_handle_di.c:61: 	return (0);
	.loc 1 61 9 is_stmt 0 view .LVU32
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_di.c:62: }
	.loc 1 62 1 view .LVU33
	movq	-40(%rbp), %rdx	# D.5713, tmp202
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp202
	jne	.L22	#,
	addq	$40, %rsp	#,
	popq	%rbx	#
.LVL10:
	.loc 1 62 1 view .LVU34
	popq	%r12	#
.LVL11:
	.loc 1 62 1 view .LVU35
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL12:
	.p2align 4,,10
	.p2align 3
.L12:
	.cfi_restore_state
	.loc 1 62 1 view .LVU36
	xorl	%r9d, %r9d	# sign
.LVL13:
.L5:
.LBB32:
.LBB30:
.LBB10:
.LBB11:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 18 view .LVU37
	movslq	%edx, %rax	# _1, _1
	movl	%edx, %ecx	# _1, tmp138
	movl	%edx, %r10d	# _1, tmp143
.LBE11:
.LBE10:
# ft_printf_handle_di.c:31: 			result[(*i)--] = less_zero(n);
	.loc 1 31 15 view .LVU38
	movl	$17, %esi	#, _40
.LBB21:
.LBB12:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 18 view .LVU39
	imulq	$1717986919, %rax, %rax	#, _1, tmp135
	sarl	$31, %ecx	#, tmp138
	leaq	-46(%rbp), %r8	#, _29
.LVL14:
	.loc 1 19 18 view .LVU40
.LBE12:
.LBE21:
	.loc 1 29 3 is_stmt 1 view .LVU41
.LBB22:
.LBB13:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 18 is_stmt 0 view .LVU42
	sarq	$34, %rax	#, tmp137
	subl	%ecx, %eax	# tmp138, tmp133
	leal	(%rax,%rax,4), %ecx	#, tmp141
	addl	%ecx, %ecx	# tmp142
	subl	%ecx, %r10d	# tmp142, tmp143
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 10 view .LVU43
	movl	%r10d, %edi	# tmp143, _60
.LVL15:
	.loc 1 19 10 view .LVU44
.LBE13:
.LBE22:
# ft_printf_handle_di.c:29: 		if (*n < 0)
	.loc 1 29 6 view .LVU45
	testl	%edx, %edx	# _1
	jns	.L13	#,
	.loc 1 31 4 is_stmt 1 view .LVU46
.LVL16:
.LBB23:
.LBI10:
	.loc 1 15 13 view .LVU47
.LBB14:
	.loc 1 17 2 view .LVU48
	.loc 1 19 2 view .LVU49
	.loc 1 20 2 view .LVU50
	.loc 1 21 2 view .LVU51
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 10 is_stmt 0 view .LVU52
	movl	$48, %ecx	#, tmp152
# ft_printf_handle_di.c:21: 	*n = -(*n);
	.loc 1 21 7 view .LVU53
	movl	%eax, %edx	# tmp133, n
.LVL17:
	.loc 1 21 7 view .LVU54
.LBE14:
.LBE23:
# ft_printf_handle_di.c:27: 	while (*n)
	.loc 1 27 9 view .LVU55
	movq	%r8, %r13	# _29, _29
.LBB24:
.LBB15:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 10 view .LVU56
	subl	%r10d, %ecx	# tmp143, tmp153
# ft_printf_handle_di.c:21: 	*n = -(*n);
	.loc 1 21 7 view .LVU57
	negl	%edx	# n
.LVL18:
	.loc 1 22 2 is_stmt 1 view .LVU58
	.loc 1 22 2 is_stmt 0 view .LVU59
.LBE15:
.LBE24:
	.loc 1 32 4 is_stmt 1 view .LVU60
.LBB25:
.LBB16:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 10 is_stmt 0 view .LVU61
	movb	%cl, -46(%rbp)	# tmp153, MEM[(char *)&result + 18B]
.LVL19:
	.loc 1 19 10 view .LVU62
.LBE16:
.LBE25:
	.loc 1 27 9 is_stmt 1 view .LVU63
	leaq	-47(%rbp), %rcx	#, ivtmp.26
	testl	%eax, %eax	# tmp133
	je	.L9	#,
.L8:
.LVL20:
	.loc 1 29 3 view .LVU64
.LBB26:
.LBB17:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 18 is_stmt 0 view .LVU65
	movl	%edx, %eax	# n, n
	movl	$3435973837, %esi	#, tmp158
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 10 view .LVU66
	movl	%edx, %edi	# n, _60
.LBE17:
.LBE26:
# ft_printf_handle_di.c:31: 			result[(*i)--] = less_zero(n);
	.loc 1 31 15 view .LVU67
	movl	%ecx, %edx	# ivtmp.26, tmp176
.LVL21:
.LBB27:
.LBB18:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 18 view .LVU68
	imulq	%rsi, %rax	# tmp158, tmp157
.LVL22:
	.loc 1 19 18 view .LVU69
.LBE18:
.LBE27:
# ft_printf_handle_di.c:31: 			result[(*i)--] = less_zero(n);
	.loc 1 31 15 view .LVU70
	subl	%r8d, %edx	# _29, tmp176
# ft_printf_handle_di.c:31: 			result[(*i)--] = less_zero(n);
	.loc 1 31 10 view .LVU71
	movq	%rcx, %r13	# ivtmp.26, _29
.LBB28:
.LBB19:
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 18 view .LVU72
	shrq	$35, %rax	#, tmp155
	leal	(%rax,%rax,4), %esi	#, tmp162
	addl	%esi, %esi	# tmp163
# ft_printf_handle_di.c:19: 	c = '0' - ((*n) % 10);
	.loc 1 19 10 view .LVU73
	subl	%esi, %edi	# tmp163, _60
.LBE19:
.LBE28:
# ft_printf_handle_di.c:31: 			result[(*i)--] = less_zero(n);
	.loc 1 31 15 view .LVU74
	leal	17(%rdx), %esi	#, _40
.LBB29:
.LBB20:
# ft_printf_handle_di.c:20: 	*n /= 10;
	.loc 1 20 5 view .LVU75
	movl	%eax, %edx	# tmp155, n
.LVL23:
.L7:
	.loc 1 20 5 view .LVU76
.LBE20:
.LBE29:
	.loc 1 34 3 is_stmt 1 view .LVU77
	.loc 1 35 3 view .LVU78
# ft_printf_handle_di.c:34: 		result[(*i)--] = '0' + ((*n) % 10);
	.loc 1 34 24 is_stmt 0 view .LVU79
	addl	$48, %edi	#, tmp154
# ft_printf_handle_di.c:27: 	while (*n)
	.loc 1 27 9 view .LVU80
	decq	%rcx	# ivtmp.26
# ft_printf_handle_di.c:34: 		result[(*i)--] = '0' + ((*n) % 10);
	.loc 1 34 24 view .LVU81
	movb	%dil, 0(%r13)	# tmp154, MEM[(char *)_76]
.LVL24:
	.loc 1 27 9 is_stmt 1 view .LVU82
	testl	%edx, %edx	# n
	jne	.L8	#,
.L9:
	.loc 1 27 9 is_stmt 0 view .LVU83
.LBE30:
.LBE32:
	.loc 1 55 2 is_stmt 1 view .LVU84
# ft_printf_handle_di.c:55: 	if (sign)
	.loc 1 55 5 is_stmt 0 view .LVU85
	testb	%r9b, %r9b	# sign
	je	.L6	#,
	.loc 1 56 3 is_stmt 1 view .LVU86
.LVL25:
# ft_printf_handle_di.c:56: 		result[i--] = '-';
	.loc 1 56 15 is_stmt 0 view .LVU87
	movslq	%esi, %rsi	# _40, _40
	movb	$45, -64(%rbp,%rsi)	#, result[_59]
# ft_printf_handle_di.c:58: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 58 6 view .LVU88
	leaq	-64(%rbp,%rsi), %r13	#, _29
	jmp	.L6	#
.LVL26:
	.p2align 4,,10
	.p2align 3
.L2:
# ft_printf_handle_di.c:46: 	n = va_arg(*arg, int);
	.loc 1 46 6 view .LVU89
	movq	8(%rdi), %rdx	# MEM[(struct  *)arg_21(D)].overflow_arg_area, D.5697
.LVL27:
	.loc 1 46 6 view .LVU90
	leaq	8(%rdx), %rax	#, tmp131
	movq	%rax, 8(%rdi)	# tmp131, MEM[(struct  *)arg_21(D)].overflow_arg_area
	jmp	.L3	#
.LVL28:
	.p2align 4,,10
	.p2align 3
.L13:
.LBB33:
.LBB31:
# ft_printf_handle_di.c:29: 		if (*n < 0)
	.loc 1 29 6 view .LVU91
	movq	%r8, %rcx	# _29, ivtmp.26
	movl	%eax, %edx	# tmp133, n
.LVL29:
	.loc 1 29 6 view .LVU92
	movq	%r8, %r13	# _29, _29
	jmp	.L7	#
.LVL30:
.L14:
	.loc 1 29 6 view .LVU93
.LBE31:
.LBE33:
# ft_printf_handle_di.c:59: 		return (-1);
	.loc 1 59 10 view .LVU94
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
.L22:
# ft_printf_handle_di.c:62: }
	.loc 1 62 1 view .LVU95
	call	__stack_chk_fail@PLT	#
.LVL31:
	.cfi_endproc
.LFE53:
	.size	ft_printf_handle_di, .-ft_printf_handle_di
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.file 8 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x31a
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xe
	.long	.LASF27
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x2
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xf
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x10
	.byte	0x8
	.uleb128 0x2
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x3
	.long	0x93
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x11
	.long	0x93
	.uleb128 0x2
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x3
	.long	0xb7
	.uleb128 0x12
	.uleb128 0x2
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xc4
	.uleb128 0x13
	.long	.LASF28
	.long	0xcd
	.uleb128 0xa
	.long	0xdd
	.long	0xdd
	.uleb128 0xb
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	.LASF29
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x112
	.uleb128 0x4
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x4
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x4
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x4
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x2
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb8
	.uleb128 0xa
	.long	0x93
	.long	0x12e
	.uleb128 0xb
	.long	0x41
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.long	0x9a
	.uleb128 0x15
	.long	.LASF22
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x9f
	.long	0x154
	.uleb128 0x5
	.long	0x48
	.uleb128 0x5
	.long	0xb2
	.uleb128 0x5
	.long	0x35
	.byte	0
	.uleb128 0x16
	.long	.LASF23
	.byte	0x8
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0x16a
	.uleb128 0x5
	.long	0x12e
	.byte	0
	.uleb128 0x17
	.long	.LASF30
	.byte	0x1
	.byte	0x27
	.byte	0x5
	.long	0x48
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x2b9
	.uleb128 0xc
	.string	"arg"
	.byte	0x22
	.long	0x2b9
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x18
	.long	.LASF24
	.byte	0x1
	.byte	0x27
	.byte	0x2c
	.long	0x2be
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xc
	.string	"fd"
	.byte	0x3f
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x19
	.long	.LASF26
	.byte	0x1
	.byte	0x29
	.byte	0x7
	.long	0x11e
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0xd
	.string	"i"
	.byte	0x2a
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x1a
	.long	.LASF25
	.byte	0x1
	.byte	0x2b
	.byte	0x7
	.long	0x93
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xd
	.string	"n"
	.byte	0x2c
	.long	0x48
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x1b
	.long	0x2c3
	.long	.LLRL6
	.byte	0x1
	.byte	0x36
	.byte	0x2
	.long	0x25d
	.uleb128 0x7
	.long	0x2e2
	.uleb128 0x7
	.long	0x2d9
	.uleb128 0x7
	.long	0x2d0
	.uleb128 0x1c
	.long	0x2ef
	.quad	.LBI10
	.byte	.LVU47
	.long	.LLRL7
	.byte	0x1
	.byte	0x1f
	.byte	0x15
	.uleb128 0x1d
	.long	0x300
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x1e
	.long	.LLRL7
	.uleb128 0x1f
	.long	0x309
	.long	.LLST9
	.long	.LVUS9
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x8
	.quad	.LVL7
	.long	0x154
	.long	0x275
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x8
	.quad	.LVL8
	.long	0x133
	.long	0x293
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x8
	.quad	.LVL9
	.long	0x154
	.long	0x2ab
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x20
	.quad	.LVL31
	.long	0x314
	.byte	0
	.uleb128 0x3
	.long	0x112
	.uleb128 0x3
	.long	0x48
	.uleb128 0x21
	.long	.LASF31
	.byte	0x1
	.byte	0x19
	.byte	0xd
	.byte	0x1
	.long	0x2ef
	.uleb128 0x9
	.string	"n"
	.byte	0x19
	.byte	0x17
	.long	0x2be
	.uleb128 0x9
	.string	"i"
	.byte	0x19
	.byte	0x1f
	.long	0x2be
	.uleb128 0x22
	.long	.LASF26
	.byte	0x1
	.byte	0x19
	.byte	0x28
	.long	0x8e
	.byte	0
	.uleb128 0x23
	.long	.LASF32
	.byte	0x1
	.byte	0xf
	.byte	0xd
	.long	0x93
	.byte	0x1
	.long	0x314
	.uleb128 0x9
	.string	"n"
	.byte	0xf
	.byte	0x1c
	.long	0x2be
	.uleb128 0x24
	.string	"c"
	.byte	0x1
	.byte	0x11
	.byte	0x7
	.long	0x93
	.byte	0
	.uleb128 0x25
	.long	.LASF33
	.long	.LASF33
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 39
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU44
	.uleb128 .LVU44
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 .LVU91
	.uleb128 .LVU91
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 .LVU90
	.uleb128 .LVU90
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU14
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU21
	.uleb128 .LVU36
	.uleb128 .LVU37
	.uleb128 .LVU40
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU62
	.uleb128 .LVU62
	.uleb128 .LVU64
	.uleb128 .LVU64
	.uleb128 .LVU76
	.uleb128 .LVU82
	.uleb128 .LVU87
	.uleb128 .LVU91
	.uleb128 .LVU93
.LLST3:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x42
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x2
	.byte	0x41
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x2
	.byte	0x42
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x2
	.byte	0x42
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x2
	.byte	0x41
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x8
	.byte	0x72
	.sleb128 0
	.byte	0x76
	.sleb128 0
	.byte	0x1c
	.byte	0x23
	.uleb128 0x40
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x2
	.byte	0x42
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU8
	.uleb128 .LVU89
	.uleb128 .LVU91
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS5:
	.uleb128 .LVU18
	.uleb128 .LVU21
	.uleb128 .LVU40
	.uleb128 .LVU54
	.uleb128 .LVU58
	.uleb128 .LVU68
	.uleb128 .LVU68
	.uleb128 .LVU69
	.uleb128 .LVU82
	.uleb128 .LVU89
	.uleb128 .LVU91
	.uleb128 .LVU92
.LLST5:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS8:
	.uleb128 .LVU47
	.uleb128 .LVU59
.LLST8:
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x6
	.byte	0xa0
	.long	.Ldebug_info0+503
	.sleb128 0
	.byte	0
.LVUS9:
	.uleb128 .LVU50
	.uleb128 .LVU59
.LLST9:
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x6
	.byte	0x8
	.byte	0x30
	.byte	0x75
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL6:
	.byte	0x4
	.uleb128 .LBB8-.Ltext0
	.uleb128 .LBE8-.Ltext0
	.byte	0x4
	.uleb128 .LBB32-.Ltext0
	.uleb128 .LBE32-.Ltext0
	.byte	0x4
	.uleb128 .LBB33-.Ltext0
	.uleb128 .LBE33-.Ltext0
	.byte	0
.LLRL7:
	.byte	0x4
	.uleb128 .LBB10-.Ltext0
	.uleb128 .LBE10-.Ltext0
	.byte	0x4
	.uleb128 .LBB21-.Ltext0
	.uleb128 .LBE21-.Ltext0
	.byte	0x4
	.uleb128 .LBB22-.Ltext0
	.uleb128 .LBE22-.Ltext0
	.byte	0x4
	.uleb128 .LBB23-.Ltext0
	.uleb128 .LBE23-.Ltext0
	.byte	0x4
	.uleb128 .LBB24-.Ltext0
	.uleb128 .LBE24-.Ltext0
	.byte	0x4
	.uleb128 .LBB25-.Ltext0
	.uleb128 .LBE25-.Ltext0
	.byte	0x4
	.uleb128 .LBB26-.Ltext0
	.uleb128 .LBE26-.Ltext0
	.byte	0x4
	.uleb128 .LBB27-.Ltext0
	.uleb128 .LBE27-.Ltext0
	.byte	0x4
	.uleb128 .LBB28-.Ltext0
	.uleb128 .LBE28-.Ltext0
	.byte	0x4
	.uleb128 .LBB29-.Ltext0
	.uleb128 .LBE29-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF32:
	.string	"less_zero"
.LASF30:
	.string	"ft_printf_handle_di"
.LASF18:
	.string	"fp_offset"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF31:
	.string	"loop"
.LASF25:
	.string	"sign"
.LASF7:
	.string	"short unsigned int"
.LASF22:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF33:
	.string	"__stack_chk_fail"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF26:
	.string	"result"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF29:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF23:
	.string	"ft_strlen"
.LASF28:
	.string	"__builtin_va_list"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF24:
	.string	"written_bytes"
.LASF27:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf_handle_di.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/258            0           0     0     644     23786     `
	.file	"ft_printf_handle_u.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_u.c"
	.p2align 4
	.globl	ft_printf_handle_u
	.type	ft_printf_handle_u, @function
ft_printf_handle_u:
.LVL0:
.LFB51:
	.file 1 "ft_printf_handle_u.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_u.c:16: {
	.loc 1 16 1 view .LVU2
# ft_printf_handle_u.c:22: 	n = va_arg(*arg, unsigned);
	.loc 1 22 4 view .LVU3
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], D.5665
	movq	%rax, -40(%rbp)	# D.5665, D.5685
	movl	(%rdi), %eax	# MEM[(struct  *)arg_22(D)].gp_offset, D.5665
# ft_printf_handle_u.c:16: {
	.loc 1 16 1 view .LVU4
	movq	%rsi, %rbx	# tmp138, written_bytes
	movl	%edx, %r12d	# tmp139, fd
# ft_printf_handle_u.c:22: 	n = va_arg(*arg, unsigned);
	.loc 1 22 4 view .LVU5
	cmpl	$47, %eax	#, D.5665
	ja	.L2	#,
	movl	%eax, %edx	# D.5665, D.5668
.LVL1:
	.loc 1 22 4 view .LVU6
	addl	$8, %eax	#, tmp114
	movl	%eax, (%rdi)	# tmp114, MEM[(struct  *)arg_22(D)].gp_offset
	addq	16(%rdi), %rdx	# MEM[(struct  *)arg_22(D)].reg_save_area, D.5670
	movl	(%rdx), %edx	# MEM[(unsigned int * {ref-all})addr.6_42], n
	.loc 1 23 2 is_stmt 1 view .LVU7
.LVL2:
	.loc 1 24 2 view .LVU8
	.loc 1 25 2 view .LVU9
# ft_printf_handle_u.c:25: 	result[i--] = 0;
	.loc 1 25 14 is_stmt 0 view .LVU10
	movb	$0, -45(%rbp)	#, result[19]
	.loc 1 26 2 is_stmt 1 view .LVU11
# ft_printf_handle_u.c:26: 	if (!n)
	.loc 1 26 5 is_stmt 0 view .LVU12
	testl	%edx, %edx	# n
	jne	.L8	#,
.L13:
.LVL3:
	.loc 1 26 5 view .LVU13
	movb	$48, -46(%rbp)	#, MEM <char[20]> [(void *)&result][18]
.LVL4:
	.loc 1 28 9 is_stmt 1 view .LVU14
# ft_printf_handle_u.c:26: 	if (!n)
	.loc 1 26 5 is_stmt 0 view .LVU15
	movl	$18, %eax	#, _67
	leaq	-64(%rbp), %r8	#, tmp136
.LVL5:
.L5:
	.loc 1 33 2 is_stmt 1 view .LVU16
	.loc 1 35 2 view .LVU17
	.loc 1 36 2 view .LVU18
# ft_printf_handle_u.c:36: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 36 6 is_stmt 0 view .LVU19
	leaq	(%r8,%rax), %r13	#, _6
	movq	%r13, %rdi	# _6,
	call	ft_strlen@PLT	#
.LVL6:
# ft_printf_handle_u.c:36: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 36 6 discriminator 1 view .LVU20
	movq	%r13, %rsi	# _6,
	movl	%r12d, %edi	# fd,
# ft_printf_handle_u.c:36: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 36 6 view .LVU21
	movq	%rax, %rdx	# tmp140, _7
# ft_printf_handle_u.c:36: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 36 6 discriminator 1 view .LVU22
	call	write@PLT	#
.LVL7:
# ft_printf_handle_u.c:36: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 36 5 discriminator 2 view .LVU23
	cmpq	$-1, %rax	#, tmp141
	je	.L9	#,
	.loc 1 38 2 is_stmt 1 view .LVU24
# ft_printf_handle_u.c:38: 	*written_bytes += ft_strlen(result + i);
	.loc 1 38 20 is_stmt 0 view .LVU25
	movq	%r13, %rdi	# _6,
	call	ft_strlen@PLT	#
.LVL8:
# ft_printf_handle_u.c:38: 	*written_bytes += ft_strlen(result + i);
	.loc 1 38 17 discriminator 1 view .LVU26
	addl	%eax, (%rbx)	# tmp142, *written_bytes_33(D)
	.loc 1 39 2 is_stmt 1 view .LVU27
# ft_printf_handle_u.c:39: 	return (0);
	.loc 1 39 9 is_stmt 0 view .LVU28
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_u.c:40: }
	.loc 1 40 1 view .LVU29
	movq	-40(%rbp), %rdx	# D.5685, tmp144
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp144
	jne	.L12	#,
	addq	$40, %rsp	#,
	popq	%rbx	#
.LVL9:
	.loc 1 40 1 view .LVU30
	popq	%r12	#
.LVL10:
	.loc 1 40 1 view .LVU31
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL11:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_printf_handle_u.c:22: 	n = va_arg(*arg, unsigned);
	.loc 1 22 4 view .LVU32
	movq	8(%rdi), %rdx	# MEM[(struct  *)arg_22(D)].overflow_arg_area, D.5670
.LVL12:
	.loc 1 22 4 view .LVU33
	leaq	8(%rdx), %rax	#, tmp115
	movq	%rax, 8(%rdi)	# tmp115, MEM[(struct  *)arg_22(D)].overflow_arg_area
	movl	(%rdx), %edx	# MEM[(unsigned int * {ref-all})addr.6_42], n
	.loc 1 23 2 is_stmt 1 view .LVU34
.LVL13:
	.loc 1 24 2 view .LVU35
	.loc 1 25 2 view .LVU36
# ft_printf_handle_u.c:25: 	result[i--] = 0;
	.loc 1 25 14 is_stmt 0 view .LVU37
	movb	$0, -45(%rbp)	#, result[19]
	.loc 1 26 2 is_stmt 1 view .LVU38
# ft_printf_handle_u.c:26: 	if (!n)
	.loc 1 26 5 is_stmt 0 view .LVU39
	testl	%edx, %edx	# n
	je	.L13	#,
.L8:
	.loc 1 26 5 view .LVU40
	movl	$18, %ecx	#, ivtmp.13
	leaq	-64(%rbp), %r8	#, tmp136
# ft_printf_handle_u.c:30: 		result[i--] = '0' + (n % 10);
	.loc 1 30 26 view .LVU41
	movl	$3435973837, %r9d	#, tmp120
.LVL14:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 30 3 is_stmt 1 view .LVU42
# ft_printf_handle_u.c:30: 		result[i--] = '0' + (n % 10);
	.loc 1 30 26 is_stmt 0 view .LVU43
	movl	%edx, %eax	# n, n
	movl	%edx, %esi	# n, tmp126
	imulq	%r9, %rax	# tmp120, tmp119
	shrq	$35, %rax	#, tmp117
	leal	(%rax,%rax,4), %edi	#, tmp124
	addl	%edi, %edi	# tmp125
	subl	%edi, %esi	# tmp125, tmp126
# ft_printf_handle_u.c:30: 		result[i--] = '0' + (n % 10);
	.loc 1 30 21 view .LVU44
	addl	$48, %esi	#, tmp127
	movb	%sil, (%r8,%rcx)	# tmp127, MEM[(char *)&result + ivtmp.13_26 * 1]
	.loc 1 31 3 is_stmt 1 view .LVU45
	movl	%edx, %esi	# n, n
# ft_printf_handle_u.c:31: 		n /= 10;
	.loc 1 31 5 is_stmt 0 view .LVU46
	movl	%eax, %edx	# tmp117, n
.LVL15:
	.loc 1 28 9 is_stmt 1 view .LVU47
	movq	%rcx, %rax	# ivtmp.13, ivtmp.13
.LVL16:
	.loc 1 28 9 is_stmt 0 view .LVU48
	decq	%rcx	# ivtmp.13
.LVL17:
	.loc 1 28 9 view .LVU49
	cmpl	$9, %esi	#, n
	ja	.L4	#,
# ft_printf_handle_u.c:36: 	if (write (fd, result + i, ft_strlen(result + i)) == -1)
	.loc 1 36 6 view .LVU50
	cltq
.LVL18:
	.loc 1 36 6 view .LVU51
	jmp	.L5	#
.LVL19:
.L9:
# ft_printf_handle_u.c:37: 		return (-1);
	.loc 1 37 10 view .LVU52
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
.L12:
# ft_printf_handle_u.c:40: }
	.loc 1 40 1 view .LVU53
	call	__stack_chk_fail@PLT	#
.LVL20:
	.cfi_endproc
.LFE51:
	.size	ft_printf_handle_u, .-ft_printf_handle_u
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.file 8 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x270
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xc
	.long	.LASF26
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x2
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xe
	.byte	0x8
	.uleb128 0x2
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0xf
	.long	0x8e
	.uleb128 0x2
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x3
	.long	0xb2
	.uleb128 0x10
	.uleb128 0x2
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xbf
	.uleb128 0x11
	.long	.LASF27
	.long	0xc8
	.uleb128 0x8
	.long	0xd8
	.long	0xd8
	.uleb128 0x9
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	.LASF28
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x10d
	.uleb128 0x4
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x4
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x4
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x4
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x2
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb3
	.uleb128 0x8
	.long	0x8e
	.long	0x129
	.uleb128 0x9
	.long	0x41
	.byte	0x13
	.byte	0
	.uleb128 0x3
	.long	0x95
	.uleb128 0x13
	.long	.LASF22
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x9a
	.long	0x14f
	.uleb128 0x5
	.long	0x48
	.uleb128 0x5
	.long	0xad
	.uleb128 0x5
	.long	0x35
	.byte	0
	.uleb128 0x14
	.long	.LASF23
	.byte	0x8
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0x165
	.uleb128 0x5
	.long	0x129
	.byte	0
	.uleb128 0x15
	.long	.LASF29
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x260
	.uleb128 0xa
	.string	"arg"
	.byte	0x21
	.long	0x260
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x16
	.long	.LASF24
	.byte	0x1
	.byte	0xf
	.byte	0x2b
	.long	0x265
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xa
	.string	"fd"
	.byte	0x3e
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x17
	.long	.LASF30
	.byte	0x1
	.byte	0x11
	.byte	0x9
	.long	0x119
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0xb
	.string	"i"
	.byte	0x12
	.byte	0x9
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x18
	.long	.LASF25
	.byte	0x1
	.byte	0x13
	.byte	0x9
	.long	0x8e
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xb
	.string	"n"
	.byte	0x14
	.byte	0xf
	.long	0x6b
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0x7
	.quad	.LVL6
	.long	0x14f
	.long	0x21c
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL7
	.long	0x12e
	.long	0x23a
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL8
	.long	0x14f
	.long	0x252
	.uleb128 0x6
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x19
	.quad	.LVL20
	.long	0x26a
	.byte	0
	.uleb128 0x3
	.long	0x10d
	.uleb128 0x3
	.long	0x48
	.uleb128 0x1a
	.long	.LASF31
	.long	.LASF31
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU9
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU13
	.uleb128 .LVU14
	.uleb128 .LVU16
	.uleb128 .LVU36
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU43
	.uleb128 .LVU43
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU51
	.uleb128 .LVU51
	.uleb128 .LVU52
.LLST3:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x2
	.byte	0x43
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x42
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x2
	.byte	0x41
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x2
	.byte	0x43
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x2
	.byte	0x42
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x3
	.byte	0x72
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS4:
	.uleb128 .LVU8
	.uleb128 .LVU32
	.uleb128 .LVU35
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS5:
	.uleb128 .LVU14
	.uleb128 .LVU16
	.uleb128 .LVU42
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 .LVU52
.LLST5:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF2:
	.string	"long int"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF25:
	.string	"sign"
.LASF7:
	.string	"short unsigned int"
.LASF22:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF31:
	.string	"__stack_chk_fail"
.LASF3:
	.string	"long unsigned int"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF30:
	.string	"result"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF28:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF23:
	.string	"ft_strlen"
.LASF27:
	.string	"__builtin_va_list"
.LASF29:
	.string	"ft_printf_handle_u"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF24:
	.string	"written_bytes"
.LASF26:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF18:
	.string	"fp_offset"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_printf_handle_u.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/280            0           0     0     644     27782     `
	.file	"ft_printf_handle_p.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_p.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"0123456789abcdef"
.LC1:
	.string	"0x0"
	.text
	.p2align 4
	.globl	ft_printf_handle_p
	.type	ft_printf_handle_p, @function
ft_printf_handle_p:
.LVL0:
.LFB52:
	.file 1 "ft_printf_handle_p.c"
	.loc 1 24 1 view -0
	.cfi_startproc
	.loc 1 24 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_p.c:24: {
	.loc 1 24 1 view .LVU2
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp138
	movq	%rax, -40(%rbp)	# tmp138, D.5697
	xorl	%eax, %eax	# tmp138
	.loc 1 25 2 is_stmt 1 view .LVU3
	.loc 1 26 2 view .LVU4
	.loc 1 27 2 view .LVU5
	.loc 1 28 2 view .LVU6
	.loc 1 30 2 view .LVU7
# ft_printf_handle_p.c:24: {
	.loc 1 24 1 is_stmt 0 view .LVU8
	movq	%rdi, %r13	# tmp131, arg
	movq	%rsi, %rbx	# tmp132, written_bytes
	movl	%edx, %r12d	# tmp133, fd
# ft_printf_handle_p.c:30: 	ft_strlcpy(digits, "0123456789abcdef", 17);
	.loc 1 30 2 view .LVU9
	leaq	-112(%rbp), %rdi	#, tmp113
.LVL1:
	.loc 1 30 2 view .LVU10
	movl	$17, %edx	#,
.LVL2:
	.loc 1 30 2 view .LVU11
	leaq	.LC0(%rip), %rsi	#, tmp114
.LVL3:
	.loc 1 30 2 view .LVU12
	call	ft_strlcpy@PLT	#
.LVL4:
	.loc 1 31 2 is_stmt 1 view .LVU13
# ft_printf_handle_p.c:31: 	argument = va_arg(*arg, long long unsigned);
	.loc 1 31 11 is_stmt 0 view .LVU14
	movl	0(%r13), %eax	# MEM[(struct  *)arg_20(D)].gp_offset, D.5676
	cmpl	$47, %eax	#, D.5676
	ja	.L2	#,
	movl	%eax, %edx	# D.5676, D.5679
	addl	$8, %eax	#, tmp117
	movl	%eax, 0(%r13)	# tmp117, MEM[(struct  *)arg_20(D)].gp_offset
	addq	16(%r13), %rdx	# MEM[(struct  *)arg_20(D)].reg_save_area, D.5681
	movq	(%rdx), %rax	# MEM[(long long unsigned int * {ref-all})addr.6_6], argument
	.loc 1 32 2 is_stmt 1 view .LVU15
# ft_printf_handle_p.c:32: 	if (!argument)
	.loc 1 32 5 is_stmt 0 view .LVU16
	testq	%rax, %rax	# argument
	je	.L16	#,
.L4:
	.loc 1 34 2 is_stmt 1 view .LVU17
.LVL5:
	.loc 1 35 2 view .LVU18
# ft_printf_handle_p.c:35: 	buffer[i--] = '\0';
	.loc 1 35 14 is_stmt 0 view .LVU19
	movb	$0, -51(%rbp)	#, buffer[29]
	.loc 1 36 2 is_stmt 1 view .LVU20
.LVL6:
	.loc 1 36 9 view .LVU21
	leaq	-52(%rbp), %rcx	#, ivtmp.16
# ft_printf_handle_p.c:35: 	buffer[i--] = '\0';
	.loc 1 35 10 is_stmt 0 view .LVU22
	movl	$28, %edx	#, i
.LVL7:
	.p2align 4,,10
	.p2align 3
.L7:
	.loc 1 38 3 is_stmt 1 view .LVU23
# ft_printf_handle_p.c:38: 		buffer[i--] = digits[argument % 16];
	.loc 1 38 33 is_stmt 0 view .LVU24
	movq	%rax, %rsi	# argument, tmp122
	movl	%edx, %edi	# i, i
# ft_printf_handle_p.c:36: 	while (argument)
	.loc 1 36 9 view .LVU25
	decq	%rcx	# ivtmp.16
# ft_printf_handle_p.c:38: 		buffer[i--] = digits[argument % 16];
	.loc 1 38 11 view .LVU26
	decl	%edx	# i
.LVL8:
# ft_printf_handle_p.c:38: 		buffer[i--] = digits[argument % 16];
	.loc 1 38 33 view .LVU27
	andl	$15, %esi	#, tmp122
# ft_printf_handle_p.c:38: 		buffer[i--] = digits[argument % 16];
	.loc 1 38 15 view .LVU28
	movzbl	-112(%rbp,%rsi), %esi	# digits[_1], digits[_1]
	movb	%sil, 1(%rcx)	# digits[_1], MEM[(char *)_13]
	.loc 1 39 3 is_stmt 1 view .LVU29
.LVL9:
	.loc 1 36 9 view .LVU30
	shrq	$4, %rax	#, argument
.LVL10:
	.loc 1 36 9 is_stmt 0 view .LVU31
	jne	.L7	#,
	.loc 1 41 2 is_stmt 1 view .LVU32
# ft_printf_handle_p.c:41: 	buffer[i--] = 'x';
	.loc 1 41 10 is_stmt 0 view .LVU33
	subl	$2, %edi	#, i
.LVL11:
# ft_printf_handle_p.c:41: 	buffer[i--] = 'x';
	.loc 1 41 14 view .LVU34
	movslq	%edx, %rdx	# i, i
# ft_printf_handle_p.c:42: 	buffer[i] = '0';
	.loc 1 42 12 view .LVU35
	movslq	%edi, %rdi	# i, i
# ft_printf_handle_p.c:41: 	buffer[i--] = 'x';
	.loc 1 41 14 view .LVU36
	movb	$120, -80(%rbp,%rdx)	#, buffer[i_34]
	.loc 1 42 2 is_stmt 1 view .LVU37
# ft_printf_handle_p.c:43: 	if (write (fd, buffer + i, ft_strlen(buffer + i)) == -1)
	.loc 1 43 6 is_stmt 0 view .LVU38
	leaq	-80(%rbp,%rdi), %r13	#, _4
.LVL12:
# ft_printf_handle_p.c:42: 	buffer[i] = '0';
	.loc 1 42 12 view .LVU39
	movb	$48, -80(%rbp,%rdi)	#, buffer[i_24]
	.loc 1 43 2 is_stmt 1 view .LVU40
# ft_printf_handle_p.c:43: 	if (write (fd, buffer + i, ft_strlen(buffer + i)) == -1)
	.loc 1 43 6 is_stmt 0 view .LVU41
	movq	%r13, %rdi	# _4,
.LVL13:
	.loc 1 43 6 view .LVU42
	call	ft_strlen@PLT	#
.LVL14:
# ft_printf_handle_p.c:43: 	if (write (fd, buffer + i, ft_strlen(buffer + i)) == -1)
	.loc 1 43 6 discriminator 1 view .LVU43
	movq	%r13, %rsi	# _4,
	movl	%r12d, %edi	# fd,
# ft_printf_handle_p.c:43: 	if (write (fd, buffer + i, ft_strlen(buffer + i)) == -1)
	.loc 1 43 6 view .LVU44
	movq	%rax, %rdx	# tmp135, _5
# ft_printf_handle_p.c:43: 	if (write (fd, buffer + i, ft_strlen(buffer + i)) == -1)
	.loc 1 43 6 discriminator 1 view .LVU45
	call	write@PLT	#
.LVL15:
# ft_printf_handle_p.c:43: 	if (write (fd, buffer + i, ft_strlen(buffer + i)) == -1)
	.loc 1 43 5 discriminator 2 view .LVU46
	cmpq	$-1, %rax	#, tmp136
	je	.L8	#,
	.loc 1 45 2 is_stmt 1 view .LVU47
# ft_printf_handle_p.c:45: 	(*written_bytes) += ft_strlen(buffer + i);
	.loc 1 45 22 is_stmt 0 view .LVU48
	movq	%r13, %rdi	# _4,
	call	ft_strlen@PLT	#
.LVL16:
# ft_printf_handle_p.c:45: 	(*written_bytes) += ft_strlen(buffer + i);
	.loc 1 45 19 discriminator 1 view .LVU49
	addl	(%rbx), %eax	# *written_bytes_32(D), _12
	.loc 1 46 2 is_stmt 1 view .LVU50
.LVL17:
.L9:
.LBB4:
.LBB5:
# ft_printf_handle_p.c:19: 	(*written_bytes) += 3;
	.loc 1 19 19 is_stmt 0 view .LVU51
	movl	%eax, (%rbx)	# _12, *written_bytes_32(D)
# ft_printf_handle_p.c:20: 	return (0);
	.loc 1 20 9 view .LVU52
	xorl	%eax, %eax	# <retval>
.L1:
	.loc 1 20 9 view .LVU53
.LBE5:
.LBE4:
# ft_printf_handle_p.c:47: }
	.loc 1 47 1 view .LVU54
	movq	-40(%rbp), %rdx	# D.5697, tmp139
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp139
	jne	.L17	#,
	addq	$88, %rsp	#,
	popq	%rbx	#
.LVL18:
	.loc 1 47 1 view .LVU55
	popq	%r12	#
.LVL19:
	.loc 1 47 1 view .LVU56
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL20:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_printf_handle_p.c:31: 	argument = va_arg(*arg, long long unsigned);
	.loc 1 31 11 view .LVU57
	movq	8(%r13), %rdx	# MEM[(struct  *)arg_20(D)].overflow_arg_area, D.5681
	leaq	8(%rdx), %rax	#, tmp118
	movq	%rax, 8(%r13)	# tmp118, MEM[(struct  *)arg_20(D)].overflow_arg_area
	movq	(%rdx), %rax	# MEM[(long long unsigned int * {ref-all})addr.6_6], argument
	.loc 1 32 2 is_stmt 1 view .LVU58
# ft_printf_handle_p.c:32: 	if (!argument)
	.loc 1 32 5 is_stmt 0 view .LVU59
	testq	%rax, %rax	# argument
	jne	.L4	#,
.L16:
	.loc 1 33 3 is_stmt 1 view .LVU60
.LVL21:
.LBB7:
.LBI4:
	.loc 1 15 12 view .LVU61
.LBB6:
	.loc 1 17 2 view .LVU62
# ft_printf_handle_p.c:17: 	if (write (fd, "0x0", 3) == -1)
	.loc 1 17 6 is_stmt 0 view .LVU63
	movl	$3, %edx	#,
	leaq	.LC1(%rip), %rsi	#, tmp119
	movl	%r12d, %edi	# fd,
	call	write@PLT	#
.LVL22:
# ft_printf_handle_p.c:17: 	if (write (fd, "0x0", 3) == -1)
	.loc 1 17 5 discriminator 1 view .LVU64
	cmpq	$-1, %rax	#, tmp134
	je	.L8	#,
	.loc 1 19 2 is_stmt 1 view .LVU65
# ft_printf_handle_p.c:19: 	(*written_bytes) += 3;
	.loc 1 19 19 is_stmt 0 view .LVU66
	movl	(%rbx), %eax	# *written_bytes_32(D), tmp141
	addl	$3, %eax	#, _12
	.loc 1 20 2 is_stmt 1 view .LVU67
# ft_printf_handle_p.c:20: 	return (0);
	.loc 1 20 9 is_stmt 0 view .LVU68
	jmp	.L9	#
.LVL23:
.L8:
# ft_printf_handle_p.c:18: 		return (-1);
	.loc 1 18 10 view .LVU69
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
.L17:
.LBE6:
.LBE7:
# ft_printf_handle_p.c:47: }
	.loc 1 47 1 view .LVU70
	call	__stack_chk_fail@PLT	#
.LVL24:
	.cfi_endproc
.LFE52:
	.size	ft_printf_handle_p, .-ft_printf_handle_p
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.file 8 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x34b
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xe
	.long	.LASF29
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x4
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xf
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x10
	.byte	0x8
	.uleb128 0x4
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x5
	.long	0x93
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x11
	.long	0x93
	.uleb128 0x4
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x5
	.long	0xb7
	.uleb128 0x12
	.uleb128 0x4
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xc4
	.uleb128 0x13
	.long	.LASF30
	.long	0xcd
	.uleb128 0x8
	.long	0xdd
	.long	0xdd
	.uleb128 0x9
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x14
	.long	.LASF31
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x112
	.uleb128 0x6
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x6
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x6
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x6
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x4
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb8
	.uleb128 0x5
	.long	0x9a
	.uleb128 0x15
	.long	.LASF22
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x9f
	.long	0x144
	.uleb128 0x3
	.long	0x48
	.uleb128 0x3
	.long	0xb2
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0xa
	.long	.LASF23
	.byte	0x21
	.long	0x35
	.long	0x158
	.uleb128 0x3
	.long	0x11e
	.byte	0
	.uleb128 0xa
	.long	.LASF24
	.byte	0x29
	.long	0x35
	.long	0x176
	.uleb128 0x3
	.long	0x8e
	.uleb128 0x3
	.long	0x11e
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x16
	.long	.LASF32
	.byte	0x1
	.byte	0x17
	.byte	0x5
	.long	0x48
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x2f2
	.uleb128 0xb
	.string	"arg"
	.byte	0x21
	.long	0x2f2
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x17
	.long	.LASF25
	.byte	0x1
	.byte	0x17
	.byte	0x2b
	.long	0x2f7
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xb
	.string	"fd"
	.byte	0x3e
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xc
	.long	.LASF26
	.byte	0x19
	.long	0x2fc
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x18
	.long	.LASF28
	.byte	0x1
	.byte	0x1a
	.byte	0x15
	.long	0xab
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xc
	.long	.LASF27
	.byte	0x1b
	.long	0x30c
	.uleb128 0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x19
	.string	"i"
	.byte	0x1
	.byte	0x1c
	.byte	0xa
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x1a
	.long	0x31c
	.quad	.LBI4
	.byte	.LVU61
	.long	.LLRL5
	.byte	0x1
	.byte	0x21
	.byte	0xb
	.long	0x26b
	.uleb128 0xd
	.long	0x339
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0xd
	.long	0x32d
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x1b
	.quad	.LVL22
	.long	0x123
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x33
	.byte	0
	.byte	0
	.uleb128 0x7
	.quad	.LVL4
	.long	0x158
	.long	0x296
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x41
	.byte	0
	.uleb128 0x7
	.quad	.LVL14
	.long	0x144
	.long	0x2ae
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL15
	.long	0x123
	.long	0x2cc
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL16
	.long	0x144
	.long	0x2e4
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x1c
	.quad	.LVL24
	.long	0x345
	.byte	0
	.uleb128 0x5
	.long	0x112
	.uleb128 0x5
	.long	0x48
	.uleb128 0x8
	.long	0x93
	.long	0x30c
	.uleb128 0x9
	.long	0x41
	.byte	0x10
	.byte	0
	.uleb128 0x8
	.long	0x93
	.long	0x31c
	.uleb128 0x9
	.long	0x41
	.byte	0x1d
	.byte	0
	.uleb128 0x1d
	.long	.LASF33
	.byte	0x1
	.byte	0xf
	.byte	0xc
	.long	0x48
	.byte	0x1
	.long	0x345
	.uleb128 0x1e
	.long	.LASF25
	.byte	0x1
	.byte	0xf
	.byte	0x1a
	.long	0x2f7
	.uleb128 0x1f
	.string	"fd"
	.byte	0x1
	.byte	0xf
	.byte	0x2d
	.long	0x48
	.byte	0
	.uleb128 0x20
	.long	.LASF34
	.long	.LASF34
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 23
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 10
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU69
	.uleb128 .LVU69
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU56
	.uleb128 .LVU56
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU21
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU43
.LLST3:
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x34
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL14-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS4:
	.uleb128 .LVU18
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU23
	.uleb128 .LVU23
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU43
.LLST4:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x2
	.byte	0x4d
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x2
	.byte	0x4c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-1-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU61
	.uleb128 .LVU69
.LLST6:
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS7:
	.uleb128 .LVU61
	.uleb128 .LVU69
.LLST7:
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL5:
	.byte	0x4
	.uleb128 .LBB4-.Ltext0
	.uleb128 .LBE4-.Ltext0
	.byte	0x4
	.uleb128 .LBB7-.Ltext0
	.uleb128 .LBE7-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF33:
	.string	"handle_0"
.LASF18:
	.string	"fp_offset"
.LASF24:
	.string	"ft_strlcpy"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF28:
	.string	"argument"
.LASF7:
	.string	"short unsigned int"
.LASF22:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF34:
	.string	"__stack_chk_fail"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF26:
	.string	"digits"
.LASF31:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF27:
	.string	"buffer"
.LASF23:
	.string	"ft_strlen"
.LASF32:
	.string	"ft_printf_handle_p"
.LASF30:
	.string	"__builtin_va_list"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF25:
	.string	"written_bytes"
.LASF29:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf_handle_p.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/302            0           0     0     644     12226     `
	.file	"ft_printf_handle_percent.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_percent.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"%"
	.text
	.p2align 4
	.globl	ft_printf_handle_percent
	.type	ft_printf_handle_percent, @function
ft_printf_handle_percent:
.LVL0:
.LFB51:
	.file 1 "ft_printf_handle_percent.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_percent.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_printf_handle_percent.c:17: 	if (write (fd, "%", 1) == -1)
	.loc 1 17 6 is_stmt 0 view .LVU4
	movl	$1, %edx	#,
# ft_printf_handle_percent.c:16: {
	.loc 1 16 1 view .LVU5
	movq	%rdi, %rbx	# tmp90, written_bytes
	movl	%esi, %edi	# tmp91, fd
.LVL1:
# ft_printf_handle_percent.c:17: 	if (write (fd, "%", 1) == -1)
	.loc 1 17 6 view .LVU6
	leaq	.LC0(%rip), %rsi	#, tmp88
.LVL2:
	.loc 1 17 6 view .LVU7
	call	write@PLT	#
.LVL3:
# ft_printf_handle_percent.c:17: 	if (write (fd, "%", 1) == -1)
	.loc 1 17 5 discriminator 1 view .LVU8
	cmpq	$-1, %rax	#, tmp92
	je	.L3	#,
	.loc 1 19 2 is_stmt 1 view .LVU9
# ft_printf_handle_percent.c:19: 	(*written_bytes)++;
	.loc 1 19 18 is_stmt 0 view .LVU10
	incl	(%rbx)	# *written_bytes_9(D)
	.loc 1 20 2 is_stmt 1 view .LVU11
# ft_printf_handle_percent.c:20: 	return (0);
	.loc 1 20 9 is_stmt 0 view .LVU12
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_percent.c:21: }
	.loc 1 21 1 view .LVU13
	movq	-8(%rbp), %rbx	#,
.LVL4:
	.loc 1 21 1 view .LVU14
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL5:
.L3:
	.cfi_restore_state
# ft_printf_handle_percent.c:18: 		return (-1);
	.loc 1 18 10 view .LVU15
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
	.cfi_endproc
.LFE51:
	.size	ft_printf_handle_percent, .-ft_printf_handle_percent
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/include/unistd.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x140
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x6
	.long	.LASF17
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x2
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x7
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x2
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x2
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x80
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x5
	.long	0xab
	.uleb128 0x8
	.uleb128 0x9
	.long	.LASF18
	.byte	0x5
	.value	0x17a
	.byte	0x10
	.long	0x93
	.long	0xcd
	.uleb128 0x3
	.long	0x48
	.uleb128 0x3
	.long	0xa6
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0xa
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x13e
	.uleb128 0xb
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x23
	.long	0x13e
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xc
	.string	"fd"
	.byte	0x1
	.byte	0xf
	.byte	0x36
	.long	0x48
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xd
	.quad	.LVL3
	.long	0xac
	.uleb128 0x4
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x4
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.uleb128 0x4
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.byte	0
	.uleb128 0x5
	.long	0x48
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU6
	.uleb128 .LVU6
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU15
	.uleb128 .LVU15
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF16:
	.string	"written_bytes"
.LASF11:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF15:
	.string	"long long unsigned int"
.LASF17:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF12:
	.string	"__ssize_t"
.LASF18:
	.string	"write"
.LASF6:
	.string	"unsigned char"
.LASF13:
	.string	"char"
.LASF14:
	.string	"ssize_t"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF19:
	.string	"ft_printf_handle_percent"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf_handle_percent.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/330            0           0     0     644     19786     `
	.file	"ft_printf_handle_s.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_s.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"(null)"
	.text
	.p2align 4
	.globl	ft_printf_handle_s
	.type	ft_printf_handle_s, @function
ft_printf_handle_s:
.LVL0:
.LFB51:
	.file 1 "ft_printf_handle_s.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_s.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
# ft_printf_handle_s.c:19: 	argument = va_arg(*arg, char *);
	.loc 1 19 11 is_stmt 0 view .LVU5
	movl	(%rdi), %eax	# MEM[(struct  *)arg_16(D)].gp_offset, D.5660
# ft_printf_handle_s.c:16: {
	.loc 1 16 1 view .LVU6
	movq	%rsi, %rbx	# tmp112, written_bytes
	movl	%edx, %r13d	# tmp113, fd
# ft_printf_handle_s.c:19: 	argument = va_arg(*arg, char *);
	.loc 1 19 11 view .LVU7
	cmpl	$47, %eax	#, D.5660
	ja	.L2	#,
	movl	%eax, %edx	# D.5660, D.5663
.LVL1:
	.loc 1 19 11 view .LVU8
	addl	$8, %eax	#, tmp107
	movl	%eax, (%rdi)	# tmp107, MEM[(struct  *)arg_16(D)].gp_offset
	addq	16(%rdi), %rdx	# MEM[(struct  *)arg_16(D)].reg_save_area, D.5665
	movq	(%rdx), %r12	# MEM[(char * * {ref-all})addr.2_28], argument
	.loc 1 20 2 is_stmt 1 view .LVU9
# ft_printf_handle_s.c:20: 	if (!argument)
	.loc 1 20 5 is_stmt 0 view .LVU10
	testq	%r12, %r12	# argument
	je	.L15	#,
.L4:
	.loc 1 27 2 is_stmt 1 view .LVU11
# ft_printf_handle_s.c:27: 	if (ft_strlen(argument))
	.loc 1 27 6 is_stmt 0 view .LVU12
	movq	%r12, %rdi	# argument,
.LVL2:
	.loc 1 27 6 view .LVU13
	call	ft_strlen@PLT	#
.LVL3:
# ft_printf_handle_s.c:27: 	if (ft_strlen(argument))
	.loc 1 27 5 discriminator 1 view .LVU14
	testq	%rax, %rax	# tmp115
	je	.L10	#,
	.loc 1 29 3 is_stmt 1 view .LVU15
# ft_printf_handle_s.c:29: 		if (write(fd, argument, ft_strlen(argument)) == -1)
	.loc 1 29 7 is_stmt 0 view .LVU16
	movq	%r12, %rdi	# argument,
	call	ft_strlen@PLT	#
.LVL4:
# ft_printf_handle_s.c:29: 		if (write(fd, argument, ft_strlen(argument)) == -1)
	.loc 1 29 7 discriminator 1 view .LVU17
	movq	%r12, %rsi	# argument,
	movl	%r13d, %edi	# fd,
# ft_printf_handle_s.c:29: 		if (write(fd, argument, ft_strlen(argument)) == -1)
	.loc 1 29 7 view .LVU18
	movq	%rax, %rdx	# tmp117, _5
# ft_printf_handle_s.c:29: 		if (write(fd, argument, ft_strlen(argument)) == -1)
	.loc 1 29 7 discriminator 1 view .LVU19
	call	write@PLT	#
.LVL5:
# ft_printf_handle_s.c:29: 		if (write(fd, argument, ft_strlen(argument)) == -1)
	.loc 1 29 6 discriminator 2 view .LVU20
	cmpq	$-1, %rax	#, tmp118
	je	.L9	#,
.L10:
	.loc 1 32 2 is_stmt 1 view .LVU21
# ft_printf_handle_s.c:32: 	(*written_bytes) += ft_strlen(argument);
	.loc 1 32 22 is_stmt 0 view .LVU22
	movq	%r12, %rdi	# argument,
	call	ft_strlen@PLT	#
.LVL6:
# ft_printf_handle_s.c:32: 	(*written_bytes) += ft_strlen(argument);
	.loc 1 32 19 discriminator 1 view .LVU23
	addl	%eax, (%rbx)	# tmp116, *written_bytes_26(D)
	.loc 1 33 2 is_stmt 1 view .LVU24
.L7:
# ft_printf_handle_s.c:25: 		return (0);
	.loc 1 25 10 is_stmt 0 view .LVU25
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_s.c:34: }
	.loc 1 34 1 view .LVU26
	addq	$8, %rsp	#,
	popq	%rbx	#
.LVL7:
	.loc 1 34 1 view .LVU27
	popq	%r12	#
	popq	%r13	#
.LVL8:
	.loc 1 34 1 view .LVU28
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL9:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_printf_handle_s.c:19: 	argument = va_arg(*arg, char *);
	.loc 1 19 11 view .LVU29
	movq	8(%rdi), %rdx	# MEM[(struct  *)arg_16(D)].overflow_arg_area, D.5665
.LVL10:
	.loc 1 19 11 view .LVU30
	leaq	8(%rdx), %rax	#, tmp108
	movq	%rax, 8(%rdi)	# tmp108, MEM[(struct  *)arg_16(D)].overflow_arg_area
	movq	(%rdx), %r12	# MEM[(char * * {ref-all})addr.2_28], argument
	.loc 1 20 2 is_stmt 1 view .LVU31
# ft_printf_handle_s.c:20: 	if (!argument)
	.loc 1 20 5 is_stmt 0 view .LVU32
	testq	%r12, %r12	# argument
	jne	.L4	#,
.L15:
	.loc 1 22 3 is_stmt 1 view .LVU33
# ft_printf_handle_s.c:22: 		if (write(fd, "(null)", 6) == -1)
	.loc 1 22 7 is_stmt 0 view .LVU34
	movl	$6, %edx	#,
	leaq	.LC0(%rip), %rsi	#, tmp109
	movl	%r13d, %edi	# fd,
.LVL11:
	.loc 1 22 7 view .LVU35
	call	write@PLT	#
.LVL12:
# ft_printf_handle_s.c:22: 		if (write(fd, "(null)", 6) == -1)
	.loc 1 22 6 discriminator 1 view .LVU36
	cmpq	$-1, %rax	#, tmp114
	je	.L9	#,
	.loc 1 24 3 is_stmt 1 view .LVU37
# ft_printf_handle_s.c:24: 		(*written_bytes) += 6;
	.loc 1 24 20 is_stmt 0 view .LVU38
	addl	$6, (%rbx)	#, *written_bytes_26(D)
	.loc 1 25 3 is_stmt 1 view .LVU39
# ft_printf_handle_s.c:25: 		return (0);
	.loc 1 25 10 is_stmt 0 view .LVU40
	jmp	.L7	#
.L9:
# ft_printf_handle_s.c:23: 			return (-1);
	.loc 1 23 11 view .LVU41
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
	.cfi_endproc
.LFE51:
	.size	ft_printf_handle_s, .-ft_printf_handle_s
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "../includes/libft.h"
	.file 8 "/usr/include/unistd.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x255
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x9
	.long	.LASF25
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x3
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xa
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xb
	.byte	0x8
	.uleb128 0x3
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x4
	.long	0x93
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0xc
	.long	0x93
	.uleb128 0x3
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x4
	.long	0xb7
	.uleb128 0xd
	.uleb128 0x3
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xc4
	.uleb128 0xe
	.long	.LASF26
	.long	0xcd
	.uleb128 0xf
	.long	0xdd
	.long	0xdd
	.uleb128 0x10
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	.LASF27
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x112
	.uleb128 0x5
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x5
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x5
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x5
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x3
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb8
	.uleb128 0x4
	.long	0x9a
	.uleb128 0x12
	.long	.LASF22
	.byte	0x7
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0x139
	.uleb128 0x6
	.long	0x11e
	.byte	0
	.uleb128 0x13
	.long	.LASF23
	.byte	0x8
	.value	0x17a
	.byte	0x10
	.long	0x9f
	.long	0x15a
	.uleb128 0x6
	.long	0x48
	.uleb128 0x6
	.long	0xb2
	.uleb128 0x6
	.long	0x35
	.byte	0
	.uleb128 0x14
	.long	.LASF28
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x24e
	.uleb128 0x8
	.string	"arg"
	.byte	0x21
	.long	0x24e
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x15
	.long	.LASF24
	.byte	0x1
	.byte	0xf
	.byte	0x2b
	.long	0x253
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x8
	.string	"fd"
	.byte	0x3e
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x16
	.long	.LASF29
	.byte	0x1
	.byte	0x11
	.byte	0x8
	.long	0x8e
	.uleb128 0x1
	.byte	0x5c
	.uleb128 0x7
	.quad	.LVL3
	.long	0x123
	.long	0x1d9
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL4
	.long	0x123
	.long	0x1f1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL5
	.long	0x139
	.long	0x20f
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x7
	.quad	.LVL6
	.long	0x123
	.long	0x227
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x17
	.quad	.LVL12
	.long	0x139
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x36
	.byte	0
	.byte	0
	.uleb128 0x4
	.long	0x112
	.uleb128 0x4
	.long	0x48
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-1-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU8
	.uleb128 .LVU8
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF26:
	.string	"__builtin_va_list"
.LASF18:
	.string	"fp_offset"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF29:
	.string	"argument"
.LASF7:
	.string	"short unsigned int"
.LASF23:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF27:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF22:
	.string	"ft_strlen"
.LASF28:
	.string	"ft_printf_handle_s"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF24:
	.string	"written_bytes"
.LASF25:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf_handle_s.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/352            0           0     0     644     32631     `
	.file	"ft_printf_handle_x.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_x.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"0123456789abcdef"
.LC1:
	.string	"0"
	.text
	.p2align 4
	.globl	ft_printf_handle_x
	.type	ft_printf_handle_x, @function
ft_printf_handle_x:
.LVL0:
.LFB51:
	.file 1 "ft_printf_handle_x.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_x.c:16: {
	.loc 1 16 1 view .LVU2
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp170
	movq	%rax, -40(%rbp)	# tmp170, D.5675
	xorl	%eax, %eax	# tmp170
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 20 2 view .LVU6
	.loc 1 22 2 view .LVU7
# ft_printf_handle_x.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU8
	movq	%rdi, %r13	# tmp165, arg
	movq	%rsi, %rbx	# tmp166, written_bytes
	movl	%edx, %r12d	# tmp167, fd
# ft_printf_handle_x.c:22: 	ft_strlcpy(digits, "0123456789abcdef", 17);
	.loc 1 22 2 view .LVU9
	leaq	-64(%rbp), %rdi	#, tmp126
.LVL1:
	.loc 1 22 2 view .LVU10
	movl	$17, %edx	#,
.LVL2:
	.loc 1 22 2 view .LVU11
	leaq	.LC0(%rip), %rsi	#, tmp127
.LVL3:
	.loc 1 22 2 view .LVU12
	call	ft_strlcpy@PLT	#
.LVL4:
	.loc 1 23 2 is_stmt 1 view .LVU13
# ft_printf_handle_x.c:23: 	argument = va_arg(*arg, unsigned);
	.loc 1 23 11 is_stmt 0 view .LVU14
	movl	0(%r13), %eax	# MEM[(struct  *)arg_21(D)].gp_offset, D.5664
	cmpl	$47, %eax	#, D.5664
	ja	.L2	#,
	movl	%eax, %edx	# D.5664, D.5667
	addl	$8, %eax	#, tmp130
	movl	%eax, 0(%r13)	# tmp130, MEM[(struct  *)arg_21(D)].gp_offset
	addq	16(%r13), %rdx	# MEM[(struct  *)arg_21(D)].reg_save_area, D.5669
	movl	(%rdx), %eax	# MEM[(unsigned int * {ref-all})addr.2_12], argument
	.loc 1 24 2 is_stmt 1 view .LVU15
# ft_printf_handle_x.c:24: 	if (!argument)
	.loc 1 24 5 is_stmt 0 view .LVU16
	testl	%eax, %eax	# argument
	je	.L22	#,
.L4:
	.loc 1 31 2 is_stmt 1 view .LVU17
.LVL5:
	.loc 1 32 2 view .LVU18
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU19
	movl	%eax, %edx	# argument, tmp135
# ft_printf_handle_x.c:32: 	buffer[11] = '\0';
	.loc 1 32 13 view .LVU20
	movb	$0, -65(%rbp)	#, buffer[11]
	.loc 1 33 2 is_stmt 1 view .LVU21
.LVL6:
	.loc 1 33 9 view .LVU22
	.loc 1 35 3 view .LVU23
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU24
	andl	$15, %edx	#, tmp135
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU25
	movzbl	-64(%rbp,%rdx), %edx	# digits[_22], digits[_22]
	movb	%dl, -66(%rbp)	# digits[_22], buffer[10]
	.loc 1 36 3 is_stmt 1 view .LVU26
.LVL7:
	.loc 1 33 9 view .LVU27
	movl	%eax, %edx	# argument, argument
	shrl	$4, %edx	#, argument
.LVL8:
	.loc 1 33 9 is_stmt 0 view .LVU28
	je	.L11	#,
	.loc 1 35 3 is_stmt 1 view .LVU29
.LVL9:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU30
	andl	$15, %edx	#, tmp138
.LVL10:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU31
	movzbl	-64(%rbp,%rdx), %edx	# digits[_60], digits[_60]
	movb	%dl, -67(%rbp)	# digits[_60], buffer[9]
	.loc 1 36 3 is_stmt 1 view .LVU32
.LVL11:
	.loc 1 33 9 view .LVU33
	movl	%eax, %edx	# argument, argument
	shrl	$8, %edx	#, argument
.LVL12:
	.loc 1 33 9 is_stmt 0 view .LVU34
	je	.L12	#,
	.loc 1 35 3 is_stmt 1 view .LVU35
.LVL13:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU36
	andl	$15, %edx	#, tmp141
.LVL14:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU37
	movzbl	-64(%rbp,%rdx), %edx	# digits[_68], digits[_68]
	movb	%dl, -68(%rbp)	# digits[_68], buffer[8]
	.loc 1 36 3 is_stmt 1 view .LVU38
.LVL15:
	.loc 1 33 9 view .LVU39
	movl	%eax, %edx	# argument, argument
	shrl	$12, %edx	#, argument
.LVL16:
	.loc 1 33 9 is_stmt 0 view .LVU40
	je	.L13	#,
	.loc 1 35 3 is_stmt 1 view .LVU41
.LVL17:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU42
	andl	$15, %edx	#, tmp144
.LVL18:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU43
	movzbl	-64(%rbp,%rdx), %edx	# digits[_76], digits[_76]
	movb	%dl, -69(%rbp)	# digits[_76], buffer[7]
	.loc 1 36 3 is_stmt 1 view .LVU44
.LVL19:
	.loc 1 33 9 view .LVU45
	movl	%eax, %edx	# argument, argument
	shrl	$16, %edx	#, argument
.LVL20:
	.loc 1 33 9 is_stmt 0 view .LVU46
	je	.L14	#,
	.loc 1 35 3 is_stmt 1 view .LVU47
.LVL21:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU48
	andl	$15, %edx	#, tmp147
.LVL22:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU49
	movzbl	-64(%rbp,%rdx), %edx	# digits[_84], digits[_84]
	movb	%dl, -70(%rbp)	# digits[_84], buffer[6]
	.loc 1 36 3 is_stmt 1 view .LVU50
.LVL23:
	.loc 1 33 9 view .LVU51
	movl	%eax, %edx	# argument, argument
	shrl	$20, %edx	#, argument
.LVL24:
	.loc 1 33 9 is_stmt 0 view .LVU52
	je	.L15	#,
	.loc 1 35 3 is_stmt 1 view .LVU53
.LVL25:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU54
	andl	$15, %edx	#, tmp150
.LVL26:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU55
	movzbl	-64(%rbp,%rdx), %edx	# digits[_92], digits[_92]
	movb	%dl, -71(%rbp)	# digits[_92], buffer[5]
	.loc 1 36 3 is_stmt 1 view .LVU56
.LVL27:
	.loc 1 33 9 view .LVU57
	movl	%eax, %edx	# argument, argument
	shrl	$24, %edx	#, argument
.LVL28:
	.loc 1 33 9 is_stmt 0 view .LVU58
	je	.L16	#,
	.loc 1 35 3 is_stmt 1 view .LVU59
.LVL29:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU60
	andl	$15, %edx	#, tmp153
.LVL30:
# ft_printf_handle_x.c:33: 	while (argument)
	.loc 1 33 9 view .LVU61
	shrl	$28, %eax	#, argument
.LVL31:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU62
	movzbl	-64(%rbp,%rdx), %edx	# digits[_100], digits[_100]
	movb	%dl, -72(%rbp)	# digits[_100], buffer[4]
	.loc 1 36 3 is_stmt 1 view .LVU63
.LVL32:
	.loc 1 33 9 view .LVU64
	je	.L17	#,
.LVL33:
	.loc 1 35 3 view .LVU65
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU66
	movl	%eax, %eax	# argument, argument
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU67
	movzbl	-64(%rbp,%rax), %eax	# digits[argument_104], digits[argument_104]
.LVL34:
	.loc 1 35 15 view .LVU68
	movb	%al, -73(%rbp)	# digits[argument_104], buffer[3]
	.loc 1 36 3 is_stmt 1 view .LVU69
.LVL35:
	.loc 1 33 9 view .LVU70
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 is_stmt 0 view .LVU71
	movl	$3, %eax	#,
.LVL36:
.L7:
	.loc 1 38 2 is_stmt 1 view .LVU72
# ft_printf_handle_x.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 31 is_stmt 0 view .LVU73
	movl	$11, %r13d	#, tmp157
.LVL37:
# ft_printf_handle_x.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 6 view .LVU74
	leaq	-76(%rbp,%rax), %rsi	#, tmp161
	movl	%r12d, %edi	# fd,
# ft_printf_handle_x.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 31 view .LVU75
	subl	%eax, %r13d	# i, _6
# ft_printf_handle_x.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 6 view .LVU76
	movslq	%r13d, %rdx	# _6, _6
	call	write@PLT	#
.LVL38:
# ft_printf_handle_x.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 5 discriminator 1 view .LVU77
	cmpq	$-1, %rax	#, tmp169
	je	.L8	#,
	.loc 1 40 2 is_stmt 1 view .LVU78
# ft_printf_handle_x.c:40: 	(*written_bytes) += 11 - i;
	.loc 1 40 19 is_stmt 0 view .LVU79
	addl	(%rbx), %r13d	# *written_bytes_27(D), _13
	.loc 1 41 2 is_stmt 1 view .LVU80
.L9:
# ft_printf_handle_x.c:28: 		(*written_bytes)++;
	.loc 1 28 19 is_stmt 0 view .LVU81
	movl	%r13d, (%rbx)	# _13, *written_bytes_27(D)
# ft_printf_handle_x.c:29: 		return (0);
	.loc 1 29 10 view .LVU82
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_x.c:42: }
	.loc 1 42 1 view .LVU83
	movq	-40(%rbp), %rdx	# D.5675, tmp171
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp171
	jne	.L23	#,
	addq	$56, %rsp	#,
	popq	%rbx	#
.LVL39:
	.loc 1 42 1 view .LVU84
	popq	%r12	#
.LVL40:
	.loc 1 42 1 view .LVU85
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL41:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_printf_handle_x.c:23: 	argument = va_arg(*arg, unsigned);
	.loc 1 23 11 view .LVU86
	movq	8(%r13), %rdx	# MEM[(struct  *)arg_21(D)].overflow_arg_area, D.5669
	leaq	8(%rdx), %rax	#, tmp131
	movq	%rax, 8(%r13)	# tmp131, MEM[(struct  *)arg_21(D)].overflow_arg_area
	movl	(%rdx), %eax	# MEM[(unsigned int * {ref-all})addr.2_12], argument
	.loc 1 24 2 is_stmt 1 view .LVU87
# ft_printf_handle_x.c:24: 	if (!argument)
	.loc 1 24 5 is_stmt 0 view .LVU88
	testl	%eax, %eax	# argument
	jne	.L4	#,
.L22:
	.loc 1 26 3 is_stmt 1 view .LVU89
# ft_printf_handle_x.c:26: 		if (write(fd, "0", 1) == -1)
	.loc 1 26 7 is_stmt 0 view .LVU90
	movl	$1, %edx	#,
	leaq	.LC1(%rip), %rsi	#, tmp132
	movl	%r12d, %edi	# fd,
	call	write@PLT	#
.LVL42:
# ft_printf_handle_x.c:26: 		if (write(fd, "0", 1) == -1)
	.loc 1 26 6 discriminator 1 view .LVU91
	cmpq	$-1, %rax	#, tmp168
	je	.L8	#,
	.loc 1 28 3 is_stmt 1 view .LVU92
# ft_printf_handle_x.c:28: 		(*written_bytes)++;
	.loc 1 28 19 is_stmt 0 view .LVU93
	movl	(%rbx), %eax	# *written_bytes_27(D), tmp173
	leal	1(%rax), %r13d	#, _13
.LVL43:
	.loc 1 29 3 is_stmt 1 view .LVU94
# ft_printf_handle_x.c:29: 		return (0);
	.loc 1 29 10 is_stmt 0 view .LVU95
	jmp	.L9	#
.LVL44:
.L13:
# ft_printf_handle_x.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU96
	movl	$8, %eax	#,
	jmp	.L7	#
.LVL45:
	.p2align 4,,10
	.p2align 3
.L11:
	.loc 1 35 15 view .LVU97
	movl	$10, %eax	#,
	jmp	.L7	#
.LVL46:
	.p2align 4,,10
	.p2align 3
.L12:
	.loc 1 35 15 view .LVU98
	movl	$9, %eax	#,
	jmp	.L7	#
.LVL47:
.L14:
	.loc 1 35 15 view .LVU99
	movl	$7, %eax	#,
	jmp	.L7	#
.LVL48:
.L15:
	.loc 1 35 15 view .LVU100
	movl	$6, %eax	#,
	jmp	.L7	#
.LVL49:
.L16:
	.loc 1 35 15 view .LVU101
	movl	$5, %eax	#,
	jmp	.L7	#
.LVL50:
.L17:
	.loc 1 35 15 view .LVU102
	movl	$4, %eax	#,
	jmp	.L7	#
.LVL51:
.L8:
# ft_printf_handle_x.c:27: 			return (-1);
	.loc 1 27 11 view .LVU103
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
.L23:
# ft_printf_handle_x.c:42: }
	.loc 1 42 1 view .LVU104
	call	__stack_chk_fail@PLT	#
.LVL52:
	.cfi_endproc
.LFE51:
	.size	ft_printf_handle_x, .-ft_printf_handle_x
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.file 8 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x2b6
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xc
	.long	.LASF28
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x4
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xe
	.byte	0x8
	.uleb128 0x4
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x5
	.long	0x93
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0xf
	.long	0x93
	.uleb128 0x4
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x5
	.long	0xb7
	.uleb128 0x10
	.uleb128 0x4
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xc4
	.uleb128 0x11
	.long	.LASF29
	.long	0xcd
	.uleb128 0x7
	.long	0xdd
	.long	0xdd
	.uleb128 0x8
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	.LASF30
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x112
	.uleb128 0x6
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x6
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x6
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x6
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x4
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb8
	.uleb128 0x5
	.long	0x9a
	.uleb128 0x13
	.long	.LASF22
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x9f
	.long	0x144
	.uleb128 0x3
	.long	0x48
	.uleb128 0x3
	.long	0xb2
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x14
	.long	.LASF23
	.byte	0x8
	.byte	0x29
	.byte	0x8
	.long	0x35
	.long	0x164
	.uleb128 0x3
	.long	0x8e
	.uleb128 0x3
	.long	0x11e
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x15
	.long	.LASF31
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x286
	.uleb128 0xa
	.string	"arg"
	.byte	0x21
	.long	0x286
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x16
	.long	.LASF24
	.byte	0x1
	.byte	0xf
	.byte	0x2b
	.long	0x28b
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xa
	.string	"fd"
	.byte	0x3e
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xb
	.long	.LASF25
	.byte	0x11
	.long	0x290
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x17
	.long	.LASF27
	.byte	0x1
	.byte	0x12
	.byte	0xf
	.long	0x6b
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xb
	.long	.LASF26
	.byte	0x13
	.long	0x2a0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x18
	.string	"i"
	.byte	0x1
	.byte	0x14
	.byte	0x9
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x9
	.quad	.LVL4
	.long	0x144
	.long	0x22a
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x41
	.byte	0
	.uleb128 0x9
	.quad	.LVL38
	.long	0x123
	.long	0x24e
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x8
	.byte	0x7d
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x9
	.quad	.LVL42
	.long	0x123
	.long	0x278
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x19
	.quad	.LVL52
	.long	0x2b0
	.byte	0
	.uleb128 0x5
	.long	0x112
	.uleb128 0x5
	.long	0x48
	.uleb128 0x7
	.long	0x93
	.long	0x2a0
	.uleb128 0x8
	.long	0x41
	.byte	0x10
	.byte	0
	.uleb128 0x7
	.long	0x93
	.long	0x2b0
	.uleb128 0x8
	.long	0x41
	.byte	0xb
	.byte	0
	.uleb128 0x1a
	.long	.LASF32
	.long	.LASF32
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 9
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 .LVU94
	.uleb128 .LVU94
	.uleb128 .LVU96
	.uleb128 .LVU96
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL51-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU84
	.uleb128 .LVU84
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU85
	.uleb128 .LVU85
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU22
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU43
	.uleb128 .LVU43
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU51
	.uleb128 .LVU51
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU58
	.uleb128 .LVU58
	.uleb128 .LVU61
	.uleb128 .LVU61
	.uleb128 .LVU62
	.uleb128 .LVU65
	.uleb128 .LVU68
	.uleb128 .LVU70
	.uleb128 .LVU72
	.uleb128 .LVU96
	.uleb128 .LVU102
.LLST3:
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x34
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x34
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x38
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x38
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x3c
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x3c
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x40
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x40
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x44
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x44
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x48
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x48
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS4:
	.uleb128 .LVU18
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 .LVU60
	.uleb128 .LVU60
	.uleb128 .LVU66
	.uleb128 .LVU66
	.uleb128 .LVU72
	.uleb128 .LVU96
	.uleb128 .LVU97
	.uleb128 .LVU97
	.uleb128 .LVU98
	.uleb128 .LVU98
	.uleb128 .LVU99
	.uleb128 .LVU99
	.uleb128 .LVU100
	.uleb128 .LVU100
	.uleb128 .LVU101
	.uleb128 .LVU101
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU103
.LLST4:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x2
	.byte	0x3b
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x2
	.byte	0x3a
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x2
	.byte	0x39
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x2
	.byte	0x38
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x2
	.byte	0x37
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x2
	.byte	0x38
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x2
	.byte	0x3a
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x2
	.byte	0x39
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL47-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x2
	.byte	0x37
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF18:
	.string	"fp_offset"
.LASF23:
	.string	"ft_strlcpy"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF27:
	.string	"argument"
.LASF7:
	.string	"short unsigned int"
.LASF22:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF32:
	.string	"__stack_chk_fail"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF5:
	.string	"long double"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF25:
	.string	"digits"
.LASF30:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF26:
	.string	"buffer"
.LASF29:
	.string	"__builtin_va_list"
.LASF2:
	.string	"long int"
.LASF31:
	.string	"ft_printf_handle_x"
.LASF9:
	.string	"signed char"
.LASF24:
	.string	"written_bytes"
.LASF28:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_printf_handle_x.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/374            0           0     0     644     32684     `
	.file	"ft_printf_handle_xx.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_printf_handle_xx.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"0123456789ABCDEF"
.LC1:
	.string	"0"
	.text
	.p2align 4
	.globl	ft_printf_handle_xx
	.type	ft_printf_handle_xx, @function
ft_printf_handle_xx:
.LVL0:
.LFB51:
	.file 1 "ft_printf_handle_xx.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_printf_handle_xx.c:16: {
	.loc 1 16 1 view .LVU2
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp170
	movq	%rax, -40(%rbp)	# tmp170, D.5675
	xorl	%eax, %eax	# tmp170
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 20 2 view .LVU6
	.loc 1 22 2 view .LVU7
# ft_printf_handle_xx.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU8
	movq	%rdi, %r13	# tmp165, arg
	movq	%rsi, %rbx	# tmp166, written_bytes
	movl	%edx, %r12d	# tmp167, fd
# ft_printf_handle_xx.c:22: 	ft_strlcpy(digits, "0123456789ABCDEF", 17);
	.loc 1 22 2 view .LVU9
	leaq	-64(%rbp), %rdi	#, tmp126
.LVL1:
	.loc 1 22 2 view .LVU10
	movl	$17, %edx	#,
.LVL2:
	.loc 1 22 2 view .LVU11
	leaq	.LC0(%rip), %rsi	#, tmp127
.LVL3:
	.loc 1 22 2 view .LVU12
	call	ft_strlcpy@PLT	#
.LVL4:
	.loc 1 23 2 is_stmt 1 view .LVU13
# ft_printf_handle_xx.c:23: 	argument = va_arg(*arg, unsigned);
	.loc 1 23 11 is_stmt 0 view .LVU14
	movl	0(%r13), %eax	# MEM[(struct  *)arg_21(D)].gp_offset, D.5664
	cmpl	$47, %eax	#, D.5664
	ja	.L2	#,
	movl	%eax, %edx	# D.5664, D.5667
	addl	$8, %eax	#, tmp130
	movl	%eax, 0(%r13)	# tmp130, MEM[(struct  *)arg_21(D)].gp_offset
	addq	16(%r13), %rdx	# MEM[(struct  *)arg_21(D)].reg_save_area, D.5669
	movl	(%rdx), %eax	# MEM[(unsigned int * {ref-all})addr.2_12], argument
	.loc 1 24 2 is_stmt 1 view .LVU15
# ft_printf_handle_xx.c:24: 	if (!argument)
	.loc 1 24 5 is_stmt 0 view .LVU16
	testl	%eax, %eax	# argument
	je	.L22	#,
.L4:
	.loc 1 31 2 is_stmt 1 view .LVU17
.LVL5:
	.loc 1 32 2 view .LVU18
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU19
	movl	%eax, %edx	# argument, tmp135
# ft_printf_handle_xx.c:32: 	buffer[11] = '\0';
	.loc 1 32 13 view .LVU20
	movb	$0, -65(%rbp)	#, buffer[11]
	.loc 1 33 2 is_stmt 1 view .LVU21
.LVL6:
	.loc 1 33 9 view .LVU22
	.loc 1 35 3 view .LVU23
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU24
	andl	$15, %edx	#, tmp135
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU25
	movzbl	-64(%rbp,%rdx), %edx	# digits[_22], digits[_22]
	movb	%dl, -66(%rbp)	# digits[_22], buffer[10]
	.loc 1 36 3 is_stmt 1 view .LVU26
.LVL7:
	.loc 1 33 9 view .LVU27
	movl	%eax, %edx	# argument, argument
	shrl	$4, %edx	#, argument
.LVL8:
	.loc 1 33 9 is_stmt 0 view .LVU28
	je	.L11	#,
	.loc 1 35 3 is_stmt 1 view .LVU29
.LVL9:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU30
	andl	$15, %edx	#, tmp138
.LVL10:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU31
	movzbl	-64(%rbp,%rdx), %edx	# digits[_60], digits[_60]
	movb	%dl, -67(%rbp)	# digits[_60], buffer[9]
	.loc 1 36 3 is_stmt 1 view .LVU32
.LVL11:
	.loc 1 33 9 view .LVU33
	movl	%eax, %edx	# argument, argument
	shrl	$8, %edx	#, argument
.LVL12:
	.loc 1 33 9 is_stmt 0 view .LVU34
	je	.L12	#,
	.loc 1 35 3 is_stmt 1 view .LVU35
.LVL13:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU36
	andl	$15, %edx	#, tmp141
.LVL14:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU37
	movzbl	-64(%rbp,%rdx), %edx	# digits[_68], digits[_68]
	movb	%dl, -68(%rbp)	# digits[_68], buffer[8]
	.loc 1 36 3 is_stmt 1 view .LVU38
.LVL15:
	.loc 1 33 9 view .LVU39
	movl	%eax, %edx	# argument, argument
	shrl	$12, %edx	#, argument
.LVL16:
	.loc 1 33 9 is_stmt 0 view .LVU40
	je	.L13	#,
	.loc 1 35 3 is_stmt 1 view .LVU41
.LVL17:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU42
	andl	$15, %edx	#, tmp144
.LVL18:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU43
	movzbl	-64(%rbp,%rdx), %edx	# digits[_76], digits[_76]
	movb	%dl, -69(%rbp)	# digits[_76], buffer[7]
	.loc 1 36 3 is_stmt 1 view .LVU44
.LVL19:
	.loc 1 33 9 view .LVU45
	movl	%eax, %edx	# argument, argument
	shrl	$16, %edx	#, argument
.LVL20:
	.loc 1 33 9 is_stmt 0 view .LVU46
	je	.L14	#,
	.loc 1 35 3 is_stmt 1 view .LVU47
.LVL21:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU48
	andl	$15, %edx	#, tmp147
.LVL22:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU49
	movzbl	-64(%rbp,%rdx), %edx	# digits[_84], digits[_84]
	movb	%dl, -70(%rbp)	# digits[_84], buffer[6]
	.loc 1 36 3 is_stmt 1 view .LVU50
.LVL23:
	.loc 1 33 9 view .LVU51
	movl	%eax, %edx	# argument, argument
	shrl	$20, %edx	#, argument
.LVL24:
	.loc 1 33 9 is_stmt 0 view .LVU52
	je	.L15	#,
	.loc 1 35 3 is_stmt 1 view .LVU53
.LVL25:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU54
	andl	$15, %edx	#, tmp150
.LVL26:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU55
	movzbl	-64(%rbp,%rdx), %edx	# digits[_92], digits[_92]
	movb	%dl, -71(%rbp)	# digits[_92], buffer[5]
	.loc 1 36 3 is_stmt 1 view .LVU56
.LVL27:
	.loc 1 33 9 view .LVU57
	movl	%eax, %edx	# argument, argument
	shrl	$24, %edx	#, argument
.LVL28:
	.loc 1 33 9 is_stmt 0 view .LVU58
	je	.L16	#,
	.loc 1 35 3 is_stmt 1 view .LVU59
.LVL29:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU60
	andl	$15, %edx	#, tmp153
.LVL30:
# ft_printf_handle_xx.c:33: 	while (argument)
	.loc 1 33 9 view .LVU61
	shrl	$28, %eax	#, argument
.LVL31:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU62
	movzbl	-64(%rbp,%rdx), %edx	# digits[_100], digits[_100]
	movb	%dl, -72(%rbp)	# digits[_100], buffer[4]
	.loc 1 36 3 is_stmt 1 view .LVU63
.LVL32:
	.loc 1 33 9 view .LVU64
	je	.L17	#,
.LVL33:
	.loc 1 35 3 view .LVU65
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 23 is_stmt 0 view .LVU66
	movl	%eax, %eax	# argument, argument
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU67
	movzbl	-64(%rbp,%rax), %eax	# digits[argument_104], digits[argument_104]
.LVL34:
	.loc 1 35 15 view .LVU68
	movb	%al, -73(%rbp)	# digits[argument_104], buffer[3]
	.loc 1 36 3 is_stmt 1 view .LVU69
.LVL35:
	.loc 1 33 9 view .LVU70
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 is_stmt 0 view .LVU71
	movl	$3, %eax	#,
.LVL36:
.L7:
	.loc 1 38 2 is_stmt 1 view .LVU72
# ft_printf_handle_xx.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 31 is_stmt 0 view .LVU73
	movl	$11, %r13d	#, tmp157
.LVL37:
# ft_printf_handle_xx.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 6 view .LVU74
	leaq	-76(%rbp,%rax), %rsi	#, tmp161
	movl	%r12d, %edi	# fd,
# ft_printf_handle_xx.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 31 view .LVU75
	subl	%eax, %r13d	# i, _6
# ft_printf_handle_xx.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 6 view .LVU76
	movslq	%r13d, %rdx	# _6, _6
	call	write@PLT	#
.LVL38:
# ft_printf_handle_xx.c:38: 	if (write(fd, buffer + i, 11 - i) == -1)
	.loc 1 38 5 discriminator 1 view .LVU77
	cmpq	$-1, %rax	#, tmp169
	je	.L8	#,
	.loc 1 40 2 is_stmt 1 view .LVU78
# ft_printf_handle_xx.c:40: 	(*written_bytes) += 11 - i;
	.loc 1 40 19 is_stmt 0 view .LVU79
	addl	(%rbx), %r13d	# *written_bytes_27(D), _13
	.loc 1 41 2 is_stmt 1 view .LVU80
.L9:
# ft_printf_handle_xx.c:28: 		(*written_bytes)++;
	.loc 1 28 19 is_stmt 0 view .LVU81
	movl	%r13d, (%rbx)	# _13, *written_bytes_27(D)
# ft_printf_handle_xx.c:29: 		return (0);
	.loc 1 29 10 view .LVU82
	xorl	%eax, %eax	# <retval>
.L1:
# ft_printf_handle_xx.c:42: }
	.loc 1 42 1 view .LVU83
	movq	-40(%rbp), %rdx	# D.5675, tmp171
	subq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp171
	jne	.L23	#,
	addq	$56, %rsp	#,
	popq	%rbx	#
.LVL39:
	.loc 1 42 1 view .LVU84
	popq	%r12	#
.LVL40:
	.loc 1 42 1 view .LVU85
	popq	%r13	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL41:
	.p2align 4,,10
	.p2align 3
.L2:
	.cfi_restore_state
# ft_printf_handle_xx.c:23: 	argument = va_arg(*arg, unsigned);
	.loc 1 23 11 view .LVU86
	movq	8(%r13), %rdx	# MEM[(struct  *)arg_21(D)].overflow_arg_area, D.5669
	leaq	8(%rdx), %rax	#, tmp131
	movq	%rax, 8(%r13)	# tmp131, MEM[(struct  *)arg_21(D)].overflow_arg_area
	movl	(%rdx), %eax	# MEM[(unsigned int * {ref-all})addr.2_12], argument
	.loc 1 24 2 is_stmt 1 view .LVU87
# ft_printf_handle_xx.c:24: 	if (!argument)
	.loc 1 24 5 is_stmt 0 view .LVU88
	testl	%eax, %eax	# argument
	jne	.L4	#,
.L22:
	.loc 1 26 3 is_stmt 1 view .LVU89
# ft_printf_handle_xx.c:26: 		if (write(fd, "0", 1) == -1)
	.loc 1 26 7 is_stmt 0 view .LVU90
	movl	$1, %edx	#,
	leaq	.LC1(%rip), %rsi	#, tmp132
	movl	%r12d, %edi	# fd,
	call	write@PLT	#
.LVL42:
# ft_printf_handle_xx.c:26: 		if (write(fd, "0", 1) == -1)
	.loc 1 26 6 discriminator 1 view .LVU91
	cmpq	$-1, %rax	#, tmp168
	je	.L8	#,
	.loc 1 28 3 is_stmt 1 view .LVU92
# ft_printf_handle_xx.c:28: 		(*written_bytes)++;
	.loc 1 28 19 is_stmt 0 view .LVU93
	movl	(%rbx), %eax	# *written_bytes_27(D), tmp173
	leal	1(%rax), %r13d	#, _13
.LVL43:
	.loc 1 29 3 is_stmt 1 view .LVU94
# ft_printf_handle_xx.c:29: 		return (0);
	.loc 1 29 10 is_stmt 0 view .LVU95
	jmp	.L9	#
.LVL44:
.L13:
# ft_printf_handle_xx.c:35: 		buffer[--i] = digits[argument % 16];
	.loc 1 35 15 view .LVU96
	movl	$8, %eax	#,
	jmp	.L7	#
.LVL45:
	.p2align 4,,10
	.p2align 3
.L11:
	.loc 1 35 15 view .LVU97
	movl	$10, %eax	#,
	jmp	.L7	#
.LVL46:
	.p2align 4,,10
	.p2align 3
.L12:
	.loc 1 35 15 view .LVU98
	movl	$9, %eax	#,
	jmp	.L7	#
.LVL47:
.L14:
	.loc 1 35 15 view .LVU99
	movl	$7, %eax	#,
	jmp	.L7	#
.LVL48:
.L15:
	.loc 1 35 15 view .LVU100
	movl	$6, %eax	#,
	jmp	.L7	#
.LVL49:
.L16:
	.loc 1 35 15 view .LVU101
	movl	$5, %eax	#,
	jmp	.L7	#
.LVL50:
.L17:
	.loc 1 35 15 view .LVU102
	movl	$4, %eax	#,
	jmp	.L7	#
.LVL51:
.L8:
# ft_printf_handle_xx.c:27: 			return (-1);
	.loc 1 27 11 view .LVU103
	movl	$-1, %eax	#, <retval>
	jmp	.L1	#
.L23:
# ft_printf_handle_xx.c:42: }
	.loc 1 42 1 view .LVU104
	call	__stack_chk_fail@PLT	#
.LVL52:
	.cfi_endproc
.LFE51:
	.size	ft_printf_handle_xx, .-ft_printf_handle_xx
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 5 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h"
	.file 6 "<built-in>"
	.file 7 "/usr/include/unistd.h"
	.file 8 "../includes/libft.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x2b6
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xc
	.long	.LASF28
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x4
	.long	.LASF11
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xd
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xe
	.byte	0x8
	.uleb128 0x4
	.long	.LASF12
	.byte	0x3
	.byte	0xc2
	.byte	0x1b
	.long	0x2e
	.uleb128 0x5
	.long	0x93
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0xf
	.long	0x93
	.uleb128 0x4
	.long	.LASF14
	.byte	0x4
	.byte	0x6c
	.byte	0x13
	.long	0x82
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x5
	.long	0xb7
	.uleb128 0x10
	.uleb128 0x4
	.long	.LASF16
	.byte	0x5
	.byte	0x28
	.byte	0x1b
	.long	0xc4
	.uleb128 0x11
	.long	.LASF29
	.long	0xcd
	.uleb128 0x7
	.long	0xdd
	.long	0xdd
	.uleb128 0x8
	.long	0x41
	.byte	0
	.byte	0
	.uleb128 0x12
	.long	.LASF30
	.byte	0x18
	.byte	0x6
	.byte	0
	.long	0x112
	.uleb128 0x6
	.long	.LASF17
	.long	0x6b
	.byte	0
	.uleb128 0x6
	.long	.LASF18
	.long	0x6b
	.byte	0x4
	.uleb128 0x6
	.long	.LASF19
	.long	0x80
	.byte	0x8
	.uleb128 0x6
	.long	.LASF20
	.long	0x80
	.byte	0x10
	.byte	0
	.uleb128 0x4
	.long	.LASF21
	.byte	0x5
	.byte	0x67
	.byte	0x18
	.long	0xb8
	.uleb128 0x5
	.long	0x9a
	.uleb128 0x13
	.long	.LASF22
	.byte	0x7
	.value	0x17a
	.byte	0x10
	.long	0x9f
	.long	0x144
	.uleb128 0x3
	.long	0x48
	.uleb128 0x3
	.long	0xb2
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x14
	.long	.LASF23
	.byte	0x8
	.byte	0x29
	.byte	0x8
	.long	0x35
	.long	0x164
	.uleb128 0x3
	.long	0x8e
	.uleb128 0x3
	.long	0x11e
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x15
	.long	.LASF31
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x48
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x286
	.uleb128 0xa
	.string	"arg"
	.byte	0x22
	.long	0x286
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x16
	.long	.LASF24
	.byte	0x1
	.byte	0xf
	.byte	0x2c
	.long	0x28b
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xa
	.string	"fd"
	.byte	0x3f
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0xb
	.long	.LASF25
	.byte	0x11
	.long	0x290
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x17
	.long	.LASF27
	.byte	0x1
	.byte	0x12
	.byte	0xf
	.long	0x6b
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xb
	.long	.LASF26
	.byte	0x13
	.long	0x2a0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x18
	.string	"i"
	.byte	0x1
	.byte	0x14
	.byte	0x9
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x9
	.quad	.LVL4
	.long	0x144
	.long	0x22a
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x41
	.byte	0
	.uleb128 0x9
	.quad	.LVL38
	.long	0x123
	.long	0x24e
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x8
	.byte	0x7d
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x9
	.quad	.LVL42
	.long	0x123
	.long	0x278
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC1
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x19
	.quad	.LVL52
	.long	0x2b0
	.byte	0
	.uleb128 0x5
	.long	0x112
	.uleb128 0x5
	.long	0x48
	.uleb128 0x7
	.long	0x93
	.long	0x2a0
	.uleb128 0x8
	.long	0x41
	.byte	0x10
	.byte	0
	.uleb128 0x7
	.long	0x93
	.long	0x2b0
	.uleb128 0x8
	.long	0x41
	.byte	0xb
	.byte	0
	.uleb128 0x1a
	.long	.LASF32
	.long	.LASF32
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 6
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 9
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 .LVU94
	.uleb128 .LVU94
	.uleb128 .LVU96
	.uleb128 .LVU96
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL37-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL37-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL51-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU84
	.uleb128 .LVU84
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL39-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU85
	.uleb128 .LVU85
	.uleb128 .LVU86
	.uleb128 .LVU86
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL40-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL41-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS3:
	.uleb128 .LVU22
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU33
	.uleb128 .LVU33
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU43
	.uleb128 .LVU43
	.uleb128 .LVU45
	.uleb128 .LVU45
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU49
	.uleb128 .LVU49
	.uleb128 .LVU51
	.uleb128 .LVU51
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU55
	.uleb128 .LVU55
	.uleb128 .LVU57
	.uleb128 .LVU57
	.uleb128 .LVU58
	.uleb128 .LVU58
	.uleb128 .LVU61
	.uleb128 .LVU61
	.uleb128 .LVU62
	.uleb128 .LVU65
	.uleb128 .LVU68
	.uleb128 .LVU70
	.uleb128 .LVU72
	.uleb128 .LVU96
	.uleb128 .LVU102
.LLST3:
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x34
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x34
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x38
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x38
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x3c
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x3c
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x40
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x40
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x44
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x44
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL28-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x48
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL28-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL31-.Ltext0
	.uleb128 0x5
	.byte	0x70
	.sleb128 0
	.byte	0x48
	.byte	0x25
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL35-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.LVUS4:
	.uleb128 .LVU18
	.uleb128 .LVU24
	.uleb128 .LVU24
	.uleb128 .LVU30
	.uleb128 .LVU30
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU48
	.uleb128 .LVU48
	.uleb128 .LVU54
	.uleb128 .LVU54
	.uleb128 .LVU60
	.uleb128 .LVU60
	.uleb128 .LVU66
	.uleb128 .LVU66
	.uleb128 .LVU72
	.uleb128 .LVU96
	.uleb128 .LVU97
	.uleb128 .LVU97
	.uleb128 .LVU98
	.uleb128 .LVU98
	.uleb128 .LVU99
	.uleb128 .LVU99
	.uleb128 .LVU100
	.uleb128 .LVU100
	.uleb128 .LVU101
	.uleb128 .LVU101
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU103
.LLST4:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x2
	.byte	0x3b
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x2
	.byte	0x3a
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x2
	.byte	0x39
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x2
	.byte	0x38
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x2
	.byte	0x37
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL25-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL36-.Ltext0
	.uleb128 0x2
	.byte	0x33
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x2
	.byte	0x38
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x2
	.byte	0x3a
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LVL47-.Ltext0
	.uleb128 0x2
	.byte	0x39
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL47-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x2
	.byte	0x37
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL49-.Ltext0
	.uleb128 0x2
	.byte	0x36
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL49-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x2
	.byte	0x35
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LVL51-.Ltext0
	.uleb128 0x2
	.byte	0x34
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF11:
	.string	"size_t"
.LASF18:
	.string	"fp_offset"
.LASF23:
	.string	"ft_strlcpy"
.LASF14:
	.string	"ssize_t"
.LASF16:
	.string	"__gnuc_va_list"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF27:
	.string	"argument"
.LASF7:
	.string	"short unsigned int"
.LASF22:
	.string	"write"
.LASF21:
	.string	"va_list"
.LASF32:
	.string	"__stack_chk_fail"
.LASF17:
	.string	"gp_offset"
.LASF8:
	.string	"unsigned int"
.LASF20:
	.string	"reg_save_area"
.LASF15:
	.string	"long long unsigned int"
.LASF19:
	.string	"overflow_arg_area"
.LASF12:
	.string	"__ssize_t"
.LASF4:
	.string	"long long int"
.LASF13:
	.string	"char"
.LASF31:
	.string	"ft_printf_handle_xx"
.LASF25:
	.string	"digits"
.LASF30:
	.string	"__va_list_tag"
.LASF10:
	.string	"short int"
.LASF26:
	.string	"buffer"
.LASF29:
	.string	"__builtin_va_list"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF24:
	.string	"written_bytes"
.LASF28:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_printf_handle_xx.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_powint.o/    0           0     0     644     26933     `
	.file	"ft_powint.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_powint.c"
	.p2align 4
	.globl	ft_powint
	.type	ft_powint, @function
ft_powint:
.LVL0:
.LFB51:
	.file 1 "ft_powint.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	andq	$-32, %rsp	#,
1:	call	*mcount@GOTPCREL(%rip)
# ft_powint.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
.LVL1:
	.loc 1 21 2 view .LVU6
	.loc 1 22 2 view .LVU7
# ft_powint.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU8
	movl	%edi, %ecx	# tmp208, base
# ft_powint.c:22: 	if (expo >= 0)
	.loc 1 22 5 view .LVU9
	testl	%esi, %esi	# expo
	js	.L32	#,
	.loc 1 24 12 is_stmt 1 view .LVU10
	je	.L13	#,
	leal	-1(%rsi), %eax	#, tmp149
	cmpl	$12, %eax	#, tmp149
	jbe	.L14	#,
	movl	$1, %eax	#, tmp145
	movl	%esi, %edi	# expo, bnd.6
.LVL2:
	.loc 1 24 12 is_stmt 0 view .LVU11
	vmovd	%ecx, %xmm1	# base, vect_cst__35
	xorl	%edx, %edx	# ivtmp.22
	vmovd	%eax, %xmm0	# tmp145, vect_result_16.10
	shrl	$3, %edi	#, bnd.6
	vpbroadcastd	%xmm1, %ymm1	# vect_cst__35, vect_cst__35
	vpbroadcastd	%xmm0, %ymm0	# vect_result_16.10, vect_result_16.10
	testb	$8, %sil	#, expo
	je	.L7	#,
.LVL3:
	.loc 1 26 4 is_stmt 1 view .LVU12
	movl	$1, %edx	#, ivtmp.22
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU13
	vmovdqa	%ymm1, %ymm0	# vect_cst__35, vect_result_16.10
.LVL4:
	.loc 1 27 4 is_stmt 1 view .LVU14
	.loc 1 24 12 view .LVU15
	cmpl	%edi, %edx	# bnd.6, ivtmp.22
	je	.L28	#,
.LVL5:
	.p2align 4,,10
	.p2align 3
.L7:
	.loc 1 26 4 view .LVU16
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU17
	vpmulld	%ymm1, %ymm0, %ymm0	# vect_cst__35, vect_result_16.10, vect_result_16.10
.LVL6:
	.loc 1 27 4 is_stmt 1 view .LVU18
	.loc 1 24 12 view .LVU19
	.loc 1 26 4 view .LVU20
	addl	$2, %edx	#, ivtmp.22
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU21
	vpmulld	%ymm1, %ymm0, %ymm0	# vect_cst__35, vect_result_16.10, vect_result_16.10
.LVL7:
	.loc 1 27 4 is_stmt 1 view .LVU22
	.loc 1 24 12 view .LVU23
	cmpl	%edi, %edx	# bnd.6, ivtmp.22
	jne	.L7	#,
.L28:
	vmovdqa	%xmm0, %xmm1	# vect_result_16.10, tmp151
	vextracti128	$0x1, %ymm0, %xmm0	# vect_result_16.10, tmp152
	movl	%esi, %edx	# expo, i
	vpmulld	%xmm0, %xmm1, %xmm0	# tmp152, tmp151, _40
	andl	$-8, %edx	#, i
	vpsrldq	$8, %xmm0, %xmm1	#, _40, tmp154
	vpmulld	%xmm1, %xmm0, %xmm0	# tmp154, _40, _42
	vpsrldq	$4, %xmm0, %xmm1	#, _42, tmp156
	vpmulld	%xmm1, %xmm0, %xmm0	# tmp156, _42, tmp157
	vmovd	%xmm0, %eax	# tmp157, <retval>
	testb	$7, %sil	#, expo
	je	.L33	#,
	vzeroupper
.LVL8:
.L6:
	.loc 1 26 4 view .LVU24
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU25
	imull	%ecx, %eax	# base, <retval>
.LVL9:
	.loc 1 27 4 is_stmt 1 view .LVU26
	.loc 1 24 12 view .LVU27
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU28
	leal	1(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU29
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU30
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU31
	imull	%ecx, %eax	# base, <retval>
.LVL10:
	.loc 1 27 4 is_stmt 1 view .LVU32
	.loc 1 24 12 view .LVU33
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU34
	leal	2(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU35
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU36
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU37
	imull	%ecx, %eax	# base, <retval>
.LVL11:
	.loc 1 27 4 is_stmt 1 view .LVU38
	.loc 1 24 12 view .LVU39
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU40
	leal	3(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU41
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU42
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU43
	imull	%ecx, %eax	# base, <retval>
.LVL12:
	.loc 1 27 4 is_stmt 1 view .LVU44
	.loc 1 24 12 view .LVU45
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU46
	leal	4(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU47
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU48
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU49
	imull	%ecx, %eax	# base, <retval>
.LVL13:
	.loc 1 27 4 is_stmt 1 view .LVU50
	.loc 1 24 12 view .LVU51
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU52
	leal	5(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU53
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU54
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU55
	imull	%ecx, %eax	# base, <retval>
.LVL14:
	.loc 1 27 4 is_stmt 1 view .LVU56
	.loc 1 24 12 view .LVU57
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU58
	leal	6(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU59
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU60
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU61
	imull	%ecx, %eax	# base, <retval>
.LVL15:
	.loc 1 27 4 is_stmt 1 view .LVU62
	.loc 1 24 12 view .LVU63
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU64
	leal	7(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU65
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU66
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU67
	imull	%ecx, %eax	# base, <retval>
.LVL16:
	.loc 1 27 4 is_stmt 1 view .LVU68
	.loc 1 24 12 view .LVU69
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU70
	leal	8(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU71
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU72
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU73
	imull	%ecx, %eax	# base, <retval>
.LVL17:
	.loc 1 27 4 is_stmt 1 view .LVU74
	.loc 1 24 12 view .LVU75
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU76
	leal	9(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU77
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU78
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU79
	imull	%ecx, %eax	# base, <retval>
.LVL18:
	.loc 1 27 4 is_stmt 1 view .LVU80
	.loc 1 24 12 view .LVU81
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU82
	leal	10(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU83
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU84
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU85
	imull	%ecx, %eax	# base, <retval>
.LVL19:
	.loc 1 27 4 is_stmt 1 view .LVU86
	.loc 1 24 12 view .LVU87
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU88
	leal	11(%rdx), %edi	#, i
# ft_powint.c:24: 		while (i < expo)
	.loc 1 24 12 view .LVU89
	cmpl	%edi, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 is_stmt 1 view .LVU90
# ft_powint.c:27: 			i++;
	.loc 1 27 5 is_stmt 0 view .LVU91
	addl	$12, %edx	#, i
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 view .LVU92
	imull	%ecx, %eax	# base, <retval>
.LVL20:
	.loc 1 27 4 is_stmt 1 view .LVU93
	.loc 1 24 12 view .LVU94
	cmpl	%edx, %esi	# i, expo
	jle	.L1	#,
	.loc 1 26 4 view .LVU95
# ft_powint.c:26: 			result *= base;
	.loc 1 26 11 is_stmt 0 view .LVU96
	imull	%ecx, %eax	# base, <retval>
.LVL21:
	.loc 1 27 4 is_stmt 1 view .LVU97
	.loc 1 24 12 view .LVU98
.L1:
# ft_powint.c:40: }
	.loc 1 40 1 is_stmt 0 view .LVU99
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL22:
	.p2align 4,,10
	.p2align 3
.L32:
	.cfi_restore_state
	.loc 1 32 12 is_stmt 1 view .LVU100
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 14 is_stmt 0 view .LVU101
	movl	%esi, %edi	# expo, _6
	negl	%edi	# _6
	cmpl	$-14, %esi	#, expo
	ja	.L12	#,
	movl	$1, %eax	#, tmp147
	movl	%edi, %esi	# _6, bnd.13
.LVL23:
	.loc 1 32 14 view .LVU102
	vmovd	%ecx, %xmm1	# base, vect_cst__63
	xorl	%edx, %edx	# ivtmp.26
	vmovd	%eax, %xmm0	# tmp147, vect_result_14.17
	shrl	$3, %esi	#, bnd.13
.LVL24:
	.loc 1 32 14 view .LVU103
	vpbroadcastd	%xmm1, %ymm1	# vect_cst__63, vect_cst__63
	vpbroadcastd	%xmm0, %ymm0	# vect_result_14.17, vect_result_14.17
	testb	$8, %dil	#, _6
	je	.L4	#,
.LVL25:
	.loc 1 34 4 is_stmt 1 view .LVU104
	movl	$1, %edx	#, ivtmp.26
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU105
	vmovdqa	%ymm1, %ymm0	# vect_cst__63, vect_result_14.17
.LVL26:
	.loc 1 35 4 is_stmt 1 view .LVU106
	.loc 1 32 12 view .LVU107
	cmpl	%esi, %edx	# bnd.13, ivtmp.26
	je	.L27	#,
.LVL27:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 34 4 view .LVU108
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU109
	vpmulld	%ymm1, %ymm0, %ymm0	# vect_cst__63, vect_result_14.17, vect_result_14.17
.LVL28:
	.loc 1 35 4 is_stmt 1 view .LVU110
	.loc 1 32 12 view .LVU111
	.loc 1 34 4 view .LVU112
	addl	$2, %edx	#, ivtmp.26
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU113
	vpmulld	%ymm1, %ymm0, %ymm0	# vect_cst__63, vect_result_14.17, vect_result_14.17
.LVL29:
	.loc 1 35 4 is_stmt 1 view .LVU114
	.loc 1 32 12 view .LVU115
	cmpl	%esi, %edx	# bnd.13, ivtmp.26
	jne	.L4	#,
.L27:
	vmovdqa	%xmm0, %xmm1	# vect_result_14.17, tmp170
	vextracti128	$0x1, %ymm0, %xmm0	# vect_result_14.17, tmp171
	movl	%edi, %eax	# _6, i
	vpmulld	%xmm0, %xmm1, %xmm0	# tmp171, tmp170, _68
	andl	$-8, %eax	#, i
	vpsrldq	$8, %xmm0, %xmm1	#, _68, tmp173
	vpmulld	%xmm1, %xmm0, %xmm0	# tmp173, _68, _70
	vpsrldq	$4, %xmm0, %xmm1	#, _70, tmp175
	vpmulld	%xmm1, %xmm0, %xmm0	# tmp175, _70, tmp176
	vmovd	%xmm0, %edx	# tmp176, stmp_result_14.18
	testb	$7, %dil	#, _6
	je	.L34	#,
	vzeroupper
.LVL30:
.L3:
	.loc 1 34 4 view .LVU116
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU117
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL31:
	.loc 1 35 4 is_stmt 1 view .LVU118
	.loc 1 32 12 view .LVU119
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU120
	leal	1(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU121
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU122
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU123
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL32:
	.loc 1 35 4 is_stmt 1 view .LVU124
	.loc 1 32 12 view .LVU125
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU126
	leal	2(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU127
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU128
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU129
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL33:
	.loc 1 35 4 is_stmt 1 view .LVU130
	.loc 1 32 12 view .LVU131
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU132
	leal	3(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU133
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU134
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU135
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL34:
	.loc 1 35 4 is_stmt 1 view .LVU136
	.loc 1 32 12 view .LVU137
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU138
	leal	4(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU139
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU140
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU141
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL35:
	.loc 1 35 4 is_stmt 1 view .LVU142
	.loc 1 32 12 view .LVU143
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU144
	leal	5(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU145
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU146
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU147
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL36:
	.loc 1 35 4 is_stmt 1 view .LVU148
	.loc 1 32 12 view .LVU149
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU150
	leal	6(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU151
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU152
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU153
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL37:
	.loc 1 35 4 is_stmt 1 view .LVU154
	.loc 1 32 12 view .LVU155
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU156
	leal	7(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU157
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU158
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU159
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL38:
	.loc 1 35 4 is_stmt 1 view .LVU160
	.loc 1 32 12 view .LVU161
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU162
	leal	8(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU163
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU164
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU165
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL39:
	.loc 1 35 4 is_stmt 1 view .LVU166
	.loc 1 32 12 view .LVU167
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU168
	leal	9(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU169
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU170
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU171
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL40:
	.loc 1 35 4 is_stmt 1 view .LVU172
	.loc 1 32 12 view .LVU173
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU174
	leal	10(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU175
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU176
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU177
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL41:
	.loc 1 35 4 is_stmt 1 view .LVU178
	.loc 1 32 12 view .LVU179
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU180
	leal	11(%rax), %esi	#, i
# ft_powint.c:32: 		while (i < -expo)
	.loc 1 32 12 view .LVU181
	cmpl	%esi, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 is_stmt 1 view .LVU182
# ft_powint.c:35: 			i++;
	.loc 1 35 5 is_stmt 0 view .LVU183
	addl	$12, %eax	#, i
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 view .LVU184
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL42:
	.loc 1 35 4 is_stmt 1 view .LVU185
	.loc 1 32 12 view .LVU186
	cmpl	%eax, %edi	# i, _6
	jle	.L10	#,
	.loc 1 34 4 view .LVU187
# ft_powint.c:34: 			result *= base;
	.loc 1 34 11 is_stmt 0 view .LVU188
	imull	%ecx, %edx	# base, stmp_result_14.18
.LVL43:
	.loc 1 35 4 is_stmt 1 view .LVU189
	.loc 1 32 12 view .LVU190
.L10:
	.loc 1 37 3 view .LVU191
# ft_powint.c:40: }
	.loc 1 40 1 is_stmt 0 view .LVU192
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_powint.c:37: 		result = 1 / result;
	.loc 1 37 10 view .LVU193
	leal	1(%rdx), %eax	#, tmp189
	cmpl	$2, %eax	#, tmp189
	movl	$0, %eax	#, tmp192
	cmovbe	%edx, %eax	# stmp_result_14.18,, <retval>
.LVL44:
# ft_powint.c:40: }
	.loc 1 40 1 view .LVU194
	ret	
.LVL45:
.L14:
	.cfi_restore_state
# ft_powint.c:20: 	i = 0;
	.loc 1 20 4 view .LVU195
	xorl	%edx, %edx	# i
# ft_powint.c:21: 	result = 1;
	.loc 1 21 9 view .LVU196
	movl	$1, %eax	#, <retval>
	jmp	.L6	#
	.p2align 4,,10
	.p2align 3
.L13:
# ft_powint.c:40: }
	.loc 1 40 1 view .LVU197
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_powint.c:21: 	result = 1;
	.loc 1 21 9 view .LVU198
	movl	$1, %eax	#, <retval>
	.loc 1 39 2 is_stmt 1 view .LVU199
# ft_powint.c:40: }
	.loc 1 40 1 is_stmt 0 view .LVU200
	ret	
.LVL46:
	.p2align 4,,10
	.p2align 3
.L33:
	.cfi_restore_state
	.loc 1 40 1 view .LVU201
	vzeroupper
.LVL47:
	leave	
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL48:
.L34:
	.cfi_restore_state
	.loc 1 40 1 view .LVU202
	vzeroupper
.LVL49:
	jmp	.L10	#
.LVL50:
.L12:
# ft_powint.c:20: 	i = 0;
	.loc 1 20 4 view .LVU203
	xorl	%eax, %eax	# i
# ft_powint.c:21: 	result = 1;
	.loc 1 21 9 view .LVU204
	movl	$1, %edx	#, stmp_result_14.18
	jmp	.L3	#
	.cfi_endproc
.LFE51:
	.size	ft_powint, .-ft_powint
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x114
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x4
	.long	.LASF16
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x5
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x6
	.long	.LASF17
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0x3c
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.long	.LASF13
	.byte	0x13
	.long	0x3c
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x3
	.long	.LASF14
	.byte	0x1d
	.long	0x3c
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x7
	.long	.LASF15
	.byte	0x1
	.byte	0x11
	.byte	0x6
	.long	0x3c
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x8
	.string	"i"
	.byte	0x1
	.byte	0x12
	.byte	0x6
	.long	0x3c
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x2
	.quad	.LVL8
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL30
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL47
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x2
	.quad	.LVL49
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x83
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU102
	.uleb128 .LVU102
	.uleb128 .LVU103
	.uleb128 .LVU103
	.uleb128 .LVU195
	.uleb128 .LVU195
	.uleb128 .LVU202
	.uleb128 .LVU202
	.uleb128 .LVU203
	.uleb128 .LVU203
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x4
	.byte	0x74
	.sleb128 0
	.byte	0x1f
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x4
	.byte	0x75
	.sleb128 0
	.byte	0x1f
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL48-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL48-.Ltext0
	.uleb128 .LVL50-.Ltext0
	.uleb128 0x4
	.byte	0x75
	.sleb128 0
	.byte	0x1f
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS2:
	.uleb128 .LVU7
	.uleb128 .LVU12
	.uleb128 .LVU24
	.uleb128 .LVU100
	.uleb128 .LVU100
	.uleb128 .LVU104
	.uleb128 .LVU116
	.uleb128 .LVU191
	.uleb128 .LVU194
	.uleb128 .LVU195
	.uleb128 .LVU195
	.uleb128 .LVU201
	.uleb128 .LVU203
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL44-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 .LVU6
	.uleb128 .LVU12
	.uleb128 .LVU100
	.uleb128 .LVU104
	.uleb128 .LVU195
	.uleb128 .LVU201
	.uleb128 .LVU203
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL45-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL50-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF17:
	.string	"ft_powint"
.LASF8:
	.string	"unsigned int"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF16:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF13:
	.string	"base"
.LASF14:
	.string	"expo"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF15:
	.string	"result"
.LASF2:
	.string	"long int"
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_powint.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/397            0           0     0     644     26550     `
	.file	"ft_realloc_copy_until_zeroed.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_realloc_copy_until_zeroed.c"
	.p2align 4
	.globl	is_buffer_all_zeros
	.type	is_buffer_all_zeros, @function
is_buffer_all_zeros:
.LVL0:
.LFB51:
	.file 1 "ft_realloc_copy_until_zeroed.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_realloc_copy_until_zeroed.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 20 2 view .LVU5
.LVL1:
	.loc 1 21 2 view .LVU6
	.loc 1 22 2 view .LVU7
	.loc 1 22 11 view .LVU8
	testq	%rsi, %rsi	# size
	je	.L4	#,
	addq	%rdi, %rsi	# ivtmp.8, _14
.LVL2:
	.loc 1 22 11 is_stmt 0 view .LVU9
	jmp	.L3	#
.LVL3:
	.p2align 4,,10
	.p2align 3
.L8:
	.loc 1 28 3 is_stmt 1 view .LVU10
	.loc 1 22 11 view .LVU11
	incq	%rdi	# ivtmp.8
.LVL4:
	.loc 1 22 11 is_stmt 0 view .LVU12
	cmpq	%rsi, %rdi	# _14, ivtmp.8
	je	.L4	#,
.LVL5:
.L3:
	.loc 1 24 3 is_stmt 1 view .LVU13
# ft_realloc_copy_until_zeroed.c:24: 		if (ptr[i] != 0)
	.loc 1 24 6 is_stmt 0 view .LVU14
	cmpb	$0, (%rdi)	#, MEM[(int8_t *)_12]
	je	.L8	#,
# ft_realloc_copy_until_zeroed.c:26: 			return (false);
	.loc 1 26 11 view .LVU15
	xorl	%eax, %eax	# <retval>
# ft_realloc_copy_until_zeroed.c:31: }
	.loc 1 31 1 view .LVU16
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL6:
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
# ft_realloc_copy_until_zeroed.c:30: 	return (true);
	.loc 1 30 9 view .LVU17
	movl	$1, %eax	#, <retval>
# ft_realloc_copy_until_zeroed.c:31: }
	.loc 1 31 1 view .LVU18
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	is_buffer_all_zeros, .-is_buffer_all_zeros
	.p2align 4
	.globl	ft_realloc_copy_until_zeroed
	.type	ft_realloc_copy_until_zeroed, @function
ft_realloc_copy_until_zeroed:
.LVL7:
.LFB52:
	.loc 1 45 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 45 1 is_stmt 0 view .LVU20
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_realloc_copy_until_zeroed.c:45: {
	.loc 1 45 1 view .LVU21
	.loc 1 46 2 is_stmt 1 view .LVU22
	.loc 1 47 2 view .LVU23
	.loc 1 48 2 view .LVU24
	.loc 1 49 2 view .LVU25
	.loc 1 51 2 view .LVU26
# ft_realloc_copy_until_zeroed.c:45: {
	.loc 1 45 1 is_stmt 0 view .LVU27
	movq	%rsi, -64(%rbp)	# new_cnt, %sfp
	movq	%rdi, %r12	# tmp100, ptr
	movq	%rdx, %r13	# tmp102, size
# ft_realloc_copy_until_zeroed.c:51: 	if (!new_cnt)
	.loc 1 51 5 view .LVU28
	testq	%rsi, %rsi	# new_cnt
	je	.L12	#,
	movq	%rsi, %rdi	# new_cnt,
.LVL8:
	.loc 1 53 2 is_stmt 1 view .LVU29
# ft_realloc_copy_until_zeroed.c:53: 	new = ft_calloc(new_cnt, size);
	.loc 1 53 8 is_stmt 0 view .LVU30
	movq	%rdx, %rsi	# size,
.LVL9:
	.loc 1 53 8 view .LVU31
	call	ft_calloc@PLT	#
.LVL10:
	.loc 1 53 8 view .LVU32
	movq	%rax, -56(%rbp)	# <retval>, %sfp
.LVL11:
	.loc 1 54 2 is_stmt 1 view .LVU33
# ft_realloc_copy_until_zeroed.c:54: 	if (!new)
	.loc 1 54 5 is_stmt 0 view .LVU34
	testq	%rax, %rax	# <retval>
	je	.L12	#,
	.loc 1 56 2 is_stmt 1 view .LVU35
.LVL12:
	.loc 1 57 2 view .LVU36
# ft_realloc_copy_until_zeroed.c:57: 	if (!old)
	.loc 1 57 5 is_stmt 0 view .LVU37
	testq	%r12, %r12	# ptr
	je	.L9	#,
	leaq	0(%r13,%r12), %rbx	#, ivtmp.32
.LVL13:
	.loc 1 61 50 is_stmt 1 view .LVU38
.LBB4:
.LBI4:
	.loc 1 15 6 view .LVU39
.LBB5:
	.loc 1 17 2 view .LVU40
	.loc 1 18 2 view .LVU41
	.loc 1 20 2 view .LVU42
	.loc 1 21 2 view .LVU43
	.loc 1 22 2 view .LVU44
	.loc 1 22 11 view .LVU45
	xorl	%r15d, %r15d	# offset
	xorl	%r14d, %r14d	# i
	testq	%r13, %r13	# size
	je	.L15	#,
.LVL14:
	.p2align 4,,10
	.p2align 3
.L14:
	.loc 1 22 11 is_stmt 0 view .LVU46
	leaq	(%r12,%r15), %rsi	#, _47
	movq	%rsi, %rax	# _47, ivtmp.17
	jmp	.L17	#
.LVL15:
	.p2align 4,,10
	.p2align 3
.L28:
	.loc 1 28 3 is_stmt 1 view .LVU47
	.loc 1 22 11 view .LVU48
	incq	%rax	# ivtmp.17
	cmpq	%rax, %rbx	# ivtmp.17, ivtmp.32
	je	.L15	#,
.L17:
	.loc 1 24 3 view .LVU49
# ft_realloc_copy_until_zeroed.c:24: 		if (ptr[i] != 0)
	.loc 1 24 6 is_stmt 0 view .LVU50
	cmpb	$0, (%rax)	#, MEM[(int8_t *)_35]
	je	.L28	#,
.LVL16:
	.loc 1 24 6 view .LVU51
.LBE5:
.LBE4:
# ft_realloc_copy_until_zeroed.c:61: 	while (!is_buffer_all_zeros(ptr + offset, size) && i < new_cnt)
	.loc 1 61 50 discriminator 1 view .LVU52
	addq	%r13, %rbx	# size, ivtmp.32
	cmpq	%r14, -64(%rbp)	# i, %sfp
	je	.L15	#,
	.loc 1 63 3 is_stmt 1 view .LVU53
# ft_realloc_copy_until_zeroed.c:63: 		ft_memcpy(new + offset, ptr + offset, size);
	.loc 1 63 17 is_stmt 0 view .LVU54
	movq	-56(%rbp), %rax	# %sfp, <retval>
# ft_realloc_copy_until_zeroed.c:63: 		ft_memcpy(new + offset, ptr + offset, size);
	.loc 1 63 3 view .LVU55
	movq	%r13, %rdx	# size,
# ft_realloc_copy_until_zeroed.c:64: 		i++;
	.loc 1 64 4 view .LVU56
	incq	%r14	# i
# ft_realloc_copy_until_zeroed.c:63: 		ft_memcpy(new + offset, ptr + offset, size);
	.loc 1 63 17 view .LVU57
	leaq	(%rax,%r15), %rdi	#, tmp98
# ft_realloc_copy_until_zeroed.c:65: 		offset = i * size;
	.loc 1 65 10 view .LVU58
	addq	%r13, %r15	# size, offset
# ft_realloc_copy_until_zeroed.c:63: 		ft_memcpy(new + offset, ptr + offset, size);
	.loc 1 63 3 view .LVU59
	call	ft_memcpy@PLT	#
.LVL17:
	.loc 1 64 3 is_stmt 1 view .LVU60
	.loc 1 65 3 view .LVU61
	.loc 1 61 50 view .LVU62
.LBB7:
	.loc 1 15 6 view .LVU63
.LBB6:
	.loc 1 17 2 view .LVU64
	.loc 1 18 2 view .LVU65
	.loc 1 20 2 view .LVU66
	.loc 1 21 2 view .LVU67
	.loc 1 22 2 view .LVU68
	.loc 1 22 11 view .LVU69
	jmp	.L14	#
.LVL18:
	.p2align 4,,10
	.p2align 3
.L15:
	.loc 1 22 11 is_stmt 0 view .LVU70
.LBE6:
.LBE7:
	.loc 1 67 2 is_stmt 1 view .LVU71
	movq	%r12, %rdi	# ptr,
	call	free@PLT	#
.LVL19:
	.loc 1 68 2 view .LVU72
.L9:
# ft_realloc_copy_until_zeroed.c:69: }
	.loc 1 69 1 is_stmt 0 view .LVU73
	movq	-56(%rbp), %rax	# %sfp,
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
.LVL20:
	.loc 1 69 1 view .LVU74
	popq	%r13	#
.LVL21:
	.loc 1 69 1 view .LVU75
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL22:
.L12:
	.cfi_restore_state
	.loc 1 52 3 is_stmt 1 view .LVU76
# ft_realloc_copy_until_zeroed.c:52: 		return (free(ptr), NULL);
	.loc 1 52 11 is_stmt 0 view .LVU77
	movq	%r12, %rdi	# ptr,
	call	free@PLT	#
.LVL23:
# ft_realloc_copy_until_zeroed.c:52: 		return (free(ptr), NULL);
	.loc 1 52 20 discriminator 1 view .LVU78
	movq	$0, -56(%rbp)	#, %sfp
# ft_realloc_copy_until_zeroed.c:52: 		return (free(ptr), NULL);
	.loc 1 52 20 view .LVU79
	jmp	.L9	#
	.cfi_endproc
.LFE52:
	.size	ft_realloc_copy_until_zeroed, .-ft_realloc_copy_until_zeroed
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
	.file 5 "../includes/libft.h"
	.file 6 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x2e5
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xe
	.long	.LASF24
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x6
	.long	.LASF9
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xf
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x6
	.long	.LASF10
	.byte	0x3
	.byte	0x25
	.byte	0x15
	.long	0x7e
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF12
	.uleb128 0x10
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x6
	.long	.LASF14
	.byte	0x4
	.byte	0x18
	.byte	0x12
	.long	0x72
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x9
	.long	0xad
	.uleb128 0x11
	.uleb128 0xa
	.long	.LASF16
	.byte	0x26
	.long	0x8c
	.long	0xcc
	.uleb128 0x2
	.long	0x8c
	.uleb128 0x2
	.long	0xa8
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0xa
	.long	.LASF17
	.byte	0x34
	.long	0x8c
	.long	0xe5
	.uleb128 0x2
	.long	0x35
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x12
	.long	.LASF25
	.byte	0x6
	.value	0x2af
	.byte	0xd
	.long	0xf8
	.uleb128 0x2
	.long	0x8c
	.byte	0
	.uleb128 0x13
	.long	.LASF26
	.byte	0x1
	.byte	0x2c
	.byte	0x7
	.long	0x8c
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0x256
	.uleb128 0x14
	.string	"ptr"
	.byte	0x1
	.byte	0x2c
	.byte	0x2a
	.long	0x8c
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xb
	.long	.LASF18
	.byte	0x36
	.long	0x35
	.long	.LLST5
	.long	.LVUS5
	.uleb128 0xb
	.long	.LASF19
	.byte	0x46
	.long	0x35
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x7
	.string	"new"
	.byte	0x2e
	.byte	0xc
	.long	0x256
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x7
	.string	"i"
	.byte	0x2f
	.byte	0xb
	.long	0x35
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x7
	.string	"old"
	.byte	0x30
	.byte	0xc
	.long	0x256
	.long	.LLST9
	.long	.LVUS9
	.uleb128 0x15
	.long	.LASF20
	.byte	0x1
	.byte	0x31
	.byte	0xb
	.long	0x35
	.long	.LLST10
	.long	.LVUS10
	.uleb128 0x16
	.long	0x25b
	.quad	.LBI4
	.byte	.LVU39
	.long	.LLRL11
	.byte	0x1
	.byte	0x3d
	.byte	0xa
	.long	0x1f1
	.uleb128 0x4
	.long	0x276
	.long	.LLST12
	.long	.LVUS12
	.uleb128 0x4
	.long	0x26c
	.long	.LLST13
	.long	.LVUS13
	.uleb128 0x17
	.long	.LLRL11
	.uleb128 0x5
	.long	0x280
	.long	.LLST14
	.long	.LVUS14
	.uleb128 0x5
	.long	0x289
	.long	.LLST15
	.long	.LVUS15
	.byte	0
	.byte	0
	.uleb128 0x8
	.quad	.LVL10
	.long	0xcc
	.long	0x211
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.byte	0x91
	.sleb128 -80
	.byte	0x6
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x8
	.quad	.LVL17
	.long	0xae
	.long	0x229
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x8
	.quad	.LVL19
	.long	0xe5
	.long	0x241
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x18
	.quad	.LVL23
	.long	0xe5
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.byte	0
	.uleb128 0x9
	.long	0x95
	.uleb128 0x19
	.long	.LASF21
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.long	0x295
	.byte	0x1
	.long	0x295
	.uleb128 0xc
	.long	.LASF22
	.byte	0x20
	.long	0x8c
	.uleb128 0xc
	.long	.LASF19
	.byte	0x2f
	.long	0x35
	.uleb128 0xd
	.string	"i"
	.byte	0x11
	.byte	0x9
	.long	0x35
	.uleb128 0xd
	.string	"ptr"
	.byte	0x12
	.byte	0xa
	.long	0x256
	.byte	0
	.uleb128 0x1
	.byte	0x1
	.byte	0x2
	.long	.LASF23
	.uleb128 0x1a
	.long	0x25b
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x4
	.long	0x26c
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x4
	.long	0x276
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x5
	.long	0x280
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x5
	.long	0x289
	.long	.LLST3
	.long	.LVUS3
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 5
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 44
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS4:
	.uleb128 0
	.uleb128 .LVU29
	.uleb128 .LVU29
	.uleb128 .LVU74
	.uleb128 .LVU74
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 0
.LLST4:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL20-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS5:
	.uleb128 0
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 0
.LLST5:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
.LVUS6:
	.uleb128 0
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU75
	.uleb128 .LVU75
	.uleb128 .LVU76
	.uleb128 .LVU76
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS7:
	.uleb128 .LVU33
	.uleb128 .LVU46
	.uleb128 .LVU46
	.uleb128 .LVU73
.LLST7:
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
.LVUS8:
	.uleb128 .LVU38
	.uleb128 .LVU46
	.uleb128 .LVU61
	.uleb128 .LVU70
.LLST8:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS9:
	.uleb128 .LVU36
	.uleb128 .LVU73
.LLST9:
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS10:
	.uleb128 .LVU38
	.uleb128 .LVU46
	.uleb128 .LVU62
	.uleb128 .LVU70
.LLST10:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0
.LVUS12:
	.uleb128 .LVU39
	.uleb128 .LVU46
	.uleb128 .LVU63
	.uleb128 .LVU70
.LLST12:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS13:
	.uleb128 .LVU39
	.uleb128 .LVU46
.LLST13:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS14:
	.uleb128 .LVU44
	.uleb128 .LVU47
	.uleb128 .LVU68
	.uleb128 .LVU70
.LLST14:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS15:
	.uleb128 .LVU43
	.uleb128 .LVU46
.LLST15:
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 .LVU7
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU12
	.uleb128 .LVU12
	.uleb128 .LVU17
.LLST2:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x7
	.byte	0x75
	.sleb128 0
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x1c
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x9
	.byte	0x75
	.sleb128 0
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x1c
	.byte	0x23
	.uleb128 0x1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x7
	.byte	0x75
	.sleb128 0
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x1c
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 .LVU6
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL11:
	.byte	0x4
	.uleb128 .LBB4-.Ltext0
	.uleb128 .LBE4-.Ltext0
	.byte	0x4
	.uleb128 .LBB7-.Ltext0
	.uleb128 .LBE7-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF9:
	.string	"size_t"
.LASF25:
	.string	"free"
.LASF3:
	.string	"long unsigned int"
.LASF15:
	.string	"long long unsigned int"
.LASF24:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF20:
	.string	"offset"
.LASF6:
	.string	"unsigned char"
.LASF13:
	.string	"char"
.LASF14:
	.string	"int8_t"
.LASF2:
	.string	"long int"
.LASF18:
	.string	"new_cnt"
.LASF23:
	.string	"_Bool"
.LASF10:
	.string	"__int8_t"
.LASF7:
	.string	"short unsigned int"
.LASF16:
	.string	"ft_memcpy"
.LASF19:
	.string	"size"
.LASF17:
	.string	"ft_calloc"
.LASF5:
	.string	"long double"
.LASF21:
	.string	"is_buffer_all_zeros"
.LASF12:
	.string	"short int"
.LASF22:
	.string	"buffer"
.LASF11:
	.string	"signed char"
.LASF26:
	.string	"ft_realloc_copy_until_zeroed"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_realloc_copy_until_zeroed.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/429            0           0     0     644     9156      `
	.file	"ft_strarr_size.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strarr_size.c"
	.p2align 4
	.globl	ft_strarr_size
	.type	ft_strarr_size, @function
ft_strarr_size:
.LVL0:
.LFB51:
	.file 1 "ft_strarr_size.c"
	.loc 1 17 1 view -0
	.cfi_startproc
	.loc 1 17 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_strarr_size.c:17: {
	.loc 1 17 1 view .LVU2
	.loc 1 18 2 is_stmt 1 view .LVU3
	.loc 1 20 2 view .LVU4
.LVL1:
	.loc 1 21 2 view .LVU5
	.loc 1 21 16 view .LVU6
# ft_strarr_size.c:20: 	i = 0;
	.loc 1 20 4 is_stmt 0 view .LVU7
	xorl	%eax, %eax	# <retval>
# ft_strarr_size.c:21: 	while (ptr[i] != NULL)
	.loc 1 21 16 view .LVU8
	cmpq	$0, (%rdi)	#, *ptr_6(D)
	je	.L1	#,
.LVL2:
	.p2align 4,,10
	.p2align 3
.L3:
	.loc 1 22 3 is_stmt 1 view .LVU9
# ft_strarr_size.c:22: 		i++;
	.loc 1 22 4 is_stmt 0 view .LVU10
	incq	%rax	# <retval>
.LVL3:
	.loc 1 21 16 is_stmt 1 view .LVU11
	cmpq	$0, (%rdi,%rax,8)	#, MEM[(char * *)ptr_6(D) + i_8 * 8]
	jne	.L3	#,
.LVL4:
.L1:
# ft_strarr_size.c:24: }
	.loc 1 24 1 is_stmt 0 view .LVU12
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_strarr_size, .-ft_strarr_size
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xd4
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x3
	.long	.LASF13
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x4
	.long	.LASF14
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x5
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x2
	.long	0x85
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x80
	.uleb128 0x6
	.long	.LASF15
	.byte	0x1
	.byte	0x10
	.byte	0x8
	.long	0x35
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x7
	.string	"ptr"
	.byte	0x1
	.byte	0x10
	.byte	0x1e
	.long	0x93
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.string	"i"
	.byte	0x1
	.byte	0x12
	.byte	0x9
	.long	0x35
	.long	.LLST0
	.long	.LVUS0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 .LVU5
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU12
.LLST0:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF14:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF15:
	.string	"ft_strarr_size"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_strarr_size.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_free_2darr.o/0           0     0     644     11631     `
	.file	"ft_free_2darr.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_free_2darr.c"
	.p2align 4
	.globl	ft_free_2darr
	.type	ft_free_2darr, @function
ft_free_2darr:
.LVL0:
.LFB51:
	.file 1 "ft_free_2darr.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	.cfi_offset 12, -24
	.cfi_offset 3, -32
1:	call	*mcount@GOTPCREL(%rip)
# ft_free_2darr.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 19 2 view .LVU4
.LVL1:
	.loc 1 20 2 view .LVU5
# ft_free_2darr.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU6
	movq	%rdi, %r12	# tmp87, array
# ft_free_2darr.c:20: 	if (!array)
	.loc 1 20 5 view .LVU7
	testq	%rdi, %rdi	# array
	je	.L9	#,
	.loc 1 22 18 is_stmt 1 view .LVU8
# ft_free_2darr.c:22: 	while (array[i] != NULL)
	.loc 1 22 14 is_stmt 0 view .LVU9
	movq	(%rdi), %rdi	# *array_8(D), _4
.LVL2:
# ft_free_2darr.c:22: 	while (array[i] != NULL)
	.loc 1 22 18 view .LVU10
	testq	%rdi, %rdi	# _4
	je	.L3	#,
	leaq	8(%r12), %rbx	#, ivtmp.7
.LVL3:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 24 3 is_stmt 1 view .LVU11
	call	free@PLT	#
.LVL4:
	.loc 1 25 3 view .LVU12
	.loc 1 22 18 view .LVU13
# ft_free_2darr.c:22: 	while (array[i] != NULL)
	.loc 1 22 14 is_stmt 0 view .LVU14
	movq	(%rbx), %rdi	# MEM[(char * *)_13 + -8B], _4
# ft_free_2darr.c:22: 	while (array[i] != NULL)
	.loc 1 22 18 view .LVU15
	addq	$8, %rbx	#, ivtmp.7
	testq	%rdi, %rdi	# _4
	jne	.L4	#,
.LVL5:
.L3:
	.loc 1 27 2 is_stmt 1 view .LVU16
# ft_free_2darr.c:28: }
	.loc 1 28 1 is_stmt 0 view .LVU17
	popq	%rbx	#
# ft_free_2darr.c:27: 	free(array);
	.loc 1 27 2 view .LVU18
	movq	%r12, %rdi	# array,
# ft_free_2darr.c:28: }
	.loc 1 28 1 view .LVU19
	popq	%r12	#
.LVL6:
	.loc 1 28 1 view .LVU20
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
# ft_free_2darr.c:27: 	free(array);
	.loc 1 27 2 view .LVU21
	jmp	free@PLT	#
.LVL7:
	.p2align 4,,10
	.p2align 3
.L9:
	.cfi_restore_state
# ft_free_2darr.c:28: }
	.loc 1 28 1 view .LVU22
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_free_2darr, .-ft_free_2darr
.Letext0:
	.file 2 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x101
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x3
	.long	.LASF13
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x5
	.byte	0x8
	.uleb128 0x2
	.long	0x7b
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x2
	.long	0x76
	.uleb128 0x6
	.long	.LASF14
	.byte	0x2
	.value	0x2af
	.byte	0xd
	.long	0xa1
	.uleb128 0x7
	.long	0x74
	.byte	0
	.uleb128 0x8
	.long	.LASF15
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x9
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x1b
	.long	0x89
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0xa
	.string	"i"
	.byte	0x1
	.byte	0x11
	.byte	0x6
	.long	0x3c
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0xb
	.quad	.LVL4
	.long	0x8e
	.uleb128 0xc
	.quad	.LVL7
	.long	0x8e
	.uleb128 0xd
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x82
	.uleb128 0x19
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL7-1-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 .LVU5
	.uleb128 .LVU11
	.uleb128 .LVU22
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF15:
	.string	"ft_free_2darr"
.LASF14:
	.string	"free"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF16:
	.string	"array"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_free_2darr.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/447            0           0     0     644     18078     `
	.file	"ft_strjoin_free_s1.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strjoin_free_s1.c"
	.p2align 4
	.globl	ft_strjoin_free_s1
	.type	ft_strjoin_free_s1, @function
ft_strjoin_free_s1:
.LVL0:
.LFB51:
	.file 1 "ft_strjoin_free_s1.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_strjoin_free_s1.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 21 2 view .LVU6
# ft_strjoin_free_s1.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rsi, %r13	# tmp104, s2
	movq	%rdi, %r12	# tmp103, s1
# ft_strjoin_free_s1.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 21 view .LVU8
	call	ft_strlen@PLT	#
.LVL1:
# ft_strjoin_free_s1.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 37 discriminator 1 view .LVU9
	movq	%r13, %rdi	# s2,
# ft_strjoin_free_s1.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 21 view .LVU10
	movq	%rax, %rbx	# tmp105, _1
# ft_strjoin_free_s1.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 37 discriminator 1 view .LVU11
	call	ft_strlen@PLT	#
.LVL2:
# ft_strjoin_free_s1.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 11 discriminator 2 view .LVU12
	movl	$1, %esi	#,
	leaq	1(%rbx,%rax), %rdi	#, tmp98
	call	ft_calloc@PLT	#
.LVL3:
	movq	%rax, %rbx	# tmp107, <retval>
.LVL4:
	.loc 1 22 2 is_stmt 1 view .LVU13
# ft_strjoin_free_s1.c:22: 	if (!joined)
	.loc 1 22 5 is_stmt 0 view .LVU14
	testq	%rax, %rax	# <retval>
	je	.L1	#,
.LVL5:
	.loc 1 26 17 is_stmt 1 view .LVU15
# ft_strjoin_free_s1.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 11 is_stmt 0 view .LVU16
	movzbl	(%r12), %ecx	# *s1_22(D), _8
# ft_strjoin_free_s1.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 17 view .LVU17
	testb	%cl, %cl	# _8
	je	.L7	#,
	movl	$1, %edx	#, ivtmp.14
.LVL6:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 27 3 is_stmt 1 view .LVU18
# ft_strjoin_free_s1.c:27: 		joined[i] = s1[i];
	.loc 1 27 13 is_stmt 0 view .LVU19
	movb	%cl, -1(%rbx,%rdx)	# _8, MEM[(char *)joined_27 + -1B + ivtmp.14_38 * 1]
	.loc 1 26 17 is_stmt 1 view .LVU20
.LVL7:
	.loc 1 26 17 is_stmt 0 view .LVU21
	movq	%rdx, %rsi	# ivtmp.14, ivtmp.14
	incq	%rdx	# ivtmp.14
.LVL8:
# ft_strjoin_free_s1.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 11 view .LVU22
	movzbl	-1(%r12,%rdx), %ecx	# MEM[(char *)s1_22(D) + -1B + ivtmp.14_36 * 1], _8
# ft_strjoin_free_s1.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 17 view .LVU23
	testb	%cl, %cl	# _8
	jne	.L4	#,
.LVL9:
.L3:
	.loc 1 28 17 is_stmt 1 view .LVU24
# ft_strjoin_free_s1.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 11 is_stmt 0 view .LVU25
	movzbl	0(%r13), %ecx	# *s2_24(D), _15
# ft_strjoin_free_s1.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 17 view .LVU26
	testb	%cl, %cl	# _15
	je	.L5	#,
	movslq	%esi, %rsi	# i, i
	xorl	%edx, %edx	# ivtmp.6
# ft_strjoin_free_s1.c:29: 		joined[i + j] = s2[j];
	.loc 1 29 17 view .LVU27
	addq	%rbx, %rsi	# <retval>, tmp100
.LVL10:
	.p2align 4,,10
	.p2align 3
.L6:
	.loc 1 29 3 is_stmt 1 view .LVU28
# ft_strjoin_free_s1.c:29: 		joined[i + j] = s2[j];
	.loc 1 29 17 is_stmt 0 view .LVU29
	movb	%cl, (%rsi,%rdx)	# _15, MEM[(char *)_39 + ivtmp.6_50 * 1]
	.loc 1 28 17 is_stmt 1 view .LVU30
.LVL11:
	.loc 1 28 17 is_stmt 0 view .LVU31
	incq	%rdx	# ivtmp.6
.LVL12:
# ft_strjoin_free_s1.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 11 view .LVU32
	movzbl	0(%r13,%rdx), %ecx	# MEM[(char *)s2_24(D) + ivtmp.6_41 * 1], _15
# ft_strjoin_free_s1.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 17 view .LVU33
	testb	%cl, %cl	# _15
	jne	.L6	#,
.LVL13:
.L5:
	.loc 1 30 2 is_stmt 1 view .LVU34
	movq	%r12, %rdi	# s1,
	call	free@PLT	#
.LVL14:
	.loc 1 31 2 view .LVU35
.L1:
# ft_strjoin_free_s1.c:32: }
	.loc 1 32 1 is_stmt 0 view .LVU36
	addq	$8, %rsp	#,
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
.LVL15:
	.loc 1 32 1 view .LVU37
	popq	%r12	#
.LVL16:
	.loc 1 32 1 view .LVU38
	popq	%r13	#
.LVL17:
	.loc 1 32 1 view .LVU39
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL18:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
# ft_strjoin_free_s1.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 17 view .LVU40
	xorl	%esi, %esi	# i
	jmp	.L3	#
	.cfi_endproc
.LFE51:
	.size	ft_strjoin_free_s1, .-ft_strjoin_free_s1
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 4 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x1ae
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x9
	.long	.LASF16
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xa
	.long	.LASF17
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xb
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xc
	.byte	0x8
	.uleb128 0x5
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xd
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x5
	.long	0x8e
	.uleb128 0xe
	.long	.LASF18
	.byte	0x4
	.value	0x2af
	.byte	0xd
	.long	0xb2
	.uleb128 0x2
	.long	0x80
	.byte	0
	.uleb128 0x6
	.long	.LASF13
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xcc
	.uleb128 0x2
	.long	0x35
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x6
	.long	.LASF14
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xe1
	.uleb128 0x2
	.long	0x9a
	.byte	0
	.uleb128 0xf
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x82
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x7
	.string	"s1"
	.byte	0x20
	.long	0x82
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x7
	.string	"s2"
	.byte	0x2a
	.long	0x82
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x10
	.long	.LASF15
	.byte	0x1
	.byte	0x11
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x8
	.string	"i"
	.byte	0x12
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x8
	.string	"j"
	.byte	0x13
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x4
	.quad	.LVL1
	.long	0xcc
	.long	0x16d
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x4
	.quad	.LVL2
	.long	0xcc
	.long	0x185
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x4
	.quad	.LVL3
	.long	0xb2
	.long	0x19c
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x11
	.quad	.LVL14
	.long	0x9f
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS2:
	.uleb128 .LVU13
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL14-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL14-1-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS3:
	.uleb128 .LVU15
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU24
	.uleb128 .LVU40
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU24
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU34
.LLST4:
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF18:
	.string	"free"
.LASF17:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF16:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF13:
	.string	"ft_calloc"
.LASF19:
	.string	"ft_strjoin_free_s1"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"ft_strlen"
.LASF15:
	.string	"joined"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_strjoin_free_s1.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/469            0           0     0     644     18352     `
	.file	"ft_strjoin_free_both.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_strjoin_free_both.c"
	.p2align 4
	.globl	ft_strjoin_free_both
	.type	ft_strjoin_free_both, @function
ft_strjoin_free_both:
.LVL0:
.LFB51:
	.file 1 "ft_strjoin_free_both.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
1:	call	*mcount@GOTPCREL(%rip)
# ft_strjoin_free_both.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
	.loc 1 18 2 view .LVU4
	.loc 1 19 2 view .LVU5
	.loc 1 21 2 view .LVU6
# ft_strjoin_free_both.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU7
	movq	%rsi, %r12	# tmp104, s2
	movq	%rdi, %r13	# tmp103, s1
# ft_strjoin_free_both.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 21 view .LVU8
	call	ft_strlen@PLT	#
.LVL1:
# ft_strjoin_free_both.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 37 discriminator 1 view .LVU9
	movq	%r12, %rdi	# s2,
# ft_strjoin_free_both.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 21 view .LVU10
	movq	%rax, %rbx	# tmp105, _1
# ft_strjoin_free_both.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 37 discriminator 1 view .LVU11
	call	ft_strlen@PLT	#
.LVL2:
# ft_strjoin_free_both.c:21: 	joined = ft_calloc(ft_strlen(s1) + ft_strlen(s2) + 1, 1);
	.loc 1 21 11 discriminator 2 view .LVU12
	movl	$1, %esi	#,
	leaq	1(%rbx,%rax), %rdi	#, tmp98
	call	ft_calloc@PLT	#
.LVL3:
	movq	%rax, %rbx	# tmp107, <retval>
.LVL4:
	.loc 1 22 2 is_stmt 1 view .LVU13
# ft_strjoin_free_both.c:22: 	if (!joined)
	.loc 1 22 5 is_stmt 0 view .LVU14
	testq	%rax, %rax	# <retval>
	je	.L1	#,
.LVL5:
	.loc 1 26 17 is_stmt 1 view .LVU15
# ft_strjoin_free_both.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 11 is_stmt 0 view .LVU16
	movzbl	0(%r13), %ecx	# *s1_22(D), _8
# ft_strjoin_free_both.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 17 view .LVU17
	testb	%cl, %cl	# _8
	je	.L7	#,
	movl	$1, %edx	#, ivtmp.14
.LVL6:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 27 3 is_stmt 1 view .LVU18
# ft_strjoin_free_both.c:27: 		joined[i] = s1[i];
	.loc 1 27 13 is_stmt 0 view .LVU19
	movb	%cl, -1(%rbx,%rdx)	# _8, MEM[(char *)joined_27 + -1B + ivtmp.14_39 * 1]
	.loc 1 26 17 is_stmt 1 view .LVU20
.LVL7:
	.loc 1 26 17 is_stmt 0 view .LVU21
	movq	%rdx, %rsi	# ivtmp.14, ivtmp.14
	incq	%rdx	# ivtmp.14
.LVL8:
# ft_strjoin_free_both.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 11 view .LVU22
	movzbl	-1(%r13,%rdx), %ecx	# MEM[(char *)s1_22(D) + -1B + ivtmp.14_37 * 1], _8
# ft_strjoin_free_both.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 17 view .LVU23
	testb	%cl, %cl	# _8
	jne	.L4	#,
.LVL9:
.L3:
	.loc 1 28 17 is_stmt 1 view .LVU24
# ft_strjoin_free_both.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 11 is_stmt 0 view .LVU25
	movzbl	(%r12), %ecx	# *s2_24(D), _15
# ft_strjoin_free_both.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 17 view .LVU26
	testb	%cl, %cl	# _15
	je	.L5	#,
	movslq	%esi, %rsi	# i, i
	xorl	%edx, %edx	# ivtmp.6
# ft_strjoin_free_both.c:29: 		joined[i + j] = s2[j];
	.loc 1 29 17 view .LVU27
	addq	%rbx, %rsi	# <retval>, tmp100
.LVL10:
	.p2align 4,,10
	.p2align 3
.L6:
	.loc 1 29 3 is_stmt 1 view .LVU28
# ft_strjoin_free_both.c:29: 		joined[i + j] = s2[j];
	.loc 1 29 17 is_stmt 0 view .LVU29
	movb	%cl, (%rsi,%rdx)	# _15, MEM[(char *)_40 + ivtmp.6_51 * 1]
	.loc 1 28 17 is_stmt 1 view .LVU30
.LVL11:
	.loc 1 28 17 is_stmt 0 view .LVU31
	incq	%rdx	# ivtmp.6
.LVL12:
# ft_strjoin_free_both.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 11 view .LVU32
	movzbl	(%r12,%rdx), %ecx	# MEM[(char *)s2_24(D) + ivtmp.6_42 * 1], _15
# ft_strjoin_free_both.c:28: 	while (s2[++j] != '\0')
	.loc 1 28 17 view .LVU33
	testb	%cl, %cl	# _15
	jne	.L6	#,
.LVL13:
.L5:
	.loc 1 30 2 is_stmt 1 view .LVU34
	movq	%r13, %rdi	# s1,
	call	free@PLT	#
.LVL14:
	.loc 1 31 2 view .LVU35
	movq	%r12, %rdi	# s2,
	call	free@PLT	#
.LVL15:
	.loc 1 32 2 view .LVU36
.L1:
# ft_strjoin_free_both.c:33: }
	.loc 1 33 1 is_stmt 0 view .LVU37
	addq	$8, %rsp	#,
	movq	%rbx, %rax	# <retval>,
	popq	%rbx	#
.LVL16:
	.loc 1 33 1 view .LVU38
	popq	%r12	#
.LVL17:
	.loc 1 33 1 view .LVU39
	popq	%r13	#
.LVL18:
	.loc 1 33 1 view .LVU40
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL19:
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
# ft_strjoin_free_both.c:26: 	while (s1[++i] != '\0')
	.loc 1 26 17 view .LVU41
	xorl	%esi, %esi	# i
	jmp	.L3	#
	.cfi_endproc
.LFE51:
	.size	ft_strjoin_free_both, .-ft_strjoin_free_both
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 4 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x1c6
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x9
	.long	.LASF16
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xa
	.long	.LASF17
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0xb
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0xc
	.byte	0x8
	.uleb128 0x5
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0xd
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x5
	.long	0x8e
	.uleb128 0xe
	.long	.LASF18
	.byte	0x4
	.value	0x2af
	.byte	0xd
	.long	0xb2
	.uleb128 0x3
	.long	0x80
	.byte	0
	.uleb128 0x6
	.long	.LASF13
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xcc
	.uleb128 0x3
	.long	0x35
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x6
	.long	.LASF14
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xe1
	.uleb128 0x3
	.long	0x9a
	.byte	0
	.uleb128 0xf
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0x7
	.long	0x82
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x7
	.string	"s1"
	.byte	0x22
	.long	0x82
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x7
	.string	"s2"
	.byte	0x2c
	.long	0x82
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x10
	.long	.LASF15
	.byte	0x1
	.byte	0x11
	.byte	0x8
	.long	0x82
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x8
	.string	"i"
	.byte	0x12
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x8
	.string	"j"
	.byte	0x13
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x4
	.quad	.LVL1
	.long	0xcc
	.long	0x16d
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x4
	.quad	.LVL2
	.long	0xcc
	.long	0x185
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x4
	.quad	.LVL3
	.long	0xb2
	.long	0x19c
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0x4
	.quad	.LVL14
	.long	0x9f
	.long	0x1b4
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0
	.uleb128 0x11
	.quad	.LVL15
	.long	0x9f
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 15
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0x21
	.sleb128 7
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU40
	.uleb128 .LVU40
	.uleb128 .LVU41
	.uleb128 .LVU41
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL18-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL18-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU9
	.uleb128 .LVU9
	.uleb128 .LVU39
	.uleb128 .LVU39
	.uleb128 .LVU41
	.uleb128 .LVU41
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS2:
	.uleb128 .LVU13
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL14-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL14-1-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS3:
	.uleb128 .LVU15
	.uleb128 .LVU16
	.uleb128 .LVU16
	.uleb128 .LVU18
	.uleb128 .LVU18
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU22
	.uleb128 .LVU22
	.uleb128 .LVU24
	.uleb128 .LVU41
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL5-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL19-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU24
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU31
	.uleb128 .LVU31
	.uleb128 .LVU32
	.uleb128 .LVU32
	.uleb128 .LVU34
.LLST4:
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF18:
	.string	"free"
.LASF17:
	.string	"size_t"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF16:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF13:
	.string	"ft_calloc"
.LASF10:
	.string	"short int"
.LASF14:
	.string	"ft_strlen"
.LASF19:
	.string	"ft_strjoin_free_both"
.LASF15:
	.string	"joined"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_strjoin_free_both.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
/493            0           0     0     644     28508     `
	.file	"ft_split_wildcards.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_split_wildcards.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"2}{*"
	.text
	.p2align 4
	.globl	ft_split_wildcards
	.type	ft_split_wildcards, @function
ft_split_wildcards:
.LVL0:
.LFB53:
	.file 1 "ft_split_wildcards.c"
	.loc 1 44 1 view -0
	.cfi_startproc
	.loc 1 44 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_split_wildcards.c:44: {
	.loc 1 44 1 view .LVU2
	.loc 1 45 2 is_stmt 1 view .LVU3
	.loc 1 46 2 view .LVU4
	.loc 1 47 2 view .LVU5
	.loc 1 48 2 view .LVU6
	.loc 1 50 2 view .LVU7
# ft_split_wildcards.c:44: {
	.loc 1 44 1 is_stmt 0 view .LVU8
	movq	%rdi, %r12	# tmp157, wildcard_str
# ft_split_wildcards.c:50: 	if (!wildcard_str || !*wildcard_str)
	.loc 1 50 5 view .LVU9
	testq	%rdi, %rdi	# wildcard_str
	je	.L11	#,
# ft_split_wildcards.c:50: 	if (!wildcard_str || !*wildcard_str)
	.loc 1 50 20 discriminator 1 view .LVU10
	cmpb	$0, (%rdi)	#, *wildcard_str_20(D)
	je	.L11	#,
	.loc 1 52 2 is_stmt 1 view .LVU11
# ft_split_wildcards.c:52: 	str_ar = (char **)ft_calloc(ft_strlen(wildcard_str) + 1, sizeof(char *));
	.loc 1 52 30 is_stmt 0 view .LVU12
	call	ft_strlen@PLT	#
.LVL1:
# ft_split_wildcards.c:52: 	str_ar = (char **)ft_calloc(ft_strlen(wildcard_str) + 1, sizeof(char *));
	.loc 1 52 20 discriminator 1 view .LVU13
	movl	$8, %esi	#,
	leaq	1(%rax), %rdi	#, tmp134
	call	ft_calloc@PLT	#
.LVL2:
	movq	%rax, -56(%rbp)	# <retval>, %sfp
.LVL3:
	.loc 1 53 2 is_stmt 1 view .LVU14
# ft_split_wildcards.c:53: 	if (!str_ar)
	.loc 1 53 5 is_stmt 0 view .LVU15
	testq	%rax, %rax	# <retval>
	je	.L11	#,
	movq	%rax, %r14	# <retval>, ivtmp.35
# ft_split_wildcards.c:55: 	i = 0;
	.loc 1 55 4 view .LVU16
	xorl	%r15d, %r15d	# i
.LVL4:
.L33:
	.loc 1 57 9 is_stmt 1 view .LVU17
# ft_split_wildcards.c:57: 	while (wildcard_str[i])
	.loc 1 57 21 is_stmt 0 view .LVU18
	movslq	%r15d, %rdx	# i, _13
	leaq	(%r12,%rdx), %rbx	#, _28
	movzbl	(%rbx), %eax	# *_14, _15
# ft_split_wildcards.c:57: 	while (wildcard_str[i])
	.loc 1 57 9 view .LVU19
	testb	%al, %al	# _15
	je	.L1	#,
.L44:
.LBB6:
.LBB7:
	.loc 1 37 3 is_stmt 1 view .LVU20
	cmpb	$50, %al	#, _15
	jne	.L4	#,
	.loc 1 37 3 is_stmt 0 view .LVU21
	leaq	4(%r12,%rdx), %rax	#, ivtmp.28
	jmp	.L15	#
	.p2align 4,,10
	.p2align 3
.L42:
# ft_split_wildcards.c:36: 	while (s[*i] == '2' && s[(*i) + 1] == '}' && s[(*i) + 2] == '{'
	.loc 1 36 44 discriminator 1 view .LVU22
	cmpb	$123, -2(%rax)	#, MEM[(const char *)_123 + -2B]
	jne	.L4	#,
# ft_split_wildcards.c:37: 		&& s[(*i) + 3] == '*')
	.loc 1 37 3 view .LVU23
	cmpb	$42, -1(%rax)	#, MEM[(const char *)_123 + -1B]
	jne	.L4	#,
	.loc 1 39 3 is_stmt 1 view .LVU24
# ft_split_wildcards.c:39: 		*i += 4;
	.loc 1 39 6 is_stmt 0 view .LVU25
	addl	$4, %r15d	#, i
.LVL5:
	.loc 1 37 3 is_stmt 1 view .LVU26
	addq	$4, %rbx	#, ivtmp.24
	addq	$4, %rax	#, ivtmp.28
	cmpb	$50, (%rdx)	#, MEM[(const char *)_123]
	jne	.L16	#,
.L15:
# ft_split_wildcards.c:36: 	while (s[*i] == '2' && s[(*i) + 1] == '}' && s[(*i) + 2] == '{'
	.loc 1 36 22 is_stmt 0 view .LVU27
	cmpb	$125, -3(%rax)	#, MEM[(const char *)_123 + -3B]
	movq	%rax, %rdx	# ivtmp.28, _123
	je	.L42	#,
.L4:
	.loc 1 36 22 view .LVU28
.LBE7:
.LBE6:
	.loc 1 60 3 is_stmt 1 view .LVU29
.LVL6:
.LBB9:
.LBI9:
	.loc 1 15 12 view .LVU30
.LBB10:
	.loc 1 18 2 view .LVU31
	.loc 1 19 2 view .LVU32
	.loc 1 21 2 view .LVU33
# ft_split_wildcards.c:21: 	found = ft_strnstr(rest_wildcard_str, "2}{*", ft_strlen(rest_wildcard_str));
	.loc 1 21 10 is_stmt 0 view .LVU34
	movq	%rbx, %rdi	# _28,
	call	ft_strlen@PLT	#
.LVL7:
# ft_split_wildcards.c:21: 	found = ft_strnstr(rest_wildcard_str, "2}{*", ft_strlen(rest_wildcard_str));
	.loc 1 21 10 discriminator 1 view .LVU35
	leaq	.LC0(%rip), %rsi	#,
	movq	%rbx, %rdi	# _28,
# ft_split_wildcards.c:21: 	found = ft_strnstr(rest_wildcard_str, "2}{*", ft_strlen(rest_wildcard_str));
	.loc 1 21 10 view .LVU36
	movq	%rax, %rdx	# tmp160, _38
# ft_split_wildcards.c:21: 	found = ft_strnstr(rest_wildcard_str, "2}{*", ft_strlen(rest_wildcard_str));
	.loc 1 21 10 discriminator 1 view .LVU37
	call	ft_strnstr@PLT	#
.LVL8:
# ft_split_wildcards.c:22: 	*sub_str = (char *)ft_calloc(ft_strlen(rest_wildcard_str)+ 1, sizeof(char));
	.loc 1 22 31 view .LVU38
	movq	%rbx, %rdi	# _28,
# ft_split_wildcards.c:21: 	found = ft_strnstr(rest_wildcard_str, "2}{*", ft_strlen(rest_wildcard_str));
	.loc 1 21 10 discriminator 1 view .LVU39
	movq	%rax, %r13	# tmp161, found
.LVL9:
	.loc 1 22 2 is_stmt 1 view .LVU40
# ft_split_wildcards.c:22: 	*sub_str = (char *)ft_calloc(ft_strlen(rest_wildcard_str)+ 1, sizeof(char));
	.loc 1 22 31 is_stmt 0 view .LVU41
	call	ft_strlen@PLT	#
.LVL10:
# ft_split_wildcards.c:22: 	*sub_str = (char *)ft_calloc(ft_strlen(rest_wildcard_str)+ 1, sizeof(char));
	.loc 1 22 21 discriminator 1 view .LVU42
	movl	$1, %esi	#,
	leaq	1(%rax), %rdi	#, tmp136
	call	ft_calloc@PLT	#
.LVL11:
# ft_split_wildcards.c:22: 	*sub_str = (char *)ft_calloc(ft_strlen(rest_wildcard_str)+ 1, sizeof(char));
	.loc 1 22 11 discriminator 2 view .LVU43
	movq	%rax, (%r14)	# _42, MEM[(char * *)_131]
	.loc 1 23 2 is_stmt 1 view .LVU44
# ft_split_wildcards.c:23: 	if (!(*sub_str))
	.loc 1 23 5 is_stmt 0 view .LVU45
	testq	%rax, %rax	# _42
	je	.L6	#,
.LVL12:
	.loc 1 26 34 is_stmt 1 view .LVU46
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 26 is_stmt 0 view .LVU47
	movzbl	(%rbx), %edx	# *_29, _66
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 34 discriminator 1 view .LVU48
	testb	%dl, %dl	# _66
	je	.L33	#,
	cmpq	%r13, %rbx	# found, _28
	je	.L33	#,
	.loc 1 28 3 is_stmt 1 view .LVU49
# ft_split_wildcards.c:28: 		(*sub_str)[count] = rest_wildcard_str[count];
	.loc 1 28 21 is_stmt 0 view .LVU50
	movb	%dl, (%rax)	# _66, MEM[(char *)_42]
	.loc 1 29 3 is_stmt 1 view .LVU51
.LVL13:
	.loc 1 26 34 view .LVU52
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 26 is_stmt 0 view .LVU53
	leaq	1(%rbx), %rax	#, tmp141
	movzbl	1(%rbx), %edx	# MEM[(const char *)_29 + 1B], _6
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 34 discriminator 1 view .LVU54
	cmpq	%rax, %r13	# tmp141, found
	je	.L17	#,
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 34 view .LVU55
	testb	%dl, %dl	# _6
	leaq	2(%rbx), %r9	#, ivtmp.17
	setne	%sil	#, tmp145
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 34 discriminator 1 view .LVU56
	movq	%r9, %rax	# ivtmp.17, ivtmp.17
	testb	%sil, %sil	# tmp145
	jne	.L12	#,
	jmp	.L17	#
.LVL14:
	.p2align 4,,10
	.p2align 3
.L43:
	.loc 1 26 34 discriminator 1 view .LVU57
	testb	%dl, %dl	# _6
	je	.L18	#,
.LVL15:
.L12:
	.loc 1 28 3 is_stmt 1 view .LVU58
# ft_split_wildcards.c:28: 		(*sub_str)[count] = rest_wildcard_str[count];
	.loc 1 28 21 is_stmt 0 view .LVU59
	movq	(%r14), %rdi	# MEM[(char * *)_131], MEM[(char * *)_131]
# ft_split_wildcards.c:28: 		(*sub_str)[count] = rest_wildcard_str[count];
	.loc 1 28 13 view .LVU60
	movq	%rax, %rsi	# ivtmp.17, tmp146
	subq	%rbx, %rsi	# _28, tmp146
# ft_split_wildcards.c:28: 		(*sub_str)[count] = rest_wildcard_str[count];
	.loc 1 28 21 view .LVU61
	movb	%dl, -1(%rdi,%rsi)	# _6, *_45
	.loc 1 29 3 is_stmt 1 view .LVU62
.LVL16:
	.loc 1 26 34 view .LVU63
	movq	%rax, %rsi	# ivtmp.17, _79
	movq	%rax, %rdi	# ivtmp.17, ivtmp.17
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 34 is_stmt 0 discriminator 1 view .LVU64
	incq	%rax	# ivtmp.17
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 26 view .LVU65
	movzbl	-1(%rax), %edx	# MEM[(const char *)_79], _6
# ft_split_wildcards.c:26: 	while (rest_wildcard_str[count] && rest_wildcard_str + count != found)
	.loc 1 26 34 discriminator 1 view .LVU66
	cmpq	%rsi, %r13	# _79, found
	jne	.L43	#,
.L18:
# ft_split_wildcards.c:29: 		count++;
	.loc 1 29 8 view .LVU67
	subl	%r9d, %edi	# ivtmp.17, tmp152
	leal	2(%rdi), %eax	#, count
.LVL17:
.L10:
	.loc 1 29 8 view .LVU68
.LBE10:
.LBE9:
	.loc 1 61 3 is_stmt 1 view .LVU69
	.loc 1 63 3 view .LVU70
	.loc 1 65 4 view .LVU71
	.loc 1 66 4 view .LVU72
# ft_split_wildcards.c:66: 			i += s_increase;
	.loc 1 66 6 is_stmt 0 view .LVU73
	addl	%eax, %r15d	# count, i
.LVL18:
	.loc 1 66 6 view .LVU74
	addq	$8, %r14	#, ivtmp.35
.LVL19:
	.loc 1 57 9 is_stmt 1 view .LVU75
# ft_split_wildcards.c:57: 	while (wildcard_str[i])
	.loc 1 57 21 is_stmt 0 view .LVU76
	movslq	%r15d, %rdx	# i, _13
	leaq	(%r12,%rdx), %rbx	#, _28
	movzbl	(%rbx), %eax	# *_14, _15
# ft_split_wildcards.c:57: 	while (wildcard_str[i])
	.loc 1 57 9 view .LVU77
	testb	%al, %al	# _15
	jne	.L44	#,
.LVL20:
.L1:
# ft_split_wildcards.c:70: }
	.loc 1 70 1 view .LVU78
	movq	-56(%rbp), %rax	# %sfp,
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
.LVL21:
	.loc 1 70 1 view .LVU79
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL22:
	.p2align 4,,10
	.p2align 3
.L16:
	.cfi_restore_state
.LBB12:
.LBB8:
	.loc 1 70 1 view .LVU80
	movq	%rdx, %rbx	# _123, _28
	jmp	.L4	#
.LVL23:
	.p2align 4,,10
	.p2align 3
.L17:
	.loc 1 70 1 view .LVU81
.LBE8:
.LBE12:
.LBB13:
.LBB11:
# ft_split_wildcards.c:29: 		count++;
	.loc 1 29 8 view .LVU82
	movl	$1, %eax	#, count
	jmp	.L10	#
.LVL24:
.L6:
	.loc 1 29 8 view .LVU83
.LBE11:
.LBE13:
	.loc 1 61 3 is_stmt 1 view .LVU84
	.loc 1 62 4 view .LVU85
# ft_split_wildcards.c:62: 			return (ft_free_2darr(str_ar), NULL);
	.loc 1 62 12 is_stmt 0 view .LVU86
	movq	-56(%rbp), %rdi	# %sfp,
	call	ft_free_2darr@PLT	#
.LVL25:
.L11:
# ft_split_wildcards.c:51: 		return (NULL);
	.loc 1 51 10 view .LVU87
	movq	$0, -56(%rbp)	#, %sfp
	jmp	.L1	#
	.cfi_endproc
.LFE53:
	.size	ft_split_wildcards, .-ft_split_wildcards
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x2ec
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0xe
	.long	.LASF24
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0xf
	.long	.LASF25
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x10
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x11
	.byte	0x8
	.uleb128 0x5
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x12
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x5
	.long	0x82
	.uleb128 0x5
	.long	0x8e
	.uleb128 0x6
	.long	.LASF13
	.byte	0x32
	.byte	0x7
	.long	0x82
	.long	0xc3
	.uleb128 0x3
	.long	0x9f
	.uleb128 0x3
	.long	0x9f
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x13
	.long	.LASF26
	.byte	0x2
	.byte	0x37
	.byte	0x6
	.long	0xd5
	.uleb128 0x3
	.long	0x9a
	.byte	0
	.uleb128 0x6
	.long	.LASF14
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0xef
	.uleb128 0x3
	.long	0x35
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0x6
	.long	.LASF15
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0x104
	.uleb128 0x3
	.long	0x9f
	.byte	0
	.uleb128 0x14
	.long	.LASF27
	.byte	0x1
	.byte	0x2b
	.byte	0x8
	.long	0x9a
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x292
	.uleb128 0x15
	.long	.LASF28
	.byte	0x1
	.byte	0x2b
	.byte	0x27
	.long	0x9f
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x8
	.long	.LASF16
	.byte	0x2d
	.byte	0xa
	.long	0x9a
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x16
	.string	"i"
	.byte	0x1
	.byte	0x2e
	.byte	0x8
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x8
	.long	.LASF17
	.byte	0x2f
	.byte	0x8
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x17
	.string	"i2"
	.byte	0x1
	.byte	0x30
	.byte	0x8
	.long	0x48
	.uleb128 0x18
	.long	0x292
	.long	.LLRL4
	.byte	0x1
	.byte	0x3b
	.byte	0x3
	.long	0x198
	.uleb128 0x7
	.long	0x2a7
	.uleb128 0x7
	.long	0x29f
	.byte	0
	.uleb128 0x19
	.long	0x2b5
	.quad	.LBI9
	.byte	.LVU30
	.long	.LLRL5
	.byte	0x1
	.byte	0x3c
	.byte	0x10
	.long	0x24c
	.uleb128 0x1a
	.long	0x2cd
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x7
	.long	0x2c2
	.uleb128 0x1b
	.long	.LLRL5
	.uleb128 0x9
	.long	0x2d8
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0x9
	.long	0x2e3
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x4
	.quad	.LVL7
	.long	0xef
	.long	0x1fa
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x4
	.quad	.LVL8
	.long	0xa4
	.long	0x21f
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.byte	0
	.uleb128 0x4
	.quad	.LVL10
	.long	0xef
	.long	0x237
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0xa
	.quad	.LVL11
	.long	0xd5
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x4
	.quad	.LVL1
	.long	0xef
	.long	0x264
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x4
	.quad	.LVL2
	.long	0xd5
	.long	0x27b
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x38
	.byte	0
	.uleb128 0xa
	.quad	.LVL25
	.long	0xc3
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.byte	0x91
	.sleb128 -72
	.byte	0x6
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.LASF18
	.byte	0x1
	.byte	0x22
	.byte	0xd
	.byte	0x1
	.long	0x2b0
	.uleb128 0xb
	.string	"i"
	.byte	0x26
	.long	0x2b0
	.uleb128 0xb
	.string	"s"
	.byte	0x35
	.long	0x9f
	.byte	0
	.uleb128 0x5
	.long	0x48
	.uleb128 0x1d
	.long	.LASF19
	.byte	0x1
	.byte	0xf
	.byte	0xc
	.long	0x48
	.byte	0x1
	.uleb128 0xc
	.long	.LASF20
	.byte	0xf
	.byte	0x2d
	.long	0x9a
	.uleb128 0xc
	.long	.LASF21
	.byte	0x10
	.byte	0xe
	.long	0x9f
	.uleb128 0xd
	.long	.LASF22
	.byte	0x12
	.byte	0x7
	.long	0x48
	.uleb128 0xd
	.long	.LASF23
	.byte	0x13
	.byte	0x8
	.long	0x82
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 34
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU13
	.uleb128 .LVU13
	.uleb128 .LVU79
	.uleb128 .LVU79
	.uleb128 .LVU80
	.uleb128 .LVU80
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-1-.Ltext0
	.uleb128 .LVL21-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL22-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS1:
	.uleb128 .LVU14
	.uleb128 .LVU17
	.uleb128 .LVU17
	.uleb128 .LVU78
	.uleb128 .LVU80
	.uleb128 .LVU87
.LLST1:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -72
	.byte	0
.LVUS2:
	.uleb128 .LVU17
	.uleb128 .LVU78
	.uleb128 .LVU80
	.uleb128 .LVU87
.LLST2:
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL20-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0
.LVUS3:
	.uleb128 .LVU68
	.uleb128 .LVU75
	.uleb128 .LVU83
	.uleb128 .LVU87
.LLST3:
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL19-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU30
	.uleb128 .LVU68
	.uleb128 .LVU81
	.uleb128 .LVU83
.LLST6:
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS7:
	.uleb128 .LVU46
	.uleb128 .LVU52
	.uleb128 .LVU52
	.uleb128 .LVU57
	.uleb128 .LVU58
	.uleb128 .LVU63
	.uleb128 .LVU81
	.uleb128 .LVU83
.LLST7:
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x7
	.byte	0x73
	.sleb128 0
	.byte	0x20
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS8:
	.uleb128 .LVU40
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 .LVU68
	.uleb128 .LVU81
	.uleb128 .LVU83
.LLST8:
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL4:
	.byte	0x4
	.uleb128 .LBB6-.Ltext0
	.uleb128 .LBE6-.Ltext0
	.byte	0x4
	.uleb128 .LBB12-.Ltext0
	.uleb128 .LBE12-.Ltext0
	.byte	0
.LLRL5:
	.byte	0x4
	.uleb128 .LBB9-.Ltext0
	.uleb128 .LBE9-.Ltext0
	.byte	0x4
	.uleb128 .LBB13-.Ltext0
	.uleb128 .LBE13-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF27:
	.string	"ft_split_wildcards"
.LASF25:
	.string	"size_t"
.LASF22:
	.string	"count"
.LASF13:
	.string	"ft_strnstr"
.LASF15:
	.string	"ft_strlen"
.LASF20:
	.string	"sub_str"
.LASF6:
	.string	"unsigned char"
.LASF3:
	.string	"long unsigned int"
.LASF7:
	.string	"short unsigned int"
.LASF14:
	.string	"ft_calloc"
.LASF8:
	.string	"unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF19:
	.string	"append_next_sub_wildcards"
.LASF28:
	.string	"wildcard_str"
.LASF23:
	.string	"found"
.LASF18:
	.string	"loop_while_the_four"
.LASF11:
	.string	"char"
.LASF17:
	.string	"s_increase"
.LASF10:
	.string	"short int"
.LASF26:
	.string	"ft_free_2darr"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF21:
	.string	"rest_wildcard_str"
.LASF24:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF16:
	.string	"str_ar"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_split_wildcards.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ft_split_fn.o/  0           0     0     644     34007     `
	.file	"ft_split_fn.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_split_fn.c"
	.p2align 4
	.globl	ft_split_fn
	.type	ft_split_fn, @function
ft_split_fn:
.LVL0:
.LFB53:
	.file 1 "ft_split_fn.c"
	.loc 1 66 1 view -0
	.cfi_startproc
	.loc 1 66 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# ft_split_fn.c:66: {
	.loc 1 66 1 view .LVU2
	.loc 1 67 2 is_stmt 1 view .LVU3
	.loc 1 68 2 view .LVU4
	.loc 1 69 2 view .LVU5
	.loc 1 70 2 view .LVU6
	.loc 1 72 2 view .LVU7
.LVL1:
# ft_split_fn.c:66: {
	.loc 1 66 1 is_stmt 0 view .LVU8
	movq	%rdi, %rbx	# tmp134, s
.LBB6:
.LBB7:
# ft_split_fn.c:22: 	while (*s)
	.loc 1 22 9 view .LVU9
	movsbl	(%rdi), %edi	# *s_20(D),
.LVL2:
	.loc 1 22 9 view .LVU10
.LBE7:
.LBE6:
# ft_split_fn.c:66: {
	.loc 1 66 1 view .LVU11
	movq	%rsi, %r12	# tmp135, is_sep
.LVL3:
.LBB11:
.LBI6:
	.loc 1 15 15 is_stmt 1 view .LVU12
.LBB8:
	.loc 1 17 2 view .LVU13
	.loc 1 18 2 view .LVU14
	.loc 1 20 2 view .LVU15
	.loc 1 21 2 view .LVU16
	.loc 1 22 2 view .LVU17
	.loc 1 22 9 view .LVU18
	testb	%dil, %dil	# _36
	je	.L22	#,
	movq	%rbx, %r14	# s, s
# ft_split_fn.c:20: 	count = 0;
	.loc 1 20 8 is_stmt 0 view .LVU19
	xorl	%r13d, %r13d	# count
# ft_split_fn.c:21: 	was_c = 1;
	.loc 1 21 8 view .LVU20
	movl	$1, %eax	#, was_c
	jmp	.L6	#
.LVL4:
	.p2align 4,,10
	.p2align 3
.L41:
# ft_split_fn.c:24: 		if (!was_c && is_sep(*s))
	.loc 1 24 17 discriminator 1 view .LVU21
	call	*%r12	# is_sep
.LVL5:
# ft_split_fn.c:24: 		if (!was_c && is_sep(*s))
	.loc 1 24 14 discriminator 1 view .LVU22
	testb	%al, %al	# tmp136
	je	.L4	#,
# ft_split_fn.c:22: 	while (*s)
	.loc 1 22 9 view .LVU23
	movsbl	1(%r14), %edi	# MEM[(const char *)s_45],
# ft_split_fn.c:33: 		s++;
	.loc 1 33 4 view .LVU24
	incq	%r14	# s
.LVL6:
# ft_split_fn.c:26: 			count++;
	.loc 1 26 9 view .LVU25
	incq	%r13	# count
.LVL7:
# ft_split_fn.c:27: 			was_c = 1;
	.loc 1 27 10 view .LVU26
	movl	$1, %eax	#, was_c
.LVL8:
	.loc 1 33 3 is_stmt 1 view .LVU27
	.loc 1 22 9 view .LVU28
	testb	%dil, %dil	# _36
	je	.L40	#,
.LVL9:
.L6:
	.loc 1 24 3 view .LVU29
# ft_split_fn.c:24: 		if (!was_c && is_sep(*s))
	.loc 1 24 6 is_stmt 0 view .LVU30
	testl	%eax, %eax	# was_c
	je	.L41	#,
	.loc 1 29 8 is_stmt 1 view .LVU31
# ft_split_fn.c:29: 		else if (is_sep(*s))
	.loc 1 29 12 is_stmt 0 view .LVU32
	call	*%r12	# is_sep
.LVL10:
# ft_split_fn.c:29: 		else if (is_sep(*s))
	.loc 1 29 11 discriminator 1 view .LVU33
	movzbl	%al, %eax	# tmp137, was_c
.L43:
.LVL11:
	.loc 1 33 3 is_stmt 1 view .LVU34
# ft_split_fn.c:22: 	while (*s)
	.loc 1 22 9 is_stmt 0 view .LVU35
	movsbl	1(%r14), %edi	# MEM[(const char *)s_45],
# ft_split_fn.c:33: 		s++;
	.loc 1 33 4 view .LVU36
	incq	%r14	# s
.LVL12:
	.loc 1 22 9 is_stmt 1 view .LVU37
	testb	%dil, %dil	# _36
	jne	.L6	#,
.L40:
	.loc 1 35 2 view .LVU38
# ft_split_fn.c:36: 		count++;
	.loc 1 36 8 is_stmt 0 view .LVU39
	cmpl	$1, %eax	#, was_c
	movq	%r13, %rdi	# count, count
	adcq	$1, %rdi	#, count
.LVL13:
.L2:
	.loc 1 37 2 is_stmt 1 view .LVU40
	.loc 1 37 2 is_stmt 0 view .LVU41
.LBE8:
.LBE11:
	.loc 1 73 2 is_stmt 1 view .LVU42
# ft_split_fn.c:73: 	str_ar = (char **)ft_calloc(str_count + 1, sizeof(char *));
	.loc 1 73 20 is_stmt 0 view .LVU43
	movl	$8, %esi	#,
	call	ft_calloc@PLT	#
.LVL14:
	movq	%rax, -64(%rbp)	# <retval>, %sfp
.LVL15:
	.loc 1 74 2 is_stmt 1 view .LVU44
# ft_split_fn.c:74: 	if (!str_ar)
	.loc 1 74 5 is_stmt 0 view .LVU45
	testq	%rax, %rax	# <retval>
	je	.L8	#,
.LVL16:
	.loc 1 77 9 is_stmt 1 view .LVU46
	movsbl	(%rbx), %edi	# *s_20(D),
	movl	$0, -52(%rbp)	#, %sfp
	testb	%dil, %dil	# prephitmp_89
	jne	.L21	#,
	jmp	.L1	#
.LVL17:
	.p2align 4,,10
	.p2align 3
.L12:
	.loc 1 80 4 view .LVU47
# ft_split_fn.c:79: 		while (*s && is_sep(*s))
	.loc 1 79 10 is_stmt 0 view .LVU48
	movsbl	1(%rbx), %edi	# MEM[(const char *)s_29],
# ft_split_fn.c:80: 			s++;
	.loc 1 80 5 view .LVU49
	incq	%rbx	# s
.LVL18:
	.loc 1 79 13 is_stmt 1 view .LVU50
	testb	%dil, %dil	# prephitmp_89
	je	.L11	#,
.LVL19:
.L21:
# ft_split_fn.c:79: 		while (*s && is_sep(*s))
	.loc 1 79 16 is_stmt 0 discriminator 1 view .LVU51
	call	*%r12	# is_sep
.LVL20:
# ft_split_fn.c:79: 		while (*s && is_sep(*s))
	.loc 1 79 13 discriminator 1 view .LVU52
	testb	%al, %al	# tmp139
	jne	.L12	#,
.L11:
	.loc 1 81 3 is_stmt 1 view .LVU53
.LVL21:
.LBB12:
.LBI12:
	.loc 1 40 12 view .LVU54
.LBB13:
	.loc 1 42 2 view .LVU55
	.loc 1 43 2 view .LVU56
	.loc 1 44 2 view .LVU57
	.loc 1 46 2 view .LVU58
# ft_split_fn.c:46: 	found = ft_strchr_fn(s, is_sep);
	.loc 1 46 10 is_stmt 0 view .LVU59
	movq	%r12, %rsi	# is_sep,
	movq	%rbx, %rdi	# s,
	call	ft_strchr_fn@PLT	#
.LVL22:
	.loc 1 47 2 is_stmt 1 view .LVU60
# ft_split_fn.c:50: 		len = found - s;
	.loc 1 50 7 is_stmt 0 view .LVU61
	movl	%eax, %edx	# found, len
	subl	%ebx, %edx	# s, len
# ft_split_fn.c:47: 	if (!found)
	.loc 1 47 5 view .LVU62
	testq	%rax, %rax	# found
	je	.L42	#,
.LVL23:
.L14:
	.loc 1 51 2 is_stmt 1 view .LVU63
# ft_split_fn.c:51: 	if (len == 0)
	.loc 1 51 5 is_stmt 0 view .LVU64
	testl	%edx, %edx	# len
	jne	.L15	#,
.LBE13:
.LBE12:
# ft_split_fn.c:77: 	while (*s)
	.loc 1 77 9 view .LVU65
	movsbl	(%rbx), %edi	# *s_98,
.LVL24:
.L16:
	.loc 1 86 3 is_stmt 1 view .LVU66
	.loc 1 77 9 view .LVU67
	testb	%dil, %dil	# prephitmp_89
	jne	.L21	#,
.LVL25:
.L1:
# ft_split_fn.c:89: }
	.loc 1 89 1 is_stmt 0 view .LVU68
	movq	-64(%rbp), %rax	# %sfp,
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
.LVL26:
	.loc 1 89 1 view .LVU69
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL27:
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
.LBB17:
.LBB9:
# ft_split_fn.c:29: 		else if (is_sep(*s))
	.loc 1 29 19 view .LVU70
	movsbl	(%r14), %edi	# MEM[(const char *)s_108],
	.loc 1 29 8 is_stmt 1 view .LVU71
# ft_split_fn.c:29: 		else if (is_sep(*s))
	.loc 1 29 12 is_stmt 0 view .LVU72
	call	*%r12	# is_sep
.LVL28:
# ft_split_fn.c:29: 		else if (is_sep(*s))
	.loc 1 29 11 discriminator 1 view .LVU73
	movzbl	%al, %eax	# tmp137, was_c
	jmp	.L43	#
.LVL29:
	.p2align 4,,10
	.p2align 3
.L15:
	.loc 1 29 11 discriminator 1 view .LVU74
.LBE9:
.LBE17:
# ft_split_fn.c:81: 		s_increase = append_next_sub_fn(str_ar + i, s, is_sep);
	.loc 1 81 42 view .LVU75
	movslq	-52(%rbp), %rax	# %sfp, i
# ft_split_fn.c:81: 		s_increase = append_next_sub_fn(str_ar + i, s, is_sep);
	.loc 1 81 16 view .LVU76
	movq	-64(%rbp), %rcx	# %sfp, <retval>
.LBB18:
.LBB14:
# ft_split_fn.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 35 view .LVU77
	incl	%edx	# tmp126
.LVL30:
# ft_split_fn.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 21 view .LVU78
	movl	$1, %esi	#,
	movslq	%edx, %rdi	# tmp126, tmp127
.LBE14:
.LBE18:
# ft_split_fn.c:81: 		s_increase = append_next_sub_fn(str_ar + i, s, is_sep);
	.loc 1 81 16 view .LVU79
	leaq	(%rcx,%rax,8), %r15	#, _7
.LBB19:
.LBB15:
	.loc 1 53 2 is_stmt 1 view .LVU80
# ft_split_fn.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 21 is_stmt 0 view .LVU81
	call	ft_calloc@PLT	#
.LVL31:
# ft_split_fn.c:53: 	*sub_str = (char *)ft_calloc(len + 1, sizeof(char));
	.loc 1 53 11 discriminator 1 view .LVU82
	movq	%rax, (%r15)	# _60, *_7
	.loc 1 54 2 is_stmt 1 view .LVU83
# ft_split_fn.c:54: 	if (!(*sub_str))
	.loc 1 54 5 is_stmt 0 view .LVU84
	testq	%rax, %rax	# _60
	je	.L17	#,
.LVL32:
	.loc 1 57 18 is_stmt 1 view .LVU85
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 10 is_stmt 0 view .LVU86
	movsbl	(%rbx), %edi	# *s_98,
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 18 view .LVU87
	testb	%dil, %dil	# _68
	je	.L1	#,
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 10 view .LVU88
	movq	%rbx, %r14	# s, _64
	xorl	%r13d, %r13d	# _88
	jmp	.L18	#
.LVL33:
	.p2align 4,,10
	.p2align 3
.L20:
	.loc 1 59 3 is_stmt 1 view .LVU89
# ft_split_fn.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 24 is_stmt 0 view .LVU90
	movzbl	(%r14), %esi	# MEM[(const char *)_110], _65
# ft_split_fn.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 21 view .LVU91
	movq	(%r15), %rax	# *_7, *_7
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 10 view .LVU92
	incq	%r14	# _64
# ft_split_fn.c:59: 		(*sub_str)[count] = s[count];
	.loc 1 59 21 view .LVU93
	movb	%sil, (%rax,%r13)	# _65, *_63
	.loc 1 60 3 is_stmt 1 view .LVU94
.LVL34:
	.loc 1 57 18 view .LVU95
	incq	%r13	# _88
.LVL35:
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 10 is_stmt 0 view .LVU96
	movsbl	(%r14), %edi	# MEM[(const char *)_64],
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 18 view .LVU97
	testb	%dil, %dil	# _68
	je	.L1	#,
.LVL36:
.L18:
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 22 discriminator 1 view .LVU98
	call	*%r12	# is_sep
.LVL37:
# ft_split_fn.c:57: 	while (s[count] && !is_sep(s[count]))
	.loc 1 57 18 discriminator 1 view .LVU99
	testb	%al, %al	# tmp143
	je	.L20	#,
.LBE15:
.LBE19:
# ft_split_fn.c:86: 		s += s_increase;
	.loc 1 86 5 view .LVU100
	movslq	%r13d, %rax	# _88, count
	addq	%rax, %rbx	# count, s
.LVL38:
# ft_split_fn.c:85: 			i++;
	.loc 1 85 5 view .LVU101
	cmpl	$1, %r13d	#, _88
	sbbl	$-1, -52(%rbp)	#, %sfp
# ft_split_fn.c:77: 	while (*s)
	.loc 1 77 9 view .LVU102
	movsbl	(%rbx), %edi	# *_116,
.LVL39:
	.loc 1 84 3 is_stmt 1 view .LVU103
	jmp	.L16	#
.LVL40:
	.p2align 4,,10
	.p2align 3
.L42:
.LBB20:
.LBB16:
	.loc 1 48 3 view .LVU104
# ft_split_fn.c:48: 		len = ft_strlen(s);
	.loc 1 48 9 is_stmt 0 view .LVU105
	movq	%rbx, %rdi	# s,
	call	ft_strlen@PLT	#
.LVL41:
# ft_split_fn.c:48: 		len = ft_strlen(s);
	.loc 1 48 7 discriminator 1 view .LVU106
	movl	%eax, %edx	# tmp141, len
.LVL42:
	.loc 1 48 7 discriminator 1 view .LVU107
	jmp	.L14	#
.LVL43:
.L17:
	.loc 1 48 7 discriminator 1 view .LVU108
.LBE16:
.LBE20:
	.loc 1 82 3 is_stmt 1 view .LVU109
	.loc 1 83 4 view .LVU110
# ft_split_fn.c:83: 			return (ft_free_2darr(str_ar), NULL);
	.loc 1 83 12 is_stmt 0 view .LVU111
	movq	-64(%rbp), %rdi	# %sfp,
	call	ft_free_2darr@PLT	#
.LVL44:
.L8:
# ft_split_fn.c:75: 		return (NULL);
	.loc 1 75 10 view .LVU112
	movq	$0, -64(%rbp)	#, %sfp
.LVL45:
	.loc 1 75 10 view .LVU113
	jmp	.L1	#
.LVL46:
.L22:
.LBB21:
.LBB10:
# ft_split_fn.c:22: 	while (*s)
	.loc 1 22 9 view .LVU114
	movl	$1, %edi	#, prephitmp_17
	jmp	.L2	#
.LBE10:
.LBE21:
	.cfi_endproc
.LFE53:
	.size	ft_split_fn, .-ft_split_fn
.Letext0:
	.file 2 "../includes/libft.h"
	.file 3 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x35c
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x10
	.long	.LASF25
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x11
	.long	.LASF26
	.byte	0x3
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x12
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x13
	.byte	0x8
	.uleb128 0x6
	.long	0x87
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x14
	.long	0x87
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x6
	.long	0x82
	.uleb128 0x6
	.long	0x8e
	.uleb128 0x8
	.long	.LASF13
	.byte	0x21
	.byte	0x8
	.long	0x35
	.long	0xb9
	.uleb128 0x2
	.long	0x9f
	.byte	0
	.uleb128 0x8
	.long	.LASF14
	.byte	0x2c
	.byte	0x7
	.long	0x82
	.long	0xd3
	.uleb128 0x2
	.long	0x9f
	.uleb128 0x2
	.long	0xd3
	.byte	0
	.uleb128 0x6
	.long	0xd8
	.uleb128 0x15
	.long	0xe7
	.long	0xe7
	.uleb128 0x2
	.long	0x87
	.byte	0
	.uleb128 0x1
	.byte	0x1
	.byte	0x2
	.long	.LASF15
	.uleb128 0x16
	.long	.LASF27
	.byte	0x2
	.byte	0x37
	.byte	0x6
	.long	0x100
	.uleb128 0x2
	.long	0x9a
	.byte	0
	.uleb128 0x8
	.long	.LASF16
	.byte	0x34
	.byte	0x7
	.long	0x80
	.long	0x11a
	.uleb128 0x2
	.long	0x35
	.uleb128 0x2
	.long	0x35
	.byte	0
	.uleb128 0x17
	.long	.LASF28
	.byte	0x1
	.byte	0x41
	.byte	0x8
	.long	0x9a
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.uleb128 0x1
	.byte	0x9c
	.long	0x2d4
	.uleb128 0x18
	.string	"s"
	.byte	0x1
	.byte	0x41
	.byte	0x20
	.long	0x9f
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x19
	.long	.LASF17
	.byte	0x1
	.byte	0x41
	.byte	0x28
	.long	0xd3
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x4
	.long	.LASF21
	.byte	0x43
	.byte	0xa
	.long	0x35
	.uleb128 0xb
	.long	.LASF18
	.byte	0x44
	.byte	0xa
	.long	0x9a
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x1a
	.string	"i"
	.byte	0x1
	.byte	0x45
	.byte	0x8
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0xb
	.long	.LASF19
	.byte	0x46
	.byte	0x8
	.long	0x48
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0xc
	.long	0x327
	.quad	.LBI6
	.byte	.LVU12
	.long	.LLRL5
	.byte	0x48
	.byte	0xe
	.long	0x1f8
	.uleb128 0x7
	.long	0x33d
	.long	.LLST6
	.long	.LVUS6
	.uleb128 0x7
	.long	0x334
	.long	.LLST7
	.long	.LVUS7
	.uleb128 0xd
	.long	.LLRL5
	.uleb128 0x5
	.long	0x348
	.long	.LLST8
	.long	.LVUS8
	.uleb128 0x5
	.long	0x353
	.long	.LLST9
	.long	.LVUS9
	.byte	0
	.byte	0
	.uleb128 0xc
	.long	0x2d4
	.quad	.LBI12
	.byte	.LVU54
	.long	.LLRL10
	.byte	0x51
	.byte	0x10
	.long	0x2a6
	.uleb128 0x7
	.long	0x2f9
	.long	.LLST11
	.long	.LVUS11
	.uleb128 0x7
	.long	0x2f0
	.long	.LLST12
	.long	.LVUS12
	.uleb128 0x1b
	.long	0x2e5
	.uleb128 0xd
	.long	.LLRL10
	.uleb128 0x5
	.long	0x304
	.long	.LLST13
	.long	.LVUS13
	.uleb128 0x5
	.long	0x30f
	.long	.LLST14
	.long	.LVUS14
	.uleb128 0x5
	.long	0x31b
	.long	.LLST15
	.long	.LVUS15
	.uleb128 0x9
	.quad	.LVL22
	.long	0xb9
	.long	0x279
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.byte	0
	.uleb128 0x9
	.quad	.LVL31
	.long	0x100
	.long	0x290
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x31
	.byte	0
	.uleb128 0xe
	.quad	.LVL41
	.long	0xa4
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x9
	.quad	.LVL14
	.long	0x100
	.long	0x2bd
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x38
	.byte	0
	.uleb128 0xe
	.quad	.LVL44
	.long	0xee
	.uleb128 0x3
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.byte	0x91
	.sleb128 -80
	.byte	0x6
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.LASF29
	.byte	0x1
	.byte	0x28
	.byte	0xc
	.long	0x48
	.byte	0x1
	.long	0x327
	.uleb128 0xa
	.long	.LASF20
	.byte	0x28
	.byte	0x26
	.long	0x9a
	.uleb128 0xf
	.string	"s"
	.byte	0x28
	.byte	0x3b
	.long	0x9f
	.uleb128 0xa
	.long	.LASF17
	.byte	0x28
	.byte	0x43
	.long	0xd3
	.uleb128 0x4
	.long	.LASF22
	.byte	0x2a
	.byte	0x7
	.long	0x48
	.uleb128 0x1d
	.string	"len"
	.byte	0x1
	.byte	0x2b
	.byte	0x7
	.long	0x48
	.uleb128 0x4
	.long	.LASF23
	.byte	0x2c
	.byte	0x8
	.long	0x82
	.byte	0
	.uleb128 0x1e
	.long	.LASF30
	.byte	0x1
	.byte	0xf
	.byte	0xf
	.long	0x35
	.byte	0x1
	.uleb128 0xf
	.string	"s"
	.byte	0xf
	.byte	0x2c
	.long	0x9f
	.uleb128 0xa
	.long	.LASF17
	.byte	0xf
	.byte	0x34
	.long	0xd3
	.uleb128 0x4
	.long	.LASF22
	.byte	0x11
	.byte	0x9
	.long	0x35
	.uleb128 0x4
	.long	.LASF24
	.byte	0x12
	.byte	0x7
	.long	0x48
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 2
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU66
	.uleb128 .LVU70
	.uleb128 .LVU101
	.uleb128 .LVU104
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU69
	.uleb128 .LVU69
	.uleb128 .LVU70
	.uleb128 .LVU70
	.uleb128 .LVU114
	.uleb128 .LVU114
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL26-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL26-.Ltext0
	.uleb128 .LVL27-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL46-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS2:
	.uleb128 .LVU44
	.uleb128 .LVU47
	.uleb128 .LVU47
	.uleb128 .LVU68
	.uleb128 .LVU74
	.uleb128 .LVU113
.LLST2:
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL17-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL45-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -80
	.byte	0
.LVUS3:
	.uleb128 .LVU46
	.uleb128 .LVU47
	.uleb128 .LVU66
	.uleb128 .LVU68
.LLST3:
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LVL17-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL24-.Ltext0
	.uleb128 .LVL25-.Ltext0
	.uleb128 0x3
	.byte	0x91
	.sleb128 -68
	.byte	0
.LVUS4:
	.uleb128 .LVU108
	.uleb128 .LVU112
.LLST4:
	.byte	0x4
	.uleb128 .LVL43-.Ltext0
	.uleb128 .LVL44-.Ltext0
	.uleb128 0x3
	.byte	0x9
	.byte	0xff
	.byte	0x9f
	.byte	0
.LVUS6:
	.uleb128 .LVU12
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU41
	.uleb128 .LVU70
	.uleb128 .LVU74
	.uleb128 .LVU114
	.uleb128 0
.LLST6:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0
.LVUS7:
	.uleb128 .LVU8
	.uleb128 .LVU10
	.uleb128 .LVU10
	.uleb128 .LVU18
	.uleb128 .LVU21
	.uleb128 .LVU25
	.uleb128 .LVU25
	.uleb128 .LVU28
	.uleb128 .LVU28
	.uleb128 .LVU40
	.uleb128 .LVU70
	.uleb128 .LVU74
.LLST7:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL6-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL6-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x3
	.byte	0x7e
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0
.LVUS8:
	.uleb128 .LVU16
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU26
	.uleb128 .LVU26
	.uleb128 .LVU27
	.uleb128 .LVU27
	.uleb128 .LVU40
	.uleb128 .LVU70
	.uleb128 .LVU74
	.uleb128 .LVU114
	.uleb128 0
.LLST8:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL7-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL7-.Ltext0
	.uleb128 .LVL8-.Ltext0
	.uleb128 0x3
	.byte	0x7d
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL27-.Ltext0
	.uleb128 .LVL29-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0
.LVUS9:
	.uleb128 .LVU17
	.uleb128 .LVU21
	.uleb128 .LVU21
	.uleb128 .LVU22
	.uleb128 .LVU27
	.uleb128 .LVU33
	.uleb128 .LVU34
	.uleb128 .LVU40
	.uleb128 .LVU114
	.uleb128 0
.LLST9:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL4-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL4-.Ltext0
	.uleb128 .LVL5-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL8-.Ltext0
	.uleb128 .LVL10-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL46-.Ltext0
	.uleb128 .LFE53-.Ltext0
	.uleb128 0x2
	.byte	0x31
	.byte	0x9f
	.byte	0
.LVUS11:
	.uleb128 .LVU54
	.uleb128 .LVU66
	.uleb128 .LVU74
	.uleb128 .LVU103
	.uleb128 .LVU104
	.uleb128 .LVU108
.LLST11:
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0
.LVUS12:
	.uleb128 .LVU54
	.uleb128 .LVU66
	.uleb128 .LVU74
	.uleb128 .LVU101
	.uleb128 .LVU104
	.uleb128 .LVU108
.LLST12:
	.byte	0x4
	.uleb128 .LVL21-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL38-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0
.LVUS13:
	.uleb128 .LVU85
	.uleb128 .LVU89
	.uleb128 .LVU89
	.uleb128 .LVU95
	.uleb128 .LVU95
	.uleb128 .LVU96
	.uleb128 .LVU98
	.uleb128 .LVU103
.LLST13:
	.byte	0x4
	.uleb128 .LVL32-.Ltext0
	.uleb128 .LVL33-.Ltext0
	.uleb128 0x2
	.byte	0x30
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL33-.Ltext0
	.uleb128 .LVL34-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL34-.Ltext0
	.uleb128 .LVL35-.Ltext0
	.uleb128 0x3
	.byte	0x7d
	.sleb128 1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL36-.Ltext0
	.uleb128 .LVL39-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0
.LVUS14:
	.uleb128 .LVU63
	.uleb128 .LVU66
	.uleb128 .LVU74
	.uleb128 .LVU78
	.uleb128 .LVU78
	.uleb128 .LVU82
	.uleb128 .LVU107
	.uleb128 .LVU108
.LLST14:
	.byte	0x4
	.uleb128 .LVL23-.Ltext0
	.uleb128 .LVL24-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL29-.Ltext0
	.uleb128 .LVL30-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL30-.Ltext0
	.uleb128 .LVL31-1-.Ltext0
	.uleb128 0x3
	.byte	0x71
	.sleb128 -1
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL42-.Ltext0
	.uleb128 .LVL43-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.LVUS15:
	.uleb128 .LVU60
	.uleb128 .LVU63
	.uleb128 .LVU104
	.uleb128 .LVU106
.LLST15:
	.byte	0x4
	.uleb128 .LVL22-.Ltext0
	.uleb128 .LVL23-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL40-.Ltext0
	.uleb128 .LVL41-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_rnglists,"",@progbits
.Ldebug_ranges0:
	.long	.Ldebug_ranges3-.Ldebug_ranges2
.Ldebug_ranges2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.LLRL5:
	.byte	0x4
	.uleb128 .LBB6-.Ltext0
	.uleb128 .LBE6-.Ltext0
	.byte	0x4
	.uleb128 .LBB11-.Ltext0
	.uleb128 .LBE11-.Ltext0
	.byte	0x4
	.uleb128 .LBB17-.Ltext0
	.uleb128 .LBE17-.Ltext0
	.byte	0x4
	.uleb128 .LBB21-.Ltext0
	.uleb128 .LBE21-.Ltext0
	.byte	0
.LLRL10:
	.byte	0x4
	.uleb128 .LBB12-.Ltext0
	.uleb128 .LBE12-.Ltext0
	.byte	0x4
	.uleb128 .LBB18-.Ltext0
	.uleb128 .LBE18-.Ltext0
	.byte	0x4
	.uleb128 .LBB19-.Ltext0
	.uleb128 .LBE19-.Ltext0
	.byte	0x4
	.uleb128 .LBB20-.Ltext0
	.uleb128 .LBE20-.Ltext0
	.byte	0
.Ldebug_ranges3:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF26:
	.string	"size_t"
.LASF22:
	.string	"count"
.LASF24:
	.string	"was_c"
.LASF13:
	.string	"ft_strlen"
.LASF20:
	.string	"sub_str"
.LASF28:
	.string	"ft_split_fn"
.LASF3:
	.string	"long unsigned int"
.LASF7:
	.string	"short unsigned int"
.LASF6:
	.string	"unsigned char"
.LASF29:
	.string	"append_next_sub_fn"
.LASF16:
	.string	"ft_calloc"
.LASF30:
	.string	"get_str_count_fn"
.LASF17:
	.string	"is_sep"
.LASF8:
	.string	"unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF14:
	.string	"ft_strchr_fn"
.LASF21:
	.string	"str_count"
.LASF23:
	.string	"found"
.LASF11:
	.string	"char"
.LASF19:
	.string	"s_increase"
.LASF10:
	.string	"short int"
.LASF27:
	.string	"ft_free_2darr"
.LASF2:
	.string	"long int"
.LASF5:
	.string	"long double"
.LASF9:
	.string	"signed char"
.LASF25:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF15:
	.string	"_Bool"
.LASF18:
	.string	"str_ar"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"ft_split_fn.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

/515            0           0     0     644     12676     `
	.file	"ft_iswhitespace.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_iswhitespace.c"
	.p2align 4
	.globl	ft_iswhitespace
	.type	ft_iswhitespace, @function
ft_iswhitespace:
.LVL0:
.LFB51:
	.file 1 "ft_iswhitespace.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_iswhitespace.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 25 is_stmt 0 view .LVU4
	leal	-9(%rdi), %eax	#, tmp90
# ft_iswhitespace.c:20: }
	.loc 1 20 1 view .LVU5
	popq	%rbp	#
	.cfi_def_cfa 7, 8
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 25 view .LVU6
	cmpb	$4, %al	#, tmp90
	setbe	%al	#, tmp92
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 8 view .LVU7
	cmpb	$32, %dil	#, c
	sete	%dl	#, tmp94
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 14 view .LVU8
	orl	%edx, %eax	# tmp94, tmp89
# ft_iswhitespace.c:20: }
	.loc 1 20 1 view .LVU9
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_iswhitespace, .-ft_iswhitespace
	.p2align 4
	.globl	contains_non_white_spcace
	.type	contains_non_white_spcace, @function
contains_non_white_spcace:
.LVL1:
.LFB52:
	.loc 1 23 1 is_stmt 1 view -0
	.cfi_startproc
	.loc 1 23 1 is_stmt 0 view .LVU11
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
1:	call	*mcount@GOTPCREL(%rip)
# ft_iswhitespace.c:23: {
	.loc 1 23 1 view .LVU12
	.loc 1 24 2 is_stmt 1 view .LVU13
# ft_iswhitespace.c:24: 	if (!str)
	.loc 1 24 5 is_stmt 0 view .LVU14
	testq	%rdi, %rdi	# str
	je	.L7	#,
	.loc 1 26 9 is_stmt 1 view .LVU15
	movzbl	(%rdi), %edx	# *str_7(D), _2
	testb	%dl, %dl	# _2
	jne	.L5	#,
	jmp	.L7	#
	.p2align 4,,10
	.p2align 3
.L9:
	.loc 1 30 3 view .LVU16
# ft_iswhitespace.c:26: 	while (*str)
	.loc 1 26 9 is_stmt 0 view .LVU17
	movzbl	1(%rdi), %edx	# MEM[(char *)str_9], _2
# ft_iswhitespace.c:30: 		str++;
	.loc 1 30 6 view .LVU18
	incq	%rdi	# str
.LVL2:
	.loc 1 26 9 is_stmt 1 view .LVU19
	testb	%dl, %dl	# _2
	je	.L3	#,
.L5:
	.loc 1 28 3 view .LVU20
.LVL3:
.LBB4:
.LBI4:
	.loc 1 15 6 view .LVU21
.LBB5:
	.loc 1 17 2 view .LVU22
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 25 is_stmt 0 view .LVU23
	leal	-9(%rdx), %eax	#, tmp92
	cmpb	$4, %al	#, tmp92
	setbe	%al	#, tmp94
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 8 view .LVU24
	cmpb	$32, %dl	#, _2
	sete	%cl	#, tmp96
# ft_iswhitespace.c:17: 	if (c == 32 || (c >= 9 && c <= 13))
	.loc 1 17 14 view .LVU25
	orl	%ecx, %eax	# tmp96, tmp97
	xorl	$1, %eax	#, tmp98
.LBE5:
.LBE4:
# ft_iswhitespace.c:28: 		if (!ft_iswhitespace(*str) || *str == '\n')
	.loc 1 28 30 discriminator 1 view .LVU26
	cmpb	$10, %dl	#, _2
	sete	%dl	#, tmp100
	orb	%dl, %al	# tmp100, <retval>
	je	.L9	#,
.L3:
# ft_iswhitespace.c:33: }
	.loc 1 33 1 view .LVU27
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
	.p2align 4,,10
	.p2align 3
.L7:
	.cfi_restore_state
# ft_iswhitespace.c:25: 		return (false);
	.loc 1 25 10 view .LVU28
	xorl	%eax, %eax	# <retval>
# ft_iswhitespace.c:33: }
	.loc 1 33 1 view .LVU29
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE52:
	.size	contains_non_white_spcace, .-contains_non_white_spcace
.Letext0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x12d
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x2
	.long	.LASF14
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x4
	.byte	0x8
	.long	0x7a
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x5
	.long	.LASF15
	.byte	0x1
	.byte	0x16
	.byte	0x6
	.long	0xee
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.uleb128 0x1
	.byte	0x9c
	.long	0xee
	.uleb128 0x6
	.string	"str"
	.byte	0x1
	.byte	0x16
	.byte	0x26
	.long	0x74
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x7
	.long	0xf5
	.quad	.LBI4
	.byte	.LVU21
	.quad	.LBB4
	.quad	.LBE4-.LBB4
	.byte	0x1
	.byte	0x1c
	.byte	0x8
	.uleb128 0x8
	.long	0x106
	.long	.LLST1
	.long	.LVUS1
	.byte	0
	.byte	0
	.uleb128 0x1
	.byte	0x1
	.byte	0x2
	.long	.LASF13
	.uleb128 0x9
	.long	.LASF16
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.long	0xee
	.byte	0x1
	.long	0x111
	.uleb128 0xa
	.string	"c"
	.byte	0x1
	.byte	0xf
	.byte	0x1b
	.long	0x7a
	.byte	0
	.uleb128 0xb
	.long	0xf5
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0xc
	.long	0x106
	.uleb128 0x1
	.byte	0x55
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x2138
	.uleb128 0xb
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x57
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LFE52-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0
.LVUS1:
	.uleb128 .LVU21
	.uleb128 .LVU23
.LLST1:
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF7:
	.string	"short unsigned int"
.LASF8:
	.string	"unsigned int"
.LASF15:
	.string	"contains_non_white_spcace"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF14:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF13:
	.string	"_Bool"
.LASF16:
	.string	"ft_iswhitespace"
.LASF9:
	.string	"signed char"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_iswhitespace.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
arr_append.o/   0           0     0     644     18881     `
	.file	"arr_append.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "arr_append.c"
	.p2align 4
	.globl	arr_append
	.type	arr_append, @function
arr_append:
.LVL0:
.LFB51:
	.file 1 "arr_append.c"
	.loc 1 20 1 view -0
	.cfi_startproc
	.loc 1 20 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
1:	call	*mcount@GOTPCREL(%rip)
# arr_append.c:20: {
	.loc 1 20 1 view .LVU2
	.loc 1 21 2 is_stmt 1 view .LVU3
	.loc 1 23 2 view .LVU4
	.loc 1 25 2 view .LVU5
	.loc 1 27 2 view .LVU6
# arr_append.c:25: 	if (!new_data)
	.loc 1 25 5 is_stmt 0 view .LVU7
	testq	%rsi, %rsi	# new_data
# arr_append.c:20: {
	.loc 1 20 1 view .LVU8
	movl	%edx, %r15d	# tmp126, data_size
	movq	%rdi, %r13	# tmp124, arr
	movq	%rsi, %r14	# tmp125, new_data
# arr_append.c:25: 	if (!new_data)
	.loc 1 25 5 view .LVU9
	sete	%al	#, tmp106
# arr_append.c:27: 	if (!arr)
	.loc 1 27 5 view .LVU10
	testq	%rdi, %rdi	# arr
	sete	%dl	#, tmp108
.LVL1:
	.loc 1 27 5 view .LVU11
	orb	%dl, %al	# tmp108, tmp129
	jne	.L5	#,
	testl	%r15d, %r15d	# data_size
	je	.L5	#,
	.loc 1 29 2 is_stmt 1 view .LVU12
# arr_append.c:29: 	if (!*arr && old_arr_len)
	.loc 1 29 7 is_stmt 0 view .LVU13
	movq	(%rdi), %rsi	# *arr_15(D), _1
.LVL2:
# arr_append.c:29: 	if (!*arr && old_arr_len)
	.loc 1 29 12 discriminator 1 view .LVU14
	testl	%ecx, %ecx	# old_arr_len
	je	.L7	#,
	testq	%rsi, %rsi	# _1
	je	.L5	#,
.L7:
# arr_append.c:31: 	new = malloc((old_arr_len + 1) * data_size);
	.loc 1 31 28 view .LVU15
	leal	1(%rcx), %ebx	#, tmp116
	movq	%rsi, -56(%rbp)	# _1, %sfp
	.loc 1 31 2 is_stmt 1 view .LVU16
# arr_append.c:31: 	new = malloc((old_arr_len + 1) * data_size);
	.loc 1 31 33 is_stmt 0 view .LVU17
	imull	%r15d, %ebx	# data_size, _3
# arr_append.c:31: 	new = malloc((old_arr_len + 1) * data_size);
	.loc 1 31 8 view .LVU18
	movslq	%ebx, %rdi	# _3, _3
.LVL3:
	.loc 1 31 8 view .LVU19
	call	malloc@PLT	#
.LVL4:
	.loc 1 31 8 view .LVU20
	movq	%rax, %r12	# tmp128, tmp118
.LVL5:
	.loc 1 32 2 is_stmt 1 view .LVU21
# arr_append.c:32: 	if (!new)
	.loc 1 32 5 is_stmt 0 view .LVU22
	testq	%rax, %rax	# tmp118
	je	.L5	#,
	.loc 1 34 2 is_stmt 1 view .LVU23
# arr_append.c:34: 	ft_memcpy(new, *arr, old_arr_len * data_size);
	.loc 1 34 35 is_stmt 0 view .LVU24
	subl	%r15d, %ebx	# data_size, tmp119
# arr_append.c:34: 	ft_memcpy(new, *arr, old_arr_len * data_size);
	.loc 1 34 2 view .LVU25
	movq	-56(%rbp), %rsi	# %sfp, _1
	movq	%rax, %rdi	# tmp118,
	movslq	%ebx, %rbx	# tmp119, _6
	movq	%rbx, %rdx	# _6,
	call	ft_memcpy@PLT	#
.LVL6:
	.loc 1 35 2 is_stmt 1 view .LVU26
	leaq	(%r12,%rbx), %rdi	#, tmp121
	movslq	%r15d, %rdx	# data_size, data_size
	movq	%r14, %rsi	# new_data,
	call	ft_memcpy@PLT	#
.LVL7:
	.loc 1 36 2 view .LVU27
	movq	0(%r13), %rdi	# *arr_15(D), *arr_15(D)
	call	free@PLT	#
.LVL8:
	.loc 1 37 2 view .LVU28
# arr_append.c:37: 	*arr = new;
	.loc 1 37 7 is_stmt 0 view .LVU29
	movq	%r12, 0(%r13)	# tmp118, *arr_15(D)
	.loc 1 38 2 is_stmt 1 view .LVU30
# arr_append.c:39: }
	.loc 1 39 1 is_stmt 0 view .LVU31
	addq	$24, %rsp	#,
# arr_append.c:38: 	return (true);
	.loc 1 38 9 view .LVU32
	movl	$1, %eax	#, <retval>
# arr_append.c:39: }
	.loc 1 39 1 view .LVU33
	popq	%rbx	#
	popq	%r12	#
.LVL9:
	.loc 1 39 1 view .LVU34
	popq	%r13	#
.LVL10:
	.loc 1 39 1 view .LVU35
	popq	%r14	#
.LVL11:
	.loc 1 39 1 view .LVU36
	popq	%r15	#
.LVL12:
	.loc 1 39 1 view .LVU37
	popq	%rbp	#
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret	
.LVL13:
	.p2align 4,,10
	.p2align 3
.L5:
	.cfi_restore_state
	.loc 1 39 1 view .LVU38
	addq	$24, %rsp	#,
# arr_append.c:24: 		return (false);
	.loc 1 24 10 view .LVU39
	xorl	%eax, %eax	# <retval>
# arr_append.c:39: }
	.loc 1 39 1 view .LVU40
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
.LVL14:
	.loc 1 39 1 view .LVU41
	popq	%r14	#
.LVL15:
	.loc 1 39 1 view .LVU42
	popq	%r15	#
.LVL16:
	.loc 1 39 1 view .LVU43
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	arr_append, .-arr_append
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 4 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
	.file 5 "../includes/libft.h"
	.file 6 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x200
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x8
	.long	.LASF22
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x4
	.long	.LASF10
	.byte	0x2
	.byte	0xd6
	.byte	0x17
	.long	0x41
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x9
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x4
	.long	.LASF11
	.byte	0x3
	.byte	0x26
	.byte	0x17
	.long	0x5d
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF12
	.uleb128 0xa
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF13
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF14
	.uleb128 0x7
	.long	0xa1
	.uleb128 0xb
	.uleb128 0x4
	.long	.LASF15
	.byte	0x4
	.byte	0x18
	.byte	0x13
	.long	0x79
	.uleb128 0xc
	.long	.LASF23
	.byte	0x6
	.value	0x2af
	.byte	0xd
	.long	0xc1
	.uleb128 0x3
	.long	0x8c
	.byte	0
	.uleb128 0xd
	.long	.LASF16
	.byte	0x5
	.byte	0x26
	.byte	0x7
	.long	0x8c
	.long	0xe1
	.uleb128 0x3
	.long	0x8c
	.uleb128 0x3
	.long	0x9c
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0xe
	.long	.LASF17
	.byte	0x6
	.value	0x2a0
	.byte	0xe
	.long	0x8c
	.long	0xf8
	.uleb128 0x3
	.long	0x35
	.byte	0
	.uleb128 0xf
	.long	.LASF24
	.byte	0x1
	.byte	0x13
	.byte	0x6
	.long	0x1f7
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0x1f7
	.uleb128 0x10
	.string	"arr"
	.byte	0x1
	.byte	0x13
	.byte	0x18
	.long	0x1fe
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x5
	.long	.LASF18
	.byte	0x23
	.long	0x8c
	.long	.LLST1
	.long	.LVUS1
	.uleb128 0x5
	.long	.LASF19
	.byte	0x31
	.long	0x48
	.long	.LLST2
	.long	.LVUS2
	.uleb128 0x5
	.long	.LASF20
	.byte	0x40
	.long	0x48
	.long	.LLST3
	.long	.LVUS3
	.uleb128 0x11
	.string	"new"
	.byte	0x1
	.byte	0x15
	.byte	0x8
	.long	0x8c
	.long	.LLST4
	.long	.LVUS4
	.uleb128 0x6
	.quad	.LVL4
	.long	0xe1
	.long	0x196
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x8
	.byte	0x73
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x6
	.quad	.LVL6
	.long	0xc1
	.long	0x1bc
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7c
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x4
	.byte	0x91
	.sleb128 -72
	.byte	0x6
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.uleb128 0x6
	.quad	.LVL7
	.long	0xc1
	.long	0x1e9
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x5
	.byte	0x7c
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.uleb128 0x2
	.uleb128 0x1
	.byte	0x51
	.uleb128 0x8
	.byte	0x7f
	.sleb128 0
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.byte	0
	.uleb128 0x12
	.quad	.LVL8
	.long	0xae
	.byte	0
	.uleb128 0x1
	.byte	0x1
	.byte	0x2
	.long	.LASF21
	.uleb128 0x7
	.long	0x8c
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x49
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x7e
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0x21
	.sleb128 1
	.uleb128 0x3b
	.uleb128 0x21
	.sleb128 19
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x48
	.byte	0x1
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0x21
	.sleb128 8
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x26
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU19
	.uleb128 .LVU19
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU41
	.uleb128 .LVU41
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL14-.Ltext0
	.uleb128 0x1
	.byte	0x5d
	.byte	0x4
	.uleb128 .LVL14-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.LVUS1:
	.uleb128 0
	.uleb128 .LVU14
	.uleb128 .LVU14
	.uleb128 .LVU36
	.uleb128 .LVU36
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU42
	.uleb128 .LVU42
	.uleb128 0
.LLST1:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL2-.Ltext0
	.uleb128 0x1
	.byte	0x54
	.byte	0x4
	.uleb128 .LVL2-.Ltext0
	.uleb128 .LVL11-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL11-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL15-.Ltext0
	.uleb128 0x1
	.byte	0x5e
	.byte	0x4
	.uleb128 .LVL15-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.byte	0
.LVUS2:
	.uleb128 0
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 .LVU37
	.uleb128 .LVU37
	.uleb128 .LVU38
	.uleb128 .LVU38
	.uleb128 .LVU43
	.uleb128 .LVU43
	.uleb128 0
.LLST2:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x51
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL12-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL12-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0x4
	.uleb128 .LVL13-.Ltext0
	.uleb128 .LVL16-.Ltext0
	.uleb128 0x1
	.byte	0x5f
	.byte	0x4
	.uleb128 .LVL16-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.byte	0
.LVUS3:
	.uleb128 0
	.uleb128 .LVU20
	.uleb128 .LVU20
	.uleb128 0
.LLST3:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 0x1
	.byte	0x52
	.byte	0x4
	.uleb128 .LVL4-1-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x52
	.byte	0x9f
	.byte	0
.LVUS4:
	.uleb128 .LVU21
	.uleb128 .LVU26
	.uleb128 .LVU26
	.uleb128 .LVU34
	.uleb128 .LVU34
	.uleb128 .LVU35
	.uleb128 .LVU35
	.uleb128 .LVU38
.LLST4:
	.byte	0x4
	.uleb128 .LVL5-.Ltext0
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 0x1
	.byte	0x50
	.byte	0x4
	.uleb128 .LVL6-1-.Ltext0
	.uleb128 .LVL9-.Ltext0
	.uleb128 0x1
	.byte	0x5c
	.byte	0x4
	.uleb128 .LVL9-.Ltext0
	.uleb128 .LVL10-.Ltext0
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.byte	0x4
	.uleb128 .LVL10-.Ltext0
	.uleb128 .LVL13-.Ltext0
	.uleb128 0x3
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF10:
	.string	"size_t"
.LASF23:
	.string	"free"
.LASF3:
	.string	"long unsigned int"
.LASF14:
	.string	"long long unsigned int"
.LASF18:
	.string	"new_data"
.LASF19:
	.string	"data_size"
.LASF16:
	.string	"ft_memcpy"
.LASF15:
	.string	"uint8_t"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"__uint8_t"
.LASF13:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF21:
	.string	"_Bool"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF20:
	.string	"old_arr_len"
.LASF5:
	.string	"long double"
.LASF22:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF12:
	.string	"short int"
.LASF24:
	.string	"arr_append"
.LASF17:
	.string	"malloc"
	.section	.debug_line_str,"MS",@progbits,1
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
.LASF0:
	.string	"arr_append.c"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

ft_free.o/      0           0     0     644     9253      `
	.file	"ft_free.c"
# GNU C17 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)
#	compiled by GNU C version 13.2.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -march=skylake -mmmx -mpopcnt -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -mno-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx512er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx5124vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vbmi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bitalg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lwp -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -mno-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-sha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg -mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -mno-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp16 -mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection
	.text
.Ltext0:
	.file 0 "/home/fabi/42/cub3D/libft" "ft_free.c"
	.p2align 4
	.globl	ft_free
	.type	ft_free, @function
ft_free:
.LVL0:
.LFB51:
	.file 1 "ft_free.c"
	.loc 1 16 1 view -0
	.cfi_startproc
	.loc 1 16 1 is_stmt 0 view .LVU1
	endbr64	
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$8, %rsp	#,
	.cfi_offset 3, -24
1:	call	*mcount@GOTPCREL(%rip)
# ft_free.c:16: {
	.loc 1 16 1 view .LVU2
	.loc 1 17 2 is_stmt 1 view .LVU3
# ft_free.c:16: {
	.loc 1 16 1 is_stmt 0 view .LVU4
	movq	%rdi, %rbx	# tmp85, ptr
# ft_free.c:17: 	if (!ptr)
	.loc 1 17 5 view .LVU5
	testq	%rdi, %rdi	# ptr
	je	.L6	#,
	.loc 1 19 2 is_stmt 1 view .LVU6
	movq	(%rdi), %rdi	# *ptr_3(D), *ptr_3(D)
.LVL1:
	.loc 1 19 2 is_stmt 0 view .LVU7
	call	free@PLT	#
.LVL2:
	.loc 1 20 2 is_stmt 1 view .LVU8
# ft_free.c:20: 	*ptr = NULL;
	.loc 1 20 7 is_stmt 0 view .LVU9
	movq	$0, (%rbx)	#, *ptr_3(D)
.L6:
# ft_free.c:21: }
	.loc 1 21 1 view .LVU10
	movq	-8(%rbp), %rbx	#,
.LVL3:
	.loc 1 21 1 view .LVU11
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE51:
	.size	ft_free, .-ft_free
.Letext0:
	.file 2 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0xda
	.value	0x5
	.byte	0x1
	.byte	0x8
	.long	.Ldebug_abbrev0
	.uleb128 0x2
	.long	.LASF13
	.byte	0x1d
	.long	.LASF0
	.long	.LASF1
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF2
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF3
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x1
	.byte	0x8
	.byte	0x5
	.long	.LASF4
	.uleb128 0x1
	.byte	0x10
	.byte	0x4
	.long	.LASF5
	.uleb128 0x1
	.byte	0x1
	.byte	0x8
	.long	.LASF6
	.uleb128 0x1
	.byte	0x2
	.byte	0x7
	.long	.LASF7
	.uleb128 0x1
	.byte	0x4
	.byte	0x7
	.long	.LASF8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF9
	.uleb128 0x1
	.byte	0x2
	.byte	0x5
	.long	.LASF10
	.uleb128 0x4
	.byte	0x8
	.uleb128 0x1
	.byte	0x1
	.byte	0x6
	.long	.LASF11
	.uleb128 0x1
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x5
	.long	.LASF14
	.byte	0x2
	.value	0x2af
	.byte	0xd
	.long	0x97
	.uleb128 0x6
	.long	0x74
	.byte	0
	.uleb128 0x7
	.long	.LASF15
	.byte	0x1
	.byte	0xf
	.byte	0x6
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.uleb128 0x1
	.byte	0x9c
	.long	0xd7
	.uleb128 0x8
	.string	"ptr"
	.byte	0x1
	.byte	0xf
	.byte	0x15
	.long	0xd7
	.long	.LLST0
	.long	.LVUS0
	.uleb128 0x9
	.quad	.LVL2
	.long	0x84
	.byte	0
	.uleb128 0xa
	.byte	0x8
	.long	0x74
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x1f
	.uleb128 0x1b
	.uleb128 0x1f
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x7a
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.uleb128 0x2137
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x48
	.byte	0
	.uleb128 0x7d
	.uleb128 0x1
	.uleb128 0x7f
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_loc3-.Ldebug_loc2
.Ldebug_loc2:
	.value	0x5
	.byte	0x8
	.byte	0
	.long	0
.Ldebug_loc0:
.LVUS0:
	.uleb128 0
	.uleb128 .LVU7
	.uleb128 .LVU7
	.uleb128 .LVU11
	.uleb128 .LVU11
	.uleb128 0
.LLST0:
	.byte	0x4
	.uleb128 .LVL0-.Ltext0
	.uleb128 .LVL1-.Ltext0
	.uleb128 0x1
	.byte	0x55
	.byte	0x4
	.uleb128 .LVL1-.Ltext0
	.uleb128 .LVL3-.Ltext0
	.uleb128 0x1
	.byte	0x53
	.byte	0x4
	.uleb128 .LVL3-.Ltext0
	.uleb128 .LFE51-.Ltext0
	.uleb128 0x4
	.byte	0xa3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.byte	0
.Ldebug_loc3:
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF4:
	.string	"long long int"
.LASF8:
	.string	"unsigned int"
.LASF14:
	.string	"free"
.LASF3:
	.string	"long unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF13:
	.ascii	"GNU C17 13.2.0 -march=skylake -mmmx -mpopcnt -msse -msse2 -m"
	.ascii	"sse3 -mssse3 -msse4.1 -msse4.2 -mavx -mno-sse4a -mno-fma4 -m"
	.ascii	"no-xop -mfma -mno-avx512f -mbmi -mbmi2 -maes -mpclmul -mno-a"
	.ascii	"vx512vl -mno-avx512bw -mno-avx512dq -mno-avx512cd -mno-avx51"
	.ascii	"2er -mno-avx512pf -mno-avx512vbmi -mno-avx512ifma -mno-avx51"
	.ascii	"24vnniw -mno-avx5124fmaps -mno-avx512vpopcntdq -mno-avx512vb"
	.ascii	"mi2 -mno-gfni -mno-vpclmulqdq -mno-avx512vnni -mno-avx512bit"
	.ascii	"alg -mno-avx512bf16 -mno-avx512vp2intersect -mno-3dnow -madx"
	.ascii	" -mabm -mno-cldemote -mclflushopt -mno-clwb -mno-clzero -mcx"
	.ascii	"16 -mno-enqcmd -mf16c -mfsgsbase -mfxsr -mhle -msahf -mno-lw"
	.ascii	"p -mlzcnt -mmovbe -mno-movdir64b -mno-movdiri -mno-mwaitx -m"
	.ascii	"no-pconfig -mno-pku -mno-prefetchwt1 -mprfchw -mno-ptwrite -"
	.ascii	"mno-rdpid -mrdrnd -mrdseed -mrtm -mno-serialize -msgx -mno-s"
	.ascii	"ha -mno-shstk -mno-tbm -mno-tsxldtrk -mno-vaes -mno-waitpkg "
	.ascii	"-mno-wbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-amx-"
	.ascii	"tile -mno-amx-int8 -mno-amx-bf16 -mno-uintr -mno-hreset -mno"
	.ascii	"-kl -mno-widekl -mno-avxvnni -mno-avx512fp16 -mno-avxifma -m"
	.ascii	"no-avxvnniint8 -mno-avxneconvert -mno-cmpccxadd -mno-amx-fp1"
	.ascii	"6 "
	.string	"-mno-prefetchi -mno-raoint -mno-amx-complex --param=l1-cache-size=32 --param=l1-cache-line-size=64 --param=l2-cache-size=16384 -mtune=skylake -mavx2 -g -Ofast -p -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection"
.LASF6:
	.string	"unsigned char"
.LASF11:
	.string	"char"
.LASF2:
	.string	"long int"
.LASF7:
	.string	"short unsigned int"
.LASF9:
	.string	"signed char"
.LASF15:
	.string	"ft_free"
.LASF5:
	.string	"long double"
.LASF10:
	.string	"short int"
	.section	.debug_line_str,"MS",@progbits,1
.LASF0:
	.string	"ft_free.c"
.LASF1:
	.string	"/home/fabi/42/cub3D/libft"
	.ident	"GCC: (Ubuntu 13.2.0-23ubuntu4) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

